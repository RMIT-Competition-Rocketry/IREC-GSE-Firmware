
GSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002ba8  08002ba8  00003ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc4  08002bc4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002bc4  08002bc4  00003bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bcc  08002bcc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00003bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00003bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bd4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000004a8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d00  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c31  00000000  00000000  0000dd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  0000f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e4  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bc8  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab08  00000000  00000000  000130cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd44a  00000000  00000000  0001dbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb01e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018f0  00000000  00000000  000fb064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000fc954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002b90 	.word	0x08002b90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002b90 	.word	0x08002b90

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <configureI2CBus1>:
 */

#include "stm32f4xx_hal.h"
#include "driver.h"
	void configureI2CBus1(void)
{ //for BUS, mode is alternate function
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	GPIOF->MODER &= (~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE1_Msk)); //everything except for
 800051c:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <configureI2CBus1+0xd4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a32      	ldr	r2, [pc, #200]	@ (80005ec <configureI2CBus1+0xd4>)
 8000522:	f023 030f 	bic.w	r3, r3, #15
 8000526:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (0x03<<GPIO_MODER_MODE0_Pos | 0x03 << GPIO_MODER_MODE1_Pos);
 8000528:	4b30      	ldr	r3, [pc, #192]	@ (80005ec <configureI2CBus1+0xd4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a2f      	ldr	r2, [pc, #188]	@ (80005ec <configureI2CBus1+0xd4>)
 800052e:	f043 030f 	orr.w	r3, r3, #15
 8000532:	6013      	str	r3, [r2, #0]
	GPIOF->OTYPER &= (~(GPIO_OTYPER_OT0_Msk | GPIO_OTYPER_OT1_Msk));
 8000534:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <configureI2CBus1+0xd4>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a2c      	ldr	r2, [pc, #176]	@ (80005ec <configureI2CBus1+0xd4>)
 800053a:	f023 0303 	bic.w	r3, r3, #3
 800053e:	6053      	str	r3, [r2, #4]
	GPIOF->OTYPER |= (0x01 << GPIO_OTYPER_OT0_Pos | 0x01<<GPIO_OTYPER_OT1_Pos); //open drain
 8000540:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <configureI2CBus1+0xd4>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	4a29      	ldr	r2, [pc, #164]	@ (80005ec <configureI2CBus1+0xd4>)
 8000546:	f043 0303 	orr.w	r3, r3, #3
 800054a:	6053      	str	r3, [r2, #4]
	GPIOF->OSPEEDR &= (~(GPIO_OSPEEDR_OSPEED0_Msk | GPIO_OSPEEDR_OSPEED1_Msk));
 800054c:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <configureI2CBus1+0xd4>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a26      	ldr	r2, [pc, #152]	@ (80005ec <configureI2CBus1+0xd4>)
 8000552:	f023 030f 	bic.w	r3, r3, #15
 8000556:	6093      	str	r3, [r2, #8]
	GPIOF->OSPEEDR |= 0x01 << GPIO_OSPEEDR_OSPEED0_Pos | 0x01 << GPIO_OSPEEDR_OSPEED1_Pos;
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <configureI2CBus1+0xd4>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4a23      	ldr	r2, [pc, #140]	@ (80005ec <configureI2CBus1+0xd4>)
 800055e:	f043 0305 	orr.w	r3, r3, #5
 8000562:	6093      	str	r3, [r2, #8]

	GPIOF->PUPDR &= (~(GPIO_PUPDR_PUPD0_Msk | GPIO_PUPDR_PUPD1_Msk));
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <configureI2CBus1+0xd4>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <configureI2CBus1+0xd4>)
 800056a:	f023 030f 	bic.w	r3, r3, #15
 800056e:	60d3      	str	r3, [r2, #12]
	GPIOF->PUPDR |= 0x01<<GPIO_PUPDR_PUPD0_Pos | 0x01<<GPIO_PUPDR_PUPD1_Pos; //enabling internal pull ups on I2C lines
 8000570:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <configureI2CBus1+0xd4>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	4a1d      	ldr	r2, [pc, #116]	@ (80005ec <configureI2CBus1+0xd4>)
 8000576:	f043 0305 	orr.w	r3, r3, #5
 800057a:	60d3      	str	r3, [r2, #12]

	//turn on alternate function of I2C
	GPIOF->AFR[0] |= 0x04; //alt function 3 //PF0
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <configureI2CBus1+0xd4>)
 800057e:	6a1b      	ldr	r3, [r3, #32]
 8000580:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <configureI2CBus1+0xd4>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6213      	str	r3, [r2, #32]
	GPIOF->AFR[0] |= (0x04 << (4*1)); //PF1
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <configureI2CBus1+0xd4>)
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <configureI2CBus1+0xd4>)
 800058e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000592:	6213      	str	r3, [r2, #32]

	I2C2->CR2 &= (~(I2C_CR2_FREQ_Msk));
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <configureI2CBus1+0xd8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	4a15      	ldr	r2, [pc, #84]	@ (80005f0 <configureI2CBus1+0xd8>)
 800059a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800059e:	6053      	str	r3, [r2, #4]
	I2C2->CR2 = 45; //for 45mhz = PCLK1 for AHB1 -> remember use decimal 45!
 80005a0:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005a2:	222d      	movs	r2, #45	@ 0x2d
 80005a4:	605a      	str	r2, [r3, #4]
	I2C2->CCR &= (~(0xFFF)); // clears bits 11:0
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a11      	ldr	r2, [pc, #68]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80005b0:	f023 030f 	bic.w	r3, r3, #15
 80005b4:	61d3      	str	r3, [r2, #28]
	I2C2->CCR |= 0x28; //for 100KHz
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005bc:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80005c0:	61d3      	str	r3, [r2, #28]
	I2C2->TRISE &= ~(I2C_TRISE_TRISE_Msk);
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005c4:	6a1b      	ldr	r3, [r3, #32]
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005cc:	6213      	str	r3, [r2, #32]
	I2C2->TRISE |= 0x46; //
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005d4:	f043 0346 	orr.w	r3, r3, #70	@ 0x46
 80005d8:	6213      	str	r3, [r2, #32]
	I2C2->CR1 = I2C_CR1_PE; //starts the protocol
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <configureI2CBus1+0xd8>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021400 	.word	0x40021400
 80005f0:	40005800 	.word	0x40005800

080005f4 <configureSPIBus1>:



void configureSPIBus1(void) //for ADC transducers
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 80005f8:	4b5c      	ldr	r3, [pc, #368]	@ (800076c <configureSPIBus1+0x178>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a5b      	ldr	r2, [pc, #364]	@ (800076c <configureSPIBus1+0x178>)
 80005fe:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000602:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODE5_Pos | 0x02 << GPIO_MODER_MODE6_Pos | 0x02 << GPIO_MODER_MODE7_Pos);
 8000604:	4b59      	ldr	r3, [pc, #356]	@ (800076c <configureSPIBus1+0x178>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a58      	ldr	r2, [pc, #352]	@ (800076c <configureSPIBus1+0x178>)
 800060a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800060e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5_Msk | GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk); //if needing to change internal pull up/downs
 8000610:	4b56      	ldr	r3, [pc, #344]	@ (800076c <configureSPIBus1+0x178>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a55      	ldr	r2, [pc, #340]	@ (800076c <configureSPIBus1+0x178>)
 8000616:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800061a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x01 << GPIO_PUPDR_PUPD5_Pos | 0x01 << GPIO_PUPDR_PUPD6_Pos | 0x01 << GPIO_PUPDR_PUPD7_Pos); //internal pull ups on SCK, MOSI and MISO
 800061c:	4b53      	ldr	r3, [pc, #332]	@ (800076c <configureSPIBus1+0x178>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a52      	ldr	r2, [pc, #328]	@ (800076c <configureSPIBus1+0x178>)
 8000622:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000626:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT5_Msk | GPIO_OTYPER_OT6_Msk | GPIO_OTYPER_OT7_Msk ); //push pull de
 8000628:	4b50      	ldr	r3, [pc, #320]	@ (800076c <configureSPIBus1+0x178>)
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	494f      	ldr	r1, [pc, #316]	@ (800076c <configureSPIBus1+0x178>)
 800062e:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8000632:	4013      	ands	r3, r2
 8000634:	604b      	str	r3, [r1, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5_Msk | GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED7_Msk);
 8000636:	4b4d      	ldr	r3, [pc, #308]	@ (800076c <configureSPIBus1+0x178>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	4a4c      	ldr	r2, [pc, #304]	@ (800076c <configureSPIBus1+0x178>)
 800063c:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000640:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x03<<GPIO_OSPEEDR_OSPEED5_Pos | 0x03<<GPIO_OSPEEDR_OSPEED6_Pos | 0x03<<GPIO_OSPEEDR_OSPEED7_Pos); //fast mode
 8000642:	4b4a      	ldr	r3, [pc, #296]	@ (800076c <configureSPIBus1+0x178>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4a49      	ldr	r2, [pc, #292]	@ (800076c <configureSPIBus1+0x178>)
 8000648:	f443 437c 	orr.w	r3, r3, #64512	@ 0xfc00
 800064c:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));
 800064e:	4b47      	ldr	r3, [pc, #284]	@ (800076c <configureSPIBus1+0x178>)
 8000650:	6a1b      	ldr	r3, [r3, #32]
 8000652:	4a46      	ldr	r2, [pc, #280]	@ (800076c <configureSPIBus1+0x178>)
 8000654:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000658:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800065c:	6213      	str	r3, [r2, #32]

	//Chip Select for Transducer: PG4
	GPIOG->MODER |= 0x01 << GPIO_MODER_MODE4_Pos;
 800065e:	4b44      	ldr	r3, [pc, #272]	@ (8000770 <configureSPIBus1+0x17c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a43      	ldr	r2, [pc, #268]	@ (8000770 <configureSPIBus1+0x17c>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000668:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD4_Msk);
 800066a:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <configureSPIBus1+0x17c>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	4a40      	ldr	r2, [pc, #256]	@ (8000770 <configureSPIBus1+0x17c>)
 8000670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000674:	60d3      	str	r3, [r2, #12]
	GPIOG->OTYPER &= ~(0x01 << GPIO_OTYPER_OT4_Pos); //Push Pull
 8000676:	4b3e      	ldr	r3, [pc, #248]	@ (8000770 <configureSPIBus1+0x17c>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a3d      	ldr	r2, [pc, #244]	@ (8000770 <configureSPIBus1+0x17c>)
 800067c:	f023 0310 	bic.w	r3, r3, #16
 8000680:	6053      	str	r3, [r2, #4]
	GPIOG->OSPEEDR |= 0x01<<GPIO_OSPEEDR_OSPEED4_Pos;
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <configureSPIBus1+0x17c>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4a3a      	ldr	r2, [pc, #232]	@ (8000770 <configureSPIBus1+0x17c>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068c:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD4; //raise up CS of PG
 800068e:	4b38      	ldr	r3, [pc, #224]	@ (8000770 <configureSPIBus1+0x17c>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a37      	ldr	r2, [pc, #220]	@ (8000770 <configureSPIBus1+0x17c>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	6153      	str	r3, [r2, #20]

	//Chip select for Loadcell: PA2
	GPIOA->MODER |= 0x01 << GPIO_MODER_MODE2_Pos;
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <configureSPIBus1+0x178>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a33      	ldr	r2, [pc, #204]	@ (800076c <configureSPIBus1+0x178>)
 80006a0:	f043 0310 	orr.w	r3, r3, #16
 80006a4:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk);
 80006a6:	4b31      	ldr	r3, [pc, #196]	@ (800076c <configureSPIBus1+0x178>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	4a30      	ldr	r2, [pc, #192]	@ (800076c <configureSPIBus1+0x178>)
 80006ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006b0:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER |= 0x00 <<GPIO_OTYPER_OT2_Pos;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <configureSPIBus1+0x178>)
 80006b4:	4a2d      	ldr	r2, [pc, #180]	@ (800076c <configureSPIBus1+0x178>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 0x01<<GPIO_OSPEEDR_OSPEED2_Pos;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <configureSPIBus1+0x178>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	4a2b      	ldr	r2, [pc, #172]	@ (800076c <configureSPIBus1+0x178>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6093      	str	r3, [r2, #8]
	GPIOA->ODR |= GPIO_ODR_OD2; //raise up CS of PG
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <configureSPIBus1+0x178>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a28      	ldr	r2, [pc, #160]	@ (800076c <configureSPIBus1+0x178>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6153      	str	r3, [r2, #20]

	//timer config for SPI1 -> remember to change RCC to allow for TIM7
	TIM7->ARR &= ~(TIM_ARR_ARR_Msk);
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <configureSPIBus1+0x180>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d6:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <configureSPIBus1+0x180>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->PSC &= ~(TIM_PSC_PSC_Msk);
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <configureSPIBus1+0x180>)
 80006de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e0:	4a24      	ldr	r2, [pc, #144]	@ (8000774 <configureSPIBus1+0x180>)
 80006e2:	0c1b      	lsrs	r3, r3, #16
 80006e4:	041b      	lsls	r3, r3, #16
 80006e6:	6293      	str	r3, [r2, #40]	@ 0x28

	SPI1->CR1 &= (~(SPI_CR1_BR_Msk));
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <configureSPIBus1+0x184>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <configureSPIBus1+0x184>)
 80006ee:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80006f2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (0x04 <<SPI_CR1_BR_Pos); //SPIclk/32 //~1MHZ
 80006f4:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <configureSPIBus1+0x184>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000778 <configureSPIBus1+0x184>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (SPI_CR1_CPHA); //
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <configureSPIBus1+0x184>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <configureSPIBus1+0x184>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]
	//SPI1->CR1 |= SPI_CR1_CPHA; // CPHA mode 1 //comment for mode 0
	SPI1->CR1 |= (SPI_CR1_CPOL);
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <configureSPIBus1+0x184>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <configureSPIBus1+0x184>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6013      	str	r3, [r2, #0]
	//SPI1->CR1 |= SPI_CR1_CPOL; //CPOL mode 1 //comment for mode 0
	//Clock is IDLE high, and polarity is on the falling edge!

	SPI1->CR1 |= SPI_CR1_MSTR; //sets SPI to master mode
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <configureSPIBus1+0x184>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <configureSPIBus1+0x184>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //set both bits;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <configureSPIBus1+0x184>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <configureSPIBus1+0x184>)
 800072a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800072e:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(SPI_CR1_LSBFIRST); //MSB
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <configureSPIBus1+0x184>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <configureSPIBus1+0x184>)
 8000736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800073a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_DFF; //16 bit mode has been selected!
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <configureSPIBus1+0x184>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <configureSPIBus1+0x184>)
 8000742:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000746:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE);
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <configureSPIBus1+0x184>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <configureSPIBus1+0x184>)
 800074e:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 8000752:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE; //enables the protocol
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <configureSPIBus1+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <configureSPIBus1+0x184>)
 800075a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40020000 	.word	0x40020000
 8000770:	40021800 	.word	0x40021800
 8000774:	40001400 	.word	0x40001400
 8000778:	40013000 	.word	0x40013000

0800077c <configureSPIBus6>:


void configureSPIBus6(void)// 	//for both additional 5V channels and LoRa
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	GPIOG->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk);
 8000780:	4b58      	ldr	r3, [pc, #352]	@ (80008e4 <configureSPIBus6+0x168>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a57      	ldr	r2, [pc, #348]	@ (80008e4 <configureSPIBus6+0x168>)
 8000786:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800078a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x02 <<GPIO_MODER_MODE12_Pos | 0x02 << GPIO_MODER_MODE13_Pos | 0x02 << GPIO_MODER_MODE14_Pos);
 800078c:	4b55      	ldr	r3, [pc, #340]	@ (80008e4 <configureSPIBus6+0x168>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a54      	ldr	r2, [pc, #336]	@ (80008e4 <configureSPIBus6+0x168>)
 8000792:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8000796:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD12_Msk | GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk); //if needing to change internal pull up/downs
 8000798:	4b52      	ldr	r3, [pc, #328]	@ (80008e4 <configureSPIBus6+0x168>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4a51      	ldr	r2, [pc, #324]	@ (80008e4 <configureSPIBus6+0x168>)
 800079e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80007a2:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |= (0x01 << GPIO_PUPDR_PUPD12_Pos | 0x01 << GPIO_PUPDR_PUPD13_Pos | 0x01 << GPIO_PUPDR_PUPD14_Pos); //internal pull ups on SCK, MOSI and MISO
 80007a4:	4b4f      	ldr	r3, [pc, #316]	@ (80008e4 <configureSPIBus6+0x168>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4a4e      	ldr	r2, [pc, #312]	@ (80008e4 <configureSPIBus6+0x168>)
 80007aa:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 80007ae:	60d3      	str	r3, [r2, #12]
		//@var PG12 = SDO
		//		PG13 = SCLK
		// 		 PG14 = SDI
	//GPIO for LoRa, RF Switch & Chip select
	GPIOG->MODER &= ~(GPIO_MODER_MODE9_Msk | GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 80007b0:	4b4c      	ldr	r3, [pc, #304]	@ (80008e4 <configureSPIBus6+0x168>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a4b      	ldr	r2, [pc, #300]	@ (80008e4 <configureSPIBus6+0x168>)
 80007b6:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 80007ba:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x01 <<GPIO_MODER_MODE9_Pos | 0x01 <<GPIO_MODER_MODE10_Pos | 0x01 <<GPIO_MODER_MODE11_Pos);
 80007bc:	4b49      	ldr	r3, [pc, #292]	@ (80008e4 <configureSPIBus6+0x168>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a48      	ldr	r2, [pc, #288]	@ (80008e4 <configureSPIBus6+0x168>)
 80007c2:	f443 03a8 	orr.w	r3, r3, #5505024	@ 0x540000
 80007c6:	6013      	str	r3, [r2, #0]
	//		PG10 = RF_SWITCH
	//		 PG11 = CS

	//timer config for LoRa
		//Use the same config as Australis board
	TIM6->ARR &= ~(TIM_ARR_ARR_Msk);
 80007c8:	4b47      	ldr	r3, [pc, #284]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007cc:	4b46      	ldr	r3, [pc, #280]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC &= ~(TIM_PSC_PSC_Msk);
 80007d2:	4b45      	ldr	r3, [pc, #276]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007d6:	4a44      	ldr	r2, [pc, #272]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007d8:	0c1b      	lsrs	r3, r3, #16
 80007da:	041b      	lsls	r3, r3, #16
 80007dc:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR |= 20000;
 80007de:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	4a41      	ldr	r2, [pc, #260]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007e4:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->PSC |= 251; //same as australis to remain consistent!
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <configureSPIBus6+0x16c>)
 80007f4:	f043 03fb 	orr.w	r3, r3, #251	@ 0xfb
 80007f8:	6293      	str	r3, [r2, #40]	@ 0x28

	GPIOG->ODR |= (GPIO_ODR_OD9); //hold reset high for SX1272
 80007fa:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <configureSPIBus6+0x168>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a39      	ldr	r2, [pc, #228]	@ (80008e4 <configureSPIBus6+0x168>)
 8000800:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000804:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //enable TIM6
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <configureSPIBus6+0x16c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <configureSPIBus6+0x16c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6013      	str	r3, [r2, #0]
//	while((TIM6->CR1 & TIM_SR_UIF)==0); //wait for hardware registers to be updated
	GPIOG->ODR &= ~(GPIO_ODR_OD9); //resets reset on GPIO
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <configureSPIBus6+0x168>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a33      	ldr	r2, [pc, #204]	@ (80008e4 <configureSPIBus6+0x168>)
 8000818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800081c:	6153      	str	r3, [r2, #20]
	TIM6->CR1 &= ~(TIM_SR_UIF); //clears UIF register
 800081e:	4b32      	ldr	r3, [pc, #200]	@ (80008e8 <configureSPIBus6+0x16c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a31      	ldr	r2, [pc, #196]	@ (80008e8 <configureSPIBus6+0x16c>)
 8000824:	f023 0301 	bic.w	r3, r3, #1
 8000828:	6013      	str	r3, [r2, #0]

	//
	GPIOG->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT12_Msk | GPIO_OTYPER_OT13_Msk | GPIO_OTYPER_OT14_Msk); //push pull
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <configureSPIBus6+0x168>)
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	492d      	ldr	r1, [pc, #180]	@ (80008e4 <configureSPIBus6+0x168>)
 8000830:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8000834:	4013      	ands	r3, r2
 8000836:	604b      	str	r3, [r1, #4]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED12_Msk | GPIO_OSPEEDR_OSPEED13_Msk | GPIO_OSPEEDR_OSPEED14_Msk);
 8000838:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <configureSPIBus6+0x168>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4a29      	ldr	r2, [pc, #164]	@ (80008e4 <configureSPIBus6+0x168>)
 800083e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000842:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0x02<<GPIO_OSPEEDR_OSPEED12_Pos | 0x02<<GPIO_OSPEEDR_OSPEED13_Pos | 0x02<<GPIO_OSPEEDR_OSPEED14_Pos); //fast mode
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <configureSPIBus6+0x168>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	4a26      	ldr	r2, [pc, #152]	@ (80008e4 <configureSPIBus6+0x168>)
 800084a:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 800084e:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD11; //raise up CS
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <configureSPIBus6+0x168>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <configureSPIBus6+0x168>)
 8000856:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800085a:	6153      	str	r3, [r2, #20]

	GPIOG->AFR[1] &= ~((GPIO_AFRH_AFRH5) | (GPIO_AFRH_AFRH6) | (GPIO_AFRH_AFRH7));// alternate functions for SPI3
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <configureSPIBus6+0x168>)
 800085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000860:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <configureSPIBus6+0x168>)
 8000862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000866:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= ((0x05 << 4*4) | (0x05 << 5*4) | (0x05 << 6*4));// alternate functions for SPI3
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <configureSPIBus6+0x168>)
 800086a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800086c:	4a1d      	ldr	r2, [pc, #116]	@ (80008e4 <configureSPIBus6+0x168>)
 800086e:	f043 63aa 	orr.w	r3, r3, #89128960	@ 0x5500000
 8000872:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000876:	6253      	str	r3, [r2, #36]	@ 0x24

    SPI6->CR1 &= ~(SPI_CR1_BR_Msk); // Clear baud rate bits
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <configureSPIBus6+0x170>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <configureSPIBus6+0x170>)
 800087e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000882:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= (0x02 << SPI_CR1_BR_Pos); // SPIclk/8
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <configureSPIBus6+0x170>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <configureSPIBus6+0x170>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk); // CPHA = 0, CPOL = 0
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <configureSPIBus6+0x170>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <configureSPIBus6+0x170>)
 8000896:	f023 0303 	bic.w	r3, r3, #3
 800089a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_MSTR; // Master mode
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <configureSPIBus6+0x170>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <configureSPIBus6+0x170>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; // Software slave management
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <configureSPIBus6+0x170>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <configureSPIBus6+0x170>)
 80008ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80008b2:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_LSBFIRST); // MSB first
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <configureSPIBus6+0x170>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <configureSPIBus6+0x170>)
 80008ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008be:	6013      	str	r3, [r2, #0]
   // SPI6->CR1 |= SPI_CR1_DFF; // 16-bit mode
    SPI6->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE); // Full duplex
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <configureSPIBus6+0x170>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a09      	ldr	r2, [pc, #36]	@ (80008ec <configureSPIBus6+0x170>)
 80008c6:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 80008ca:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SPE; // Enable SPI
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <configureSPIBus6+0x170>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <configureSPIBus6+0x170>)
 80008d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40001000 	.word	0x40001000
 80008ec:	40015400 	.word	0x40015400

080008f0 <configureRCC_APB1>:
	//rise and repeat for all SPI buses
}


void configureRCC_APB1(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN);
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <configureRCC_APB1+0x54>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <configureRCC_APB1+0x54>)
 80008fa:	f423 0381 	bic.w	r3, r3, #4227072	@ 0x408000
 80008fe:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <configureRCC_APB1+0x54>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <configureRCC_APB1+0x54>)
 800090a:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 800090e:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST |  RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST;
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <configureRCC_APB1+0x54>)
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <configureRCC_APB1+0x54>)
 800091a:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 800091e:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000922:	6213      	str	r3, [r2, #32]
	__ASM("NOP");
 8000924:	bf00      	nop
	__ASM("NOP");
 8000926:	bf00      	nop
	RCC->APB1RSTR &= (uint16_t)~(RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST | RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST);
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <configureRCC_APB1+0x54>)
 800092a:	6a1a      	ldr	r2, [r3, #32]
 800092c:	4905      	ldr	r1, [pc, #20]	@ (8000944 <configureRCC_APB1+0x54>)
 800092e:	f647 73ce 	movw	r3, #32718	@ 0x7fce
 8000932:	4013      	ands	r3, r2
 8000934:	620b      	str	r3, [r1, #32]
	__ASM("NOP");
 8000936:	bf00      	nop
	__ASM("NOP");
 8000938:	bf00      	nop
	//configure for more timers when necessary
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40023800 	.word	0x40023800

08000948 <configureRCC_APB2>:

void configureRCC_APB2(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	RCC->APB2ENR &=  ~(RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN |RCC_APB2ENR_SPI6EN| RCC_APB2ENR_SYSCFGEN /*important for interrupts and other sys init*/| RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN);
 800094c:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <configureRCC_APB2+0x48>)
 800094e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000950:	490f      	ldr	r1, [pc, #60]	@ (8000990 <configureRCC_APB2+0x48>)
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <configureRCC_APB2+0x4c>)
 8000954:	4013      	ands	r3, r2
 8000956:	644b      	str	r3, [r1, #68]	@ 0x44
	RCC->APB2ENR |=  RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN |RCC_APB2ENR_SPI6EN| RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN;
 8000958:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <configureRCC_APB2+0x48>)
 800095a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800095c:	490c      	ldr	r1, [pc, #48]	@ (8000990 <configureRCC_APB2+0x48>)
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <configureRCC_APB2+0x50>)
 8000960:	4313      	orrs	r3, r2
 8000962:	644b      	str	r3, [r1, #68]	@ 0x44

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST|RCC_APB2RSTR_SPI6RST|RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <configureRCC_APB2+0x48>)
 8000966:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000968:	4909      	ldr	r1, [pc, #36]	@ (8000990 <configureRCC_APB2+0x48>)
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <configureRCC_APB2+0x54>)
 800096c:	4313      	orrs	r3, r2
 800096e:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000970:	bf00      	nop
	__ASM("NOP");
 8000972:	bf00      	nop
	RCC->APB2RSTR &= (uint16_t)~(RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST|RCC_APB2RSTR_SPI6RST| RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST);
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <configureRCC_APB2+0x48>)
 8000976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000978:	4905      	ldr	r1, [pc, #20]	@ (8000990 <configureRCC_APB2+0x48>)
 800097a:	f648 73df 	movw	r3, #36831	@ 0x8fdf
 800097e:	4013      	ands	r3, r2
 8000980:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000982:	bf00      	nop
	__ASM("NOP");
 8000984:	bf00      	nop
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800
 8000994:	ffdf8fde 	.word	0xffdf8fde
 8000998:	00207021 	.word	0x00207021
 800099c:	00247020 	.word	0x00247020

080009a0 <configureRCC_AHB1>:
void configureRCC_AHB1(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <configureRCC_AHB1+0x38>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <configureRCC_AHB1+0x38>)
 80009aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80009ae:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <configureRCC_AHB1+0x38>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <configureRCC_AHB1+0x38>)
 80009b6:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 80009ba:	6313      	str	r3, [r2, #48]	@ 0x30
	__ASM("NOP");
 80009bc:	bf00      	nop
	__ASM("NOP");
 80009be:	bf00      	nop
	RCC->AHB1RSTR &= (uint16_t)(~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST));
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <configureRCC_AHB1+0x38>)
 80009c2:	691a      	ldr	r2, [r3, #16]
 80009c4:	4904      	ldr	r1, [pc, #16]	@ (80009d8 <configureRCC_AHB1+0x38>)
 80009c6:	f64f 7382 	movw	r3, #65410	@ 0xff82
 80009ca:	4013      	ands	r3, r2
 80009cc:	610b      	str	r3, [r1, #16]
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40023800 	.word	0x40023800

080009dc <GPIO_init>:
#include "gpio.h"
#include "stm32f4xx_hal.h"


void GPIO_init(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	460b      	mov	r3, r1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	4613      	mov	r3, r2
 80009f0:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	79ba      	ldrb	r2, [r7, #6]
 8000a02:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	7e3a      	ldrb	r2, [r7, #24]
 8000a08:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	7f3a      	ldrb	r2, [r7, #28]
 8000a0e:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a16:	711a      	strb	r2, [r3, #4]

	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	79f9      	ldrb	r1, [r7, #7]
 8000a20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	400a      	ands	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	79f9      	ldrb	r1, [r7, #7]
 8000a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	79b9      	ldrb	r1, [r7, #6]
 8000a5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	79b9      	ldrb	r1, [r7, #6]
 8000a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	7e39      	ldrb	r1, [r7, #24]
 8000a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	7e39      	ldrb	r1, [r7, #24]
 8000aae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS)); //clears the bit that we want to edit
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	7f39      	ldrb	r1, [r7, #28]
 8000aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	400a      	ands	r2, r1
 8000ade:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	7f39      	ldrb	r1, [r7, #28]
 8000ae8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	60da      	str	r2, [r3, #12]

}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SX1272_init>:
    GPIO_TypeDef *port,
    unsigned long cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
  SPI_init(&lora->base, COMM_LORA, SPI6, MODE8, port, cs);
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2300      	movs	r3, #0
 8000b22:	4a23      	ldr	r2, [pc, #140]	@ (8000bb0 <SX1272_init+0xa8>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	f001 f8e5 	bl	8001cf4 <SPI_init>
  lora->standby      = SX1272_standby;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4a21      	ldr	r2, [pc, #132]	@ (8000bb4 <SX1272_init+0xac>)
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24
  lora->enableBoost  = SX1272_enableBoost;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <SX1272_init+0xb0>)
 8000b34:	621a      	str	r2, [r3, #32]
  lora->transmit     = SX1272_transmit;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4a20      	ldr	r2, [pc, #128]	@ (8000bbc <SX1272_init+0xb4>)
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  lora->startReceive = SX1272_startReceive;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4a20      	ldr	r2, [pc, #128]	@ (8000bc0 <SX1272_init+0xb8>)
 8000b40:	62da      	str	r2, [r3, #44]	@ 0x2c
  lora->readReceive  = SX1272_readReceive;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc4 <SX1272_init+0xbc>)
 8000b46:	631a      	str	r2, [r3, #48]	@ 0x30
  lora->clearIRQ     = SX1272_clearIRQ;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc8 <SX1272_init+0xc0>)
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34


  _SX1272_setMode(lora, SX1272_MODE_SLEEP); // Set mode to sleep
 8000b4e:	2100      	movs	r1, #0
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f83b 	bl	8000bcc <_SX1272_setMode>
  //MSB remains the same as default value of E4
 // SX1272_writeRegister(lora, SX1272_REG_FR_MIB, (0xE6)); //sets middle byte
  //SX1272_writeRegister(lora, SX1272_REG_FR_LSB, (0x67)); //sets last byte

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	2101      	movs	r1, #1
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f924 	bl	8000da8 <SX1272_writeRegister>
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 8000b60:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	211d      	movs	r1, #29
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f000 f914 	bl	8000da8 <SX1272_writeRegister>
  );
  /* clang-format on */

  /** @todo set spreading factor */
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 8000b80:	2294      	movs	r2, #148	@ 0x94
 8000b82:	211e      	movs	r1, #30
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f90f 	bl	8000da8 <SX1272_writeRegister>

  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	2122      	movs	r1, #34	@ 0x22
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f000 f90a 	bl	8000da8 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000b94:	2220      	movs	r2, #32
 8000b96:	2123      	movs	r1, #35	@ 0x23
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f000 f905 	bl	8000da8 <SX1272_writeRegister>

  _SX1272_setMode(lora, SX1272_MODE_STDBY); // Set mode to Standby mode!
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f000 f813 	bl	8000bcc <_SX1272_setMode>

}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40015400 	.word	0x40015400
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c09 	.word	0x08000c09
 8000bbc:	08000c5b 	.word	0x08000c5b
 8000bc0:	08000cc9 	.word	0x08000cc9
 8000bc4:	08000d11 	.word	0x08000d11
 8000bc8:	08000d89 	.word	0x08000d89

08000bcc <_SX1272_setMode>:
 *
 * @param lora         Pointer to LoRa struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f91b 	bl	8000e16 <SX1272_readRegister>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f023 0307 	bic.w	r3, r3, #7
 8000bea:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f8d4 	bl	8000da8 <SX1272_writeRegister>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SX1272_enableBoost>:
 * @param  enable Boolean value for the enable toggle.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 8000c14:	2109      	movs	r1, #9
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f8fd 	bl	8000e16 <SX1272_readRegister>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  regPaConfig         &= ~SX1272_PA_SELECT;                               // Mask out PA select bit
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c26:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig | SX1272_PA_SELECT);
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	2109      	movs	r1, #9
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f8b7 	bl	8000da8 <SX1272_writeRegister>
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffbd 	bl	8000bcc <_SX1272_setMode>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000c64:	2101      	movs	r1, #1
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 8000c6c:	2240      	movs	r2, #64	@ 0x40
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f899 	bl	8000da8 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 8000c76:	2208      	movs	r2, #8
 8000c78:	2112      	movs	r1, #18
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f894 	bl	8000da8 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 8000c80:	2200      	movs	r2, #0
 8000c82:	210d      	movs	r1, #13
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f88f 	bl	8000da8 <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e00b      	b.n	8000ca8 <SX1272_transmit+0x4e>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f883 	bl	8000da8 <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b1f      	cmp	r3, #31
 8000cac:	ddf0      	ble.n	8000c90 <SX1272_transmit+0x36>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	771a      	strb	r2, [r3, #28]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7f1b      	ldrb	r3, [r3, #28]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff86 	bl	8000bcc <_SX1272_setMode>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff7a 	bl	8000bcc <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f863 	bl	8000da8 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 8000ce2:	2240      	movs	r2, #64	@ 0x40
 8000ce4:	2112      	movs	r1, #18
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f85e 	bl	8000da8 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 8000cec:	2200      	movs	r2, #0
 8000cee:	210d      	movs	r1, #13
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f859 	bl	8000da8 <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	771a      	strb	r2, [r3, #28]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7f1b      	ldrb	r3, [r3, #28]
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff62 	bl	8000bcc <_SX1272_setMode>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	2112      	movs	r1, #18
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f000 f840 	bl	8000da8 <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 8000d28:	2113      	movs	r1, #19
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f873 	bl	8000e16 <SX1272_readRegister>
 8000d30:	4603      	mov	r3, r0
 8000d32:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 8000d34:	2110      	movs	r1, #16
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f86d 	bl	8000e16 <SX1272_readRegister>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d901      	bls.n	8000d4c <SX1272_readReceive+0x3c>
    return false;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e019      	b.n	8000d80 <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 8000d4c:	7cbb      	ldrb	r3, [r7, #18]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	210d      	movs	r1, #13
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f000 f828 	bl	8000da8 <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00b      	b.n	8000d76 <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	18d4      	adds	r4, r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 f855 	bl	8000e16 <SX1272_readRegister>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	7cfb      	ldrb	r3, [r7, #19]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbef      	blt.n	8000d5e <SX1272_readReceive+0x4e>
  }

  return true;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd90      	pop	{r4, r7, pc}

08000d88 <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	461a      	mov	r2, r3
 8000d98:	2112      	movs	r1, #18
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f804 	bl	8000da8 <SX1272_writeRegister>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
 8000db4:	4613      	mov	r3, r2
 8000db6:	70bb      	strb	r3, [r7, #2]
  SPI spi = lora->base;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f107 0408 	add.w	r4, r7, #8
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  //Pull CS low
  spi.port->ODR &= ~spi.cs;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	6959      	ldr	r1, [r3, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	615a      	str	r2, [r3, #20]

  //Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  spi.transmit(&spi, payload);      // Transmit payload
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000dea:	b291      	uxth	r1, r2
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	4610      	mov	r0, r2
 8000df2:	4798      	blx	r3
  spi.transmit(&spi, data);         // Transmit write data
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	78ba      	ldrb	r2, [r7, #2]
 8000df8:	b291      	uxth	r1, r2
 8000dfa:	f107 0208 	add.w	r2, r7, #8
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4798      	blx	r3

  // Set CS high
  spi.port->ODR |= spi.cs;
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6959      	ldr	r1, [r3, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	615a      	str	r2, [r3, #20]
}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bdb0      	pop	{r4, r5, r7, pc}

08000e16 <SX1272_readRegister>:

uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 8000e16:	b5b0      	push	{r4, r5, r7, lr}
 8000e18:	b08a      	sub	sp, #40	@ 0x28
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SPI spi         = lora->base;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f107 0408 	add.w	r4, r7, #8
 8000e2e:	461d      	mov	r5, r3
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  // Pull CS low
  spi.port->ODR &= ~spi.cs;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6959      	ldr	r1, [r3, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	400a      	ands	r2, r1
 8000e48:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  response        = spi.transmit(&spi, payload); // Transmit payload
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000e5a:	b291      	uxth	r1, r2
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	4610      	mov	r0, r2
 8000e62:	4798      	blx	r3
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  response        = spi.transmit(&spi, 0xFF);    // Transmit dummy data and reasd response
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	f107 0208 	add.w	r2, r7, #8
 8000e70:	21ff      	movs	r1, #255	@ 0xff
 8000e72:	4610      	mov	r0, r2
 8000e74:	4798      	blx	r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  // Set CS high
  spi.port->ODR |= spi.cs;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6959      	ldr	r1, [r3, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	615a      	str	r2, [r3, #20]

  return response;
 8000e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3728      	adds	r7, #40	@ 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bdb0      	pop	{r4, r5, r7, pc}

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db12      	blt.n	8000f08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	490a      	ldr	r1, [pc, #40]	@ (8000f14 <__NVIC_DisableIRQ+0x44>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	3320      	adds	r3, #32
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f02:	f3bf 8f6f 	isb	sy
}
 8000f06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000f1e:	f001 f83f 	bl	8001fa0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8000f22:	f000 fb69 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	configureRCC_APB1();
 8000f26:	f7ff fce3 	bl	80008f0 <configureRCC_APB1>
	configureRCC_APB2();
 8000f2a:	f7ff fd0d 	bl	8000948 <configureRCC_APB2>
	configureRCC_AHB1();
 8000f2e:	f7ff fd37 	bl	80009a0 <configureRCC_AHB1>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	delay_software_ms(100); //important!!
 8000f32:	2064      	movs	r0, #100	@ 0x64
 8000f34:	f000 fec2 	bl	8001cbc <delay_software_ms>

	MX_GPIO_Init();
 8000f38:	f000 fbce 	bl	80016d8 <MX_GPIO_Init>
	//MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
	configureSPIBus1();
 8000f3c:	f7ff fb5a 	bl	80005f4 <configureSPIBus1>
	configureSPIBus6(); //SPI6
 8000f40:	f7ff fc1c 	bl	800077c <configureSPIBus6>
 // configureSPIBus4();
	configureI2CBus1();
 8000f44:	f7ff fae8 	bl	8000518 <configureI2CBus1>

	//-------------------- SMD LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION
	//PG0 -> Power LED
	GPIO_init(&LED_1, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0C);
 8000f48:	230c      	movs	r3, #12
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	2201      	movs	r2, #1
 8000f58:	49b3      	ldr	r1, [pc, #716]	@ (8001228 <main+0x310>)
 8000f5a:	48b4      	ldr	r0, [pc, #720]	@ (800122c <main+0x314>)
 8000f5c:	f7ff fd3e 	bl	80009dc <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&LED_2, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0B);
 8000f60:	230b      	movs	r3, #11
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2301      	movs	r3, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2201      	movs	r2, #1
 8000f70:	49ad      	ldr	r1, [pc, #692]	@ (8001228 <main+0x310>)
 8000f72:	48af      	ldr	r0, [pc, #700]	@ (8001230 <main+0x318>)
 8000f74:	f7ff fd32 	bl	80009dc <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&LED_3, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0A);
 8000f78:	230a      	movs	r3, #10
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	2201      	movs	r2, #1
 8000f88:	49a7      	ldr	r1, [pc, #668]	@ (8001228 <main+0x310>)
 8000f8a:	48aa      	ldr	r0, [pc, #680]	@ (8001234 <main+0x31c>)
 8000f8c:	f7ff fd26 	bl	80009dc <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&LED_4, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 8000f90:	2309      	movs	r3, #9
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	49a1      	ldr	r1, [pc, #644]	@ (8001228 <main+0x310>)
 8000fa2:	48a5      	ldr	r0, [pc, #660]	@ (8001238 <main+0x320>)
 8000fa4:	f7ff fd1a 	bl	80009dc <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&LED_5, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x08);
 8000fa8:	2308      	movs	r3, #8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	499b      	ldr	r1, [pc, #620]	@ (8001228 <main+0x310>)
 8000fba:	48a0      	ldr	r0, [pc, #640]	@ (800123c <main+0x324>)
 8000fbc:	f7ff fd0e 	bl	80009dc <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&LED_6, GPIOC, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 8000fc0:	2309      	movs	r3, #9
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2201      	movs	r2, #1
 8000fd0:	499b      	ldr	r1, [pc, #620]	@ (8001240 <main+0x328>)
 8000fd2:	489c      	ldr	r0, [pc, #624]	@ (8001244 <main+0x32c>)
 8000fd4:	f7ff fd02 	bl	80009dc <GPIO_init>
	//-------------------- LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION

	//PG0 -> Power LED
	GPIO_init(&led_power, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4997      	ldr	r1, [pc, #604]	@ (8001248 <main+0x330>)
 8000fea:	4898      	ldr	r0, [pc, #608]	@ (800124c <main+0x334>)
 8000fec:	f7ff fcf6 	bl	80009dc <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&led_local, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2201      	movs	r2, #1
 8001000:	4991      	ldr	r1, [pc, #580]	@ (8001248 <main+0x330>)
 8001002:	4893      	ldr	r0, [pc, #588]	@ (8001250 <main+0x338>)
 8001004:	f7ff fcea 	bl	80009dc <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&led_remote, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x07);
 8001008:	2307      	movs	r3, #7
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2302      	movs	r3, #2
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2301      	movs	r3, #1
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	2201      	movs	r2, #1
 8001018:	498e      	ldr	r1, [pc, #568]	@ (8001254 <main+0x33c>)
 800101a:	488f      	ldr	r0, [pc, #572]	@ (8001258 <main+0x340>)
 800101c:	f7ff fcde 	bl	80009dc <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&led_transducer, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001020:	2308      	movs	r3, #8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2302      	movs	r3, #2
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	2201      	movs	r2, #1
 8001030:	4988      	ldr	r1, [pc, #544]	@ (8001254 <main+0x33c>)
 8001032:	488a      	ldr	r0, [pc, #552]	@ (800125c <main+0x344>)
 8001034:	f7ff fcd2 	bl	80009dc <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&led_n2o, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8001038:	2305      	movs	r3, #5
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2302      	movs	r3, #2
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	2301      	movs	r3, #1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	2201      	movs	r2, #1
 8001048:	497f      	ldr	r1, [pc, #508]	@ (8001248 <main+0x330>)
 800104a:	4885      	ldr	r0, [pc, #532]	@ (8001260 <main+0x348>)
 800104c:	f7ff fcc6 	bl	80009dc <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&led_o2, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x06);
 8001050:	2306      	movs	r3, #6
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2302      	movs	r3, #2
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	2201      	movs	r2, #1
 8001060:	4979      	ldr	r1, [pc, #484]	@ (8001248 <main+0x330>)
 8001062:	4880      	ldr	r0, [pc, #512]	@ (8001264 <main+0x34c>)
 8001064:	f7ff fcba 	bl	80009dc <GPIO_init>

	//-------------------- Control GPIO --------------------------

	//PF15-> Activate_sys SW
	GPIO_init(&activate_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001068:	230f      	movs	r3, #15
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2302      	movs	r3, #2
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2301      	movs	r3, #1
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	2200      	movs	r2, #0
 8001078:	497b      	ldr	r1, [pc, #492]	@ (8001268 <main+0x350>)
 800107a:	487c      	ldr	r0, [pc, #496]	@ (800126c <main+0x354>)
 800107c:	f7ff fcae 	bl	80009dc <GPIO_init>
	//PF14-> Local_control SW
	GPIO_init(&local_control_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8001080:	230e      	movs	r3, #14
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2302      	movs	r3, #2
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	2301      	movs	r3, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2300      	movs	r3, #0
 800108e:	2200      	movs	r2, #0
 8001090:	4975      	ldr	r1, [pc, #468]	@ (8001268 <main+0x350>)
 8001092:	4877      	ldr	r0, [pc, #476]	@ (8001270 <main+0x358>)
 8001094:	f7ff fca2 	bl	80009dc <GPIO_init>
	//PF13-> N20_ISO SW
	GPIO_init(&N2O_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001098:	230d      	movs	r3, #13
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2302      	movs	r3, #2
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2200      	movs	r2, #0
 80010a8:	496f      	ldr	r1, [pc, #444]	@ (8001268 <main+0x350>)
 80010aa:	4872      	ldr	r0, [pc, #456]	@ (8001274 <main+0x35c>)
 80010ac:	f7ff fc96 	bl	80009dc <GPIO_init>
	//PF12-> O2_ISO SW
	GPIO_init(&O2_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80010b0:	230c      	movs	r3, #12
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2302      	movs	r3, #2
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	4969      	ldr	r1, [pc, #420]	@ (8001268 <main+0x350>)
 80010c2:	486d      	ldr	r0, [pc, #436]	@ (8001278 <main+0x360>)
 80010c4:	f7ff fc8a 	bl	80009dc <GPIO_init>
	//PF11-> IGNITION_ISO SW
	GPIO_init(&IGNITION_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 80010c8:	230b      	movs	r3, #11
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2302      	movs	r3, #2
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	2200      	movs	r2, #0
 80010d8:	4963      	ldr	r1, [pc, #396]	@ (8001268 <main+0x350>)
 80010da:	4868      	ldr	r0, [pc, #416]	@ (800127c <main+0x364>)
 80010dc:	f7ff fc7e 	bl	80009dc <GPIO_init>
	//PB0-> N2O_DEADMAN_SW
	GPIO_init(&N2O_DEAD_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 80010e0:	2300      	movs	r3, #0
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2302      	movs	r3, #2
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	2200      	movs	r2, #0
 80010f0:	4963      	ldr	r1, [pc, #396]	@ (8001280 <main+0x368>)
 80010f2:	4864      	ldr	r0, [pc, #400]	@ (8001284 <main+0x36c>)
 80010f4:	f7ff fc72 	bl	80009dc <GPIO_init>
	//PC5-> O2_DEADMAN_SW
	GPIO_init(&O2_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 80010f8:	2305      	movs	r3, #5
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2302      	movs	r3, #2
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	2200      	movs	r2, #0
 8001108:	494d      	ldr	r1, [pc, #308]	@ (8001240 <main+0x328>)
 800110a:	485f      	ldr	r0, [pc, #380]	@ (8001288 <main+0x370>)
 800110c:	f7ff fc66 	bl	80009dc <GPIO_init>
	//PC4-> IGNITE_DEADMAN_SW
	GPIO_init(&IGNITE_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x04);
 8001110:	2304      	movs	r3, #4
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2302      	movs	r3, #2
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	2301      	movs	r3, #1
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2300      	movs	r3, #0
 800111e:	2200      	movs	r2, #0
 8001120:	4947      	ldr	r1, [pc, #284]	@ (8001240 <main+0x328>)
 8001122:	485a      	ldr	r0, [pc, #360]	@ (800128c <main+0x374>)
 8001124:	f7ff fc5a 	bl	80009dc <GPIO_init>

	//-------------------- IGNITE ACTUATION GPIO --------------------------
	GPIO_init(&Ignition1_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001128:	230f      	movs	r3, #15
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2302      	movs	r3, #2
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2301      	movs	r3, #1
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2300      	movs	r3, #0
 8001136:	2201      	movs	r2, #1
 8001138:	4955      	ldr	r1, [pc, #340]	@ (8001290 <main+0x378>)
 800113a:	4856      	ldr	r0, [pc, #344]	@ (8001294 <main+0x37c>)
 800113c:	f7ff fc4e 	bl	80009dc <GPIO_init>
	GPIO_init(&Ignition1_OP ,GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8001140:	230e      	movs	r3, #14
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2302      	movs	r3, #2
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	2201      	movs	r2, #1
 8001150:	494f      	ldr	r1, [pc, #316]	@ (8001290 <main+0x378>)
 8001152:	4851      	ldr	r0, [pc, #324]	@ (8001298 <main+0x380>)
 8001154:	f7ff fc42 	bl	80009dc <GPIO_init>
	GPIO_init(&Ignition2_ARM, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x03);
 8001158:	2303      	movs	r3, #3
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2302      	movs	r3, #2
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2301      	movs	r3, #1
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2300      	movs	r3, #0
 8001166:	2201      	movs	r2, #1
 8001168:	4937      	ldr	r1, [pc, #220]	@ (8001248 <main+0x330>)
 800116a:	484c      	ldr	r0, [pc, #304]	@ (800129c <main+0x384>)
 800116c:	f7ff fc36 	bl	80009dc <GPIO_init>
	GPIO_init(&Ignition2_OP ,GPIOG, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x02);
 8001170:	2302      	movs	r3, #2
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2302      	movs	r3, #2
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	2301      	movs	r3, #1
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2300      	movs	r3, #0
 800117e:	2200      	movs	r2, #0
 8001180:	4931      	ldr	r1, [pc, #196]	@ (8001248 <main+0x330>)
 8001182:	4847      	ldr	r0, [pc, #284]	@ (80012a0 <main+0x388>)
 8001184:	f7ff fc2a 	bl	80009dc <GPIO_init>


	//-------------------- RELAY ACTUATION GPIO --------------------------
	//Relay 1 ->PURGE Relay
	GPIO_init(&CH1_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001188:	230d      	movs	r3, #13
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2302      	movs	r3, #2
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2201      	movs	r2, #1
 8001198:	4939      	ldr	r1, [pc, #228]	@ (8001280 <main+0x368>)
 800119a:	4842      	ldr	r0, [pc, #264]	@ (80012a4 <main+0x38c>)
 800119c:	f7ff fc1e 	bl	80009dc <GPIO_init>
	GPIO_init(&CH1_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0E);
 80011a0:	230e      	movs	r3, #14
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2302      	movs	r3, #2
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2201      	movs	r2, #1
 80011b0:	4933      	ldr	r1, [pc, #204]	@ (8001280 <main+0x368>)
 80011b2:	483d      	ldr	r0, [pc, #244]	@ (80012a8 <main+0x390>)
 80011b4:	f7ff fc12 	bl	80009dc <GPIO_init>
	GPIO_init(&CH1_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0B);
 80011b8:	230b      	movs	r3, #11
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2302      	movs	r3, #2
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	492d      	ldr	r1, [pc, #180]	@ (8001280 <main+0x368>)
 80011ca:	4838      	ldr	r0, [pc, #224]	@ (80012ac <main+0x394>)
 80011cc:	f7ff fc06 	bl	80009dc <GPIO_init>

	//Relay 2 -> O2 Relay
	GPIO_init(&CH2_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 80011d0:	230a      	movs	r3, #10
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2302      	movs	r3, #2
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2301      	movs	r3, #1
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	2201      	movs	r2, #1
 80011e0:	4927      	ldr	r1, [pc, #156]	@ (8001280 <main+0x368>)
 80011e2:	4833      	ldr	r0, [pc, #204]	@ (80012b0 <main+0x398>)
 80011e4:	f7ff fbfa 	bl	80009dc <GPIO_init>
	GPIO_init(&CH2_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80011e8:	230c      	movs	r3, #12
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	2302      	movs	r3, #2
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	2201      	movs	r2, #1
 80011f8:	4921      	ldr	r1, [pc, #132]	@ (8001280 <main+0x368>)
 80011fa:	482e      	ldr	r0, [pc, #184]	@ (80012b4 <main+0x39c>)
 80011fc:	f7ff fbee 	bl	80009dc <GPIO_init>
	GPIO_init(&CH2_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001200:	230f      	movs	r3, #15
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2302      	movs	r3, #2
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2301      	movs	r3, #1
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	2200      	movs	r2, #0
 8001210:	491b      	ldr	r1, [pc, #108]	@ (8001280 <main+0x368>)
 8001212:	4829      	ldr	r0, [pc, #164]	@ (80012b8 <main+0x3a0>)
 8001214:	f7ff fbe2 	bl	80009dc <GPIO_init>

	//Relay 3 -> N20 Relay
	GPIO_init(&CH3_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001218:	230b      	movs	r3, #11
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2302      	movs	r3, #2
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2301      	movs	r3, #1
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	e04a      	b.n	80012bc <main+0x3a4>
 8001226:	bf00      	nop
 8001228:	40020000 	.word	0x40020000
 800122c:	20000340 	.word	0x20000340
 8001230:	20000358 	.word	0x20000358
 8001234:	20000370 	.word	0x20000370
 8001238:	20000388 	.word	0x20000388
 800123c:	200003a0 	.word	0x200003a0
 8001240:	40020800 	.word	0x40020800
 8001244:	200003b8 	.word	0x200003b8
 8001248:	40021800 	.word	0x40021800
 800124c:	200002b0 	.word	0x200002b0
 8001250:	200002c8 	.word	0x200002c8
 8001254:	40021000 	.word	0x40021000
 8001258:	200002e0 	.word	0x200002e0
 800125c:	200002f8 	.word	0x200002f8
 8001260:	20000310 	.word	0x20000310
 8001264:	20000328 	.word	0x20000328
 8001268:	40021400 	.word	0x40021400
 800126c:	200003d0 	.word	0x200003d0
 8001270:	200003e8 	.word	0x200003e8
 8001274:	20000400 	.word	0x20000400
 8001278:	20000418 	.word	0x20000418
 800127c:	20000430 	.word	0x20000430
 8001280:	40020400 	.word	0x40020400
 8001284:	20000448 	.word	0x20000448
 8001288:	20000460 	.word	0x20000460
 800128c:	20000478 	.word	0x20000478
 8001290:	40020c00 	.word	0x40020c00
 8001294:	20000250 	.word	0x20000250
 8001298:	20000268 	.word	0x20000268
 800129c:	20000280 	.word	0x20000280
 80012a0:	20000298 	.word	0x20000298
 80012a4:	20000130 	.word	0x20000130
 80012a8:	20000148 	.word	0x20000148
 80012ac:	20000160 	.word	0x20000160
 80012b0:	20000178 	.word	0x20000178
 80012b4:	20000190 	.word	0x20000190
 80012b8:	200001a8 	.word	0x200001a8
 80012bc:	2300      	movs	r3, #0
 80012be:	2201      	movs	r2, #1
 80012c0:	499f      	ldr	r1, [pc, #636]	@ (8001540 <main+0x628>)
 80012c2:	48a0      	ldr	r0, [pc, #640]	@ (8001544 <main+0x62c>)
 80012c4:	f7ff fb8a 	bl	80009dc <GPIO_init>
	GPIO_init(&CH3_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80012c8:	230c      	movs	r3, #12
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2302      	movs	r3, #2
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2201      	movs	r2, #1
 80012d8:	4999      	ldr	r1, [pc, #612]	@ (8001540 <main+0x628>)
 80012da:	489b      	ldr	r0, [pc, #620]	@ (8001548 <main+0x630>)
 80012dc:	f7ff fb7e 	bl	80009dc <GPIO_init>
	GPIO_init(&CH3_MON, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 80012e0:	2308      	movs	r3, #8
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2302      	movs	r3, #2
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2201      	movs	r2, #1
 80012f0:	4993      	ldr	r1, [pc, #588]	@ (8001540 <main+0x628>)
 80012f2:	4896      	ldr	r0, [pc, #600]	@ (800154c <main+0x634>)
 80012f4:	f7ff fb72 	bl	80009dc <GPIO_init>

	//Relay 4 //for future expansion
	 GPIO_init(&CH4_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 80012f8:	2309      	movs	r3, #9
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2302      	movs	r3, #2
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	2301      	movs	r3, #1
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	2201      	movs	r2, #1
 8001308:	498d      	ldr	r1, [pc, #564]	@ (8001540 <main+0x628>)
 800130a:	4891      	ldr	r0, [pc, #580]	@ (8001550 <main+0x638>)
 800130c:	f7ff fb66 	bl	80009dc <GPIO_init>
	 GPIO_init(&CH4_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001310:	230a      	movs	r3, #10
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2302      	movs	r3, #2
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	2301      	movs	r3, #1
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	2201      	movs	r2, #1
 8001320:	4987      	ldr	r1, [pc, #540]	@ (8001540 <main+0x628>)
 8001322:	488c      	ldr	r0, [pc, #560]	@ (8001554 <main+0x63c>)
 8001324:	f7ff fb5a 	bl	80009dc <GPIO_init>
	 GPIO_init(&CH4_MON, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001328:	230d      	movs	r3, #13
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2302      	movs	r3, #2
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	2200      	movs	r2, #0
 8001338:	4981      	ldr	r1, [pc, #516]	@ (8001540 <main+0x628>)
 800133a:	4887      	ldr	r0, [pc, #540]	@ (8001558 <main+0x640>)
 800133c:	f7ff fb4e 	bl	80009dc <GPIO_init>

	 //Ensure CH1-4 is turned off, as its currently unused
	 CH1_ARM.port->ODR &= ~(CH1_Arm);
 8001340:	4b86      	ldr	r3, [pc, #536]	@ (800155c <main+0x644>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	4b85      	ldr	r3, [pc, #532]	@ (800155c <main+0x644>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800134e:	615a      	str	r2, [r3, #20]
	 CH1_OP.port->ODR &= ~(CH1_Operate);
 8001350:	4b83      	ldr	r3, [pc, #524]	@ (8001560 <main+0x648>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	4b82      	ldr	r3, [pc, #520]	@ (8001560 <main+0x648>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800135e:	615a      	str	r2, [r3, #20]
	 CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001360:	4b80      	ldr	r3, [pc, #512]	@ (8001564 <main+0x64c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	4b7f      	ldr	r3, [pc, #508]	@ (8001564 <main+0x64c>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800136e:	615a      	str	r2, [r3, #20]
	 CH2_OP.port->ODR &= ~(CH2_Operate);
 8001370:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <main+0x650>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	4b7c      	ldr	r3, [pc, #496]	@ (8001568 <main+0x650>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800137e:	615a      	str	r2, [r3, #20]
	 CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001380:	4b71      	ldr	r3, [pc, #452]	@ (8001548 <main+0x630>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	4b70      	ldr	r3, [pc, #448]	@ (8001548 <main+0x630>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800138e:	615a      	str	r2, [r3, #20]
	 CH3_OP.port->ODR &= ~(CH3_Operate);
 8001390:	4b6c      	ldr	r3, [pc, #432]	@ (8001544 <main+0x62c>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	4b6b      	ldr	r3, [pc, #428]	@ (8001544 <main+0x62c>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800139e:	615a      	str	r2, [r3, #20]
	 CH4_ARM.port->ODR &= ~(CH4_Arm);
 80013a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001554 <main+0x63c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <main+0x63c>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013ae:	615a      	str	r2, [r3, #20]
	 CH4_OP.port->ODR &= ~(CH4_Operate);
 80013b0:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <main+0x638>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	4b66      	ldr	r3, [pc, #408]	@ (8001550 <main+0x638>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013be:	615a      	str	r2, [r3, #20]
//	MCP96RL00_EMX_1_init(&thermocouple_1,I2C2, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, THERMOCOUPLE_1_ADDR);
	//MCP96RL00_EMX_1_init(&thermocouple_2,I2C2, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, THERMOCOUPLE_2_ADDR);
	//MCP96RL00_EMX_1_init(&thermocouple_3,I2C2, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, THERMOCOUPLE_3_ADDR);
	//MCP96RL00_EMX_1_init(&thermocouple_4,I2C2, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, THERMOCOUPLE_4_ADDR);

	ADC124S021_init(&LoadCells,Load_Cell, LOAD_CELL_PORT, LOAD_CELL_CS);
 80013c0:	2304      	movs	r3, #4
 80013c2:	4a6a      	ldr	r2, [pc, #424]	@ (800156c <main+0x654>)
 80013c4:	2100      	movs	r1, #0
 80013c6:	486a      	ldr	r0, [pc, #424]	@ (8001570 <main+0x658>)
 80013c8:	f000 fb16 	bl	80019f8 <ADC124S021_init>
	ADC124S021_init(&Transducers,Transducer, TRANSDUCER_PORT, TRANSDUCER_CS);
 80013cc:	2310      	movs	r3, #16
 80013ce:	4a69      	ldr	r2, [pc, #420]	@ (8001574 <main+0x65c>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	4869      	ldr	r0, [pc, #420]	@ (8001578 <main+0x660>)
 80013d4:	f000 fb10 	bl	80019f8 <ADC124S021_init>
 *  B3: Ignition Fire
 *  B2: Ignition Selected
 *  B1: Gas Filled
 *  B0: System Activate -> nothing can be done unless this bit is set
 */
uint8_t LoRa_test_RX_Packets_received = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	75fb      	strb	r3, [r7, #23]
uint8_t LoRa_Frequency_MSB = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	75bb      	strb	r3, [r7, #22]
uint8_t LoRa_Frequency_MiB = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	757b      	strb	r3, [r7, #21]
uint8_t LoRa_Frequency_LSB = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	753b      	strb	r3, [r7, #20]

uint8_t RXDone_CHK = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	74fb      	strb	r3, [r7, #19]
uint8_t DIOmapping = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	74bb      	strb	r3, [r7, #18]


	//INT_pin_input = (GPIOD->IDR & GPIO_IDR_IDR_7); //should be a non 0 value here!

	//Make sure interrupts are configured BEFORE interupts
	GPIO_init(&LoRa_Rx_int, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x07);
 80013f0:	2307      	movs	r3, #7
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2301      	movs	r3, #1
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	2200      	movs	r2, #0
 8001400:	494f      	ldr	r1, [pc, #316]	@ (8001540 <main+0x628>)
 8001402:	485e      	ldr	r0, [pc, #376]	@ (800157c <main+0x664>)
 8001404:	f7ff faea 	bl	80009dc <GPIO_init>
	//NVIC_DisableIRQ(EXTI9_5_IRQn); //easier than changing the function GPIO_init_interrupt
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 8001408:	4b5d      	ldr	r3, [pc, #372]	@ (8001580 <main+0x668>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a5c      	ldr	r2, [pc, #368]	@ (8001580 <main+0x668>)
 800140e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001412:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PD;
 8001414:	4b5a      	ldr	r3, [pc, #360]	@ (8001580 <main+0x668>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a59      	ldr	r2, [pc, #356]	@ (8001580 <main+0x668>)
 800141a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800141e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR &= ~EXTI_FTSR_TR7_Msk;
 8001420:	4b58      	ldr	r3, [pc, #352]	@ (8001584 <main+0x66c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a57      	ldr	r2, [pc, #348]	@ (8001584 <main+0x66c>)
 8001426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800142a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_TR7;
 800142c:	4b55      	ldr	r3, [pc, #340]	@ (8001584 <main+0x66c>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a54      	ldr	r2, [pc, #336]	@ (8001584 <main+0x66c>)
 8001432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001436:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8001438:	4b52      	ldr	r3, [pc, #328]	@ (8001584 <main+0x66c>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a51      	ldr	r2, [pc, #324]	@ (8001584 <main+0x66c>)
 800143e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001442:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR7;
 8001444:	4b4f      	ldr	r3, [pc, #316]	@ (8001584 <main+0x66c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a4e      	ldr	r2, [pc, #312]	@ (8001584 <main+0x66c>)
 800144a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144e:	6093      	str	r3, [r2, #8]
	EXTI->IMR &= ~EXTI_IMR_IM7;
 8001450:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <main+0x66c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a4b      	ldr	r2, [pc, #300]	@ (8001584 <main+0x66c>)
 8001456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800145a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM7;
 800145c:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <main+0x66c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a48      	ldr	r2, [pc, #288]	@ (8001584 <main+0x66c>)
 8001462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001466:	6013      	str	r3, [r2, #0]
	//here is channel for loRa PD7
	//NVIC_EnableIRQ(EXTI9_5_IRQn);
	//NVIC_SetPriority(EXTI9_5_IRQn,9);
	//re-enable to turn on LoRa RX interrupt!

	SX1272_init(&lora,"GSE_LORA", LORA_PORT, LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 8001468:	2301      	movs	r3, #1
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2309      	movs	r3, #9
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2302      	movs	r3, #2
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001478:	4a3e      	ldr	r2, [pc, #248]	@ (8001574 <main+0x65c>)
 800147a:	4943      	ldr	r1, [pc, #268]	@ (8001588 <main+0x670>)
 800147c:	4843      	ldr	r0, [pc, #268]	@ (800158c <main+0x674>)
 800147e:	f7ff fb43 	bl	8000b08 <SX1272_init>
	SX1272_startReceive(&lora);
 8001482:	4842      	ldr	r0, [pc, #264]	@ (800158c <main+0x674>)
 8001484:	f7ff fc20 	bl	8000cc8 <SX1272_startReceive>
	SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
 8001488:	2140      	movs	r1, #64	@ 0x40
 800148a:	4840      	ldr	r0, [pc, #256]	@ (800158c <main+0x674>)
 800148c:	f7ff fc7c 	bl	8000d88 <SX1272_clearIRQ>
	//uint8_t DATAA = 0; -> for testing loRa

	//Ensure SMD LEDs are turned OFF on bootup
	LED_1.port -> ODR &= ~LED_1_PWR;
 8001490:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <main+0x678>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <main+0x678>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800149e:	615a      	str	r2, [r3, #20]
	LED_2.port -> ODR &= ~LED_2_PWR;
 80014a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <main+0x67c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001594 <main+0x67c>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ae:	615a      	str	r2, [r3, #20]
	LED_3.port -> ODR &= ~LED_3_PWR;
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <main+0x680>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <main+0x680>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014be:	615a      	str	r2, [r3, #20]
	LED_4.port -> ODR &= ~LED_4_PWR;
 80014c0:	4b36      	ldr	r3, [pc, #216]	@ (800159c <main+0x684>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	4b35      	ldr	r3, [pc, #212]	@ (800159c <main+0x684>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014ce:	615a      	str	r2, [r3, #20]
	LED_5.port -> ODR &= ~LED_5_PWR;
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <main+0x688>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <main+0x688>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014de:	615a      	str	r2, [r3, #20]
	LED_6.port -> ODR &= ~LED_6_PWR;
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <main+0x68c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <main+0x68c>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014ee:	615a      	str	r2, [r3, #20]

	CH1_ARM.port->ODR &= ~(CH1_Arm);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <main+0x644>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	4b19      	ldr	r3, [pc, #100]	@ (800155c <main+0x644>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014fe:	615a      	str	r2, [r3, #20]
	CH1_OP.port->ODR &= ~(CH1_Operate);
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <main+0x648>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <main+0x648>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800150e:	615a      	str	r2, [r3, #20]


	CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <main+0x64c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <main+0x64c>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800151e:	615a      	str	r2, [r3, #20]
	CH2_OP.port->ODR &= ~(CH2_Operate);
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <main+0x650>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <main+0x650>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800152e:	615a      	str	r2, [r3, #20]

	CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <main+0x630>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <main+0x630>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800153e:	e033      	b.n	80015a8 <main+0x690>
 8001540:	40020c00 	.word	0x40020c00
 8001544:	200001c0 	.word	0x200001c0
 8001548:	200001d8 	.word	0x200001d8
 800154c:	200001f0 	.word	0x200001f0
 8001550:	20000208 	.word	0x20000208
 8001554:	20000220 	.word	0x20000220
 8001558:	20000238 	.word	0x20000238
 800155c:	20000148 	.word	0x20000148
 8001560:	20000130 	.word	0x20000130
 8001564:	20000190 	.word	0x20000190
 8001568:	20000178 	.word	0x20000178
 800156c:	40020000 	.word	0x40020000
 8001570:	20000068 	.word	0x20000068
 8001574:	40021800 	.word	0x40021800
 8001578:	200000c0 	.word	0x200000c0
 800157c:	20000118 	.word	0x20000118
 8001580:	40013800 	.word	0x40013800
 8001584:	40013c00 	.word	0x40013c00
 8001588:	08002ba8 	.word	0x08002ba8
 800158c:	20000030 	.word	0x20000030
 8001590:	20000340 	.word	0x20000340
 8001594:	20000358 	.word	0x20000358
 8001598:	20000370 	.word	0x20000370
 800159c:	20000388 	.word	0x20000388
 80015a0:	200003a0 	.word	0x200003a0
 80015a4:	200003b8 	.word	0x200003b8
 80015a8:	615a      	str	r2, [r3, #20]
	CH3_OP.port->ODR &= ~(CH3_Operate);
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <main+0x6d0>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <main+0x6d0>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b8:	615a      	str	r2, [r3, #20]

	CH4_ARM.port->ODR &= ~(CH4_Arm);
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <main+0x6d4>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <main+0x6d4>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015c8:	615a      	str	r2, [r3, #20]
	CH4_OP.port->ODR &= ~(CH4_Operate);
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <main+0x6d8>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <main+0x6d8>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015d8:	615a      	str	r2, [r3, #20]

	state = 0x00;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <main+0x6dc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

	while(1){
		transmit_packets_spam();
 80015e0:	f000 f998 	bl	8001914 <transmit_packets_spam>
 80015e4:	e7fc      	b.n	80015e0 <main+0x6c8>
 80015e6:	bf00      	nop
 80015e8:	200001c0 	.word	0x200001c0
 80015ec:	20000220 	.word	0x20000220
 80015f0:	20000208 	.word	0x20000208
 80015f4:	20000028 	.word	0x20000028

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
 **/
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	@ 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	@ 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fa96 	bl	8002b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <SystemClock_Config+0xd8>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a2a      	ldr	r2, [pc, #168]	@ (80016d0 <SystemClock_Config+0xd8>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <SystemClock_Config+0xd8>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <SystemClock_Config+0xdc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <SystemClock_Config+0xdc>)
 8001642:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <SystemClock_Config+0xdc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	2301      	movs	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165c:	2310      	movs	r3, #16
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	2302      	movs	r3, #2
 8001662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001668:	2308      	movs	r3, #8
 800166a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800166c:	23b4      	movs	r3, #180	@ 0xb4
 800166e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001670:	2302      	movs	r3, #2
 8001672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001674:	2304      	movs	r3, #4
 8001676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fe37 	bl	80022f0 <HAL_RCC_OscConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001688:	f000 f9b0 	bl	80019ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800168c:	f000 fde0 	bl	8002250 <HAL_PWREx_EnableOverDrive>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001696:	f000 f9a9 	bl	80019ec <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169a:	230f      	movs	r3, #15
 800169c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169e:	2302      	movs	r3, #2
 80016a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2105      	movs	r1, #5
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 f891 	bl	80027e0 <HAL_RCC_ClockConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016c4:	f000 f992 	bl	80019ec <Error_Handler>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3750      	adds	r7, #80	@ 0x50
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <MX_GPIO_Init+0x84>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <MX_GPIO_Init+0x84>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <MX_GPIO_Init+0x84>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_GPIO_Init+0x84>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <MX_GPIO_Init+0x84>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_GPIO_Init+0x84>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <MX_GPIO_Init+0x84>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a0f      	ldr	r2, [pc, #60]	@ (800175c <MX_GPIO_Init+0x84>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <MX_GPIO_Init+0x84>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <MX_GPIO_Init+0x84>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <MX_GPIO_Init+0x84>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <MX_GPIO_Init+0x84>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <TIM1_UP_TIM10_IRQHandler>:
  /** Configure Digital filter
  */


void TIM1_UP_TIM10_IRQHandler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	hardware_timer_count++;
 8001764:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b30      	ldr	r3, [pc, #192]	@ (8001830 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 800176e:	701a      	strb	r2, [r3, #0]
	if(hardware_timer_count<5)
 8001770:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d806      	bhi.n	8001786 <TIM1_UP_TIM10_IRQHandler+0x26>
	{
		   //Hardware Timer interrupt callback for LoRa RX
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8001778:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6113      	str	r3, [r2, #16]

		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
		hardware_timer_count = 0;
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
	}
}
 8001784:	e04f      	b.n	8001826 <TIM1_UP_TIM10_IRQHandler+0xc6>
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001786:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001794:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8001796:	4b29      	ldr	r3, [pc, #164]	@ (800183c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017a4:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 80017a6:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f022 0220 	bic.w	r2, r2, #32
 80017b4:	615a      	str	r2, [r3, #20]
		led_o2.port->ODR &= ~(O2_LED);
 80017b6:	4b23      	ldr	r3, [pc, #140]	@ (8001844 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017c4:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017d4:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 80017d6:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <TIM1_UP_TIM10_IRQHandler+0xec>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <TIM1_UP_TIM10_IRQHandler+0xec>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017e4:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= CH1_Arm;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017f4:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= CH1_Operate;
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001804:	615a      	str	r2, [r3, #20]
		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8001812:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6113      	str	r3, [r2, #16]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000029 	.word	0x20000029
 8001834:	40010000 	.word	0x40010000
 8001838:	200001d8 	.word	0x200001d8
 800183c:	200001c0 	.word	0x200001c0
 8001840:	20000310 	.word	0x20000310
 8001844:	20000328 	.word	0x20000328
 8001848:	20000190 	.word	0x20000190
 800184c:	20000178 	.word	0x20000178
 8001850:	20000148 	.word	0x20000148
 8001854:	20000130 	.word	0x20000130
 8001858:	20000028 	.word	0x20000028

0800185c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	delay_software_us(200); //200us delay to prevent debouncing
 8001860:	20c8      	movs	r0, #200	@ 0xc8
 8001862:	f000 fa0f 	bl	8001c84 <delay_software_us>
   	if(EXTI->PR & EXTI_PR_PR1) //if the rising edge has been detected by pin 2
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01d      	beq.n	80018ae <EXTI1_IRQHandler+0x52>
   	{
   		EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4a0f      	ldr	r2, [pc, #60]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 8001878:	f023 0302 	bic.w	r3, r3, #2
 800187c:	6153      	str	r3, [r2, #20]
   		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == LOCAL_CONTROL_SW)
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <EXTI1_IRQHandler+0x5c>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800188c:	d109      	bne.n	80018a2 <EXTI1_IRQHandler+0x46>
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	6153      	str	r3, [r2, #20]
			dump_flag = 1; //tells program manual dump flag has been set!
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <EXTI1_IRQHandler+0x60>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
   		else
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
   		}
   	}
}
 80018a0:	e005      	b.n	80018ae <EXTI1_IRQHandler+0x52>
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 80018a2:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a03      	ldr	r2, [pc, #12]	@ (80018b4 <EXTI1_IRQHandler+0x58>)
 80018a8:	f023 0302 	bic.w	r3, r3, #2
 80018ac:	6153      	str	r3, [r2, #20]
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40013c00 	.word	0x40013c00
 80018b8:	200003e8 	.word	0x200003e8
 80018bc:	2000002a 	.word	0x2000002a

080018c0 <EXTI3_IRQHandler>:


//ambient temperature alert!
void EXTI3_IRQHandler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  	if(EXTI->PR & EXTI_PR_PR3) //if the rising edge has been detected by pin 2
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <EXTI3_IRQHandler+0x28>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <EXTI3_IRQHandler+0x1c>
  	{
  		EXTI->PR &= ~EXTI_PR_PR3; //resets the flag
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <EXTI3_IRQHandler+0x28>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <EXTI3_IRQHandler+0x28>)
 80018d6:	f023 0308 	bic.w	r3, r3, #8
 80018da:	6153      	str	r3, [r2, #20]
  		//do something here
  	}
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40013c00 	.word	0x40013c00

080018ec <EXTI9_5_IRQHandler>:



// LoRa DIO Interrupt
void EXTI9_5_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	   *  5) Proceed
	   */
	//  test_rx_interrupt++;
	 // uint8_t transmit_state = 0;
 	// SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
	EXTI->PR &= ~0x1F0; //resets the flag
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <EXTI9_5_IRQHandler+0x20>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	4a05      	ldr	r2, [pc, #20]	@ (800190c <EXTI9_5_IRQHandler+0x20>)
 80018f6:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 80018fa:	6153      	str	r3, [r2, #20]
	triggerRX= true;
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <EXTI9_5_IRQHandler+0x24>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 8001902:	2017      	movs	r0, #23
 8001904:	f7ff fae4 	bl	8000ed0 <__NVIC_DisableIRQ>

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013c00 	.word	0x40013c00
 8001910:	2000002c 	.word	0x2000002c

08001914 <transmit_packets_spam>:


}

void transmit_packets_spam()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
	uint8_t lora_spam_transmit = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]

	static LoRa_Packet packet0;
	packet0.id = 0x06;
 800191e:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001920:	2206      	movs	r2, #6
 8001922:	701a      	strb	r2, [r3, #0]
	packet0.data[0] = 0x00;
 8001924:	4b2d      	ldr	r3, [pc, #180]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001926:	2200      	movs	r2, #0
 8001928:	705a      	strb	r2, [r3, #1]
	packet0.data[1] = 0x01;
 800192a:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <transmit_packets_spam+0xc8>)
 800192c:	2201      	movs	r2, #1
 800192e:	709a      	strb	r2, [r3, #2]
	packet0.data[2] = 0x02;
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001932:	2202      	movs	r2, #2
 8001934:	70da      	strb	r2, [r3, #3]
	packet0.data[3] = 0x03;
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001938:	2203      	movs	r2, #3
 800193a:	711a      	strb	r2, [r3, #4]
	packet0.data[4] = 0x04;
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <transmit_packets_spam+0xc8>)
 800193e:	2204      	movs	r2, #4
 8001940:	715a      	strb	r2, [r3, #5]
	packet0.data[5] = 0x05;
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001944:	2205      	movs	r2, #5
 8001946:	719a      	strb	r2, [r3, #6]
	switch(lora_spam_transmit_state)
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <transmit_packets_spam+0xcc>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <transmit_packets_spam+0x42>
 8001950:	2b01      	cmp	r3, #1
 8001952:	d01f      	beq.n	8001994 <transmit_packets_spam+0x80>
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS);
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
	//	__NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
	  	break;
	}
}
 8001954:	e03d      	b.n	80019d2 <transmit_packets_spam+0xbe>
		SX1272_transmit(&lora, (uint8_t * ) &packet0);
 8001956:	4921      	ldr	r1, [pc, #132]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001958:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <transmit_packets_spam+0xd0>)
 800195a:	f7ff f97e 	bl	8000c5a <SX1272_transmit>
			lora_spam_transmit = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 800195e:	2112      	movs	r1, #18
 8001960:	4820      	ldr	r0, [pc, #128]	@ (80019e4 <transmit_packets_spam+0xd0>)
 8001962:	f7ff fa58 	bl	8000e16 <SX1272_readRegister>
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
		}while((lora_spam_transmit & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f4      	beq.n	800195e <transmit_packets_spam+0x4a>
	  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8001974:	2208      	movs	r2, #8
 8001976:	2112      	movs	r1, #18
 8001978:	481a      	ldr	r0, [pc, #104]	@ (80019e4 <transmit_packets_spam+0xd0>)
 800197a:	f7ff fa15 	bl	8000da8 <SX1272_writeRegister>
	  	TX_Packet_Flag = 0;
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <transmit_packets_spam+0xd4>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS);
 8001984:	2105      	movs	r1, #5
 8001986:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <transmit_packets_spam+0xd0>)
 8001988:	f7ff f920 	bl	8000bcc <_SX1272_setMode>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800198c:	2017      	movs	r0, #23
 800198e:	f7ff fa81 	bl	8000e94 <__NVIC_EnableIRQ>
	  	break;
 8001992:	e01e      	b.n	80019d2 <transmit_packets_spam+0xbe>
		SX1272_transmit(&lora, (uint8_t * ) &packet0);
 8001994:	4911      	ldr	r1, [pc, #68]	@ (80019dc <transmit_packets_spam+0xc8>)
 8001996:	4813      	ldr	r0, [pc, #76]	@ (80019e4 <transmit_packets_spam+0xd0>)
 8001998:	f7ff f95f 	bl	8000c5a <SX1272_transmit>
			lora_spam_transmit = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 800199c:	2112      	movs	r1, #18
 800199e:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <transmit_packets_spam+0xd0>)
 80019a0:	f7ff fa39 	bl	8000e16 <SX1272_readRegister>
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
		}while((lora_spam_transmit & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f4      	beq.n	800199c <transmit_packets_spam+0x88>
	  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 80019b2:	2208      	movs	r2, #8
 80019b4:	2112      	movs	r1, #18
 80019b6:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <transmit_packets_spam+0xd0>)
 80019b8:	f7ff f9f6 	bl	8000da8 <SX1272_writeRegister>
	  	TX_Packet_Flag = 0;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <transmit_packets_spam+0xd4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS);
 80019c2:	2105      	movs	r1, #5
 80019c4:	4807      	ldr	r0, [pc, #28]	@ (80019e4 <transmit_packets_spam+0xd0>)
 80019c6:	f7ff f901 	bl	8000bcc <_SX1272_setMode>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ca:	2017      	movs	r0, #23
 80019cc:	f7ff fa62 	bl	8000e94 <__NVIC_EnableIRQ>
	  	break;
 80019d0:	bf00      	nop
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000490 	.word	0x20000490
 80019e0:	2000002d 	.word	0x2000002d
 80019e4:	20000030 	.word	0x20000030
 80019e8:	2000002b 	.word	0x2000002b

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {__asm("NOP");}
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <ADC124S021_init>:
#include "sensors.h"
#include "spi.h"
#include "stm32f4xx_hal.h"

void ADC124S021_init(ADC124S021 *adc, SensorType SensorType, GPIO_TypeDef *port, unsigned long cs)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	460b      	mov	r3, r1
 8001a06:	72fb      	strb	r3, [r7, #11]
	SPI_init(&adc->base , SensorType, SPI1, MODE16, port,cs);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1d18      	adds	r0, r3, #4
 8001a0c:	7af9      	ldrb	r1, [r7, #11]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <ADC124S021_init+0x44>)
 8001a1a:	f000 f96b 	bl	8001cf4 <SPI_init>
	adc->base;
	adc->device = SensorType;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	7afa      	ldrb	r2, [r7, #11]
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]
	adc->extract = ADC124S021_extract;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <ADC124S021_init+0x48>)
 8001a2a:	601a      	str	r2, [r3, #0]
	adc->process = ADC124S021_process;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <ADC124S021_init+0x4c>)
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	08001a49 	.word	0x08001a49
 8001a44:	08001b3d 	.word	0x08001b3d

08001a48 <ADC124S021_extract>:

void ADC124S021_extract(ADC124S021 * adc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
switch(adc->device)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <ADC124S021_extract+0x18>
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d033      	beq.n	8001ac6 <ADC124S021_extract+0x7e>
			//[1] = IN2 -> LOADCELL2
			//[2] = IN3 -> LOADCELL3
			//[3] = IN4 -> LOADCELL4
	break;
	}
}
 8001a5e:	e066      	b.n	8001b2e <ADC124S021_extract+0xe6>
	for(uint8_t channel = 0; channel <NUM_MUX; channel ++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e02c      	b.n	8001ac0 <ADC124S021_extract+0x78>
		word = (channel << 14) | (0x00 << 12);; //correct! (8 bit type casting!)
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	039b      	lsls	r3, r3, #14
 8001a6c:	81bb      	strh	r3, [r7, #12]
		GPIOG->ODR &= ~(GPIO_ODR_OD4);
 8001a6e:	4b32      	ldr	r3, [pc, #200]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a31      	ldr	r2, [pc, #196]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001a74:	f023 0310 	bic.w	r3, r3, #16
 8001a78:	6153      	str	r3, [r2, #20]
		delay_software_us(1);
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f000 f902 	bl	8001c84 <delay_software_us>
		uint16_t result = SPI_transmit(&adc->base, word);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3304      	adds	r3, #4
 8001a84:	89ba      	ldrh	r2, [r7, #12]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f96d 	bl	8001d68 <SPI_transmit>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	817b      	strh	r3, [r7, #10]
		GPIOG->ODR |= GPIO_ODR_OD4;
 8001a92:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001a98:	f043 0310 	orr.w	r3, r3, #16
 8001a9c:	6153      	str	r3, [r2, #20]
		delay_software_us(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f000 f8f0 	bl	8001c84 <delay_software_us>
		adc->data_raw[channel] = result & 0xFFF;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	897a      	ldrh	r2, [r7, #10]
 8001aa8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001aac:	b291      	uxth	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	3310      	adds	r3, #16
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	460a      	mov	r2, r1
 8001ab8:	805a      	strh	r2, [r3, #2]
	for(uint8_t channel = 0; channel <NUM_MUX; channel ++)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	3301      	adds	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d9cf      	bls.n	8001a66 <ADC124S021_extract+0x1e>
	for(uint8_t channel = 0; channel <NUM_MUX; channel ++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73bb      	strb	r3, [r7, #14]
 8001aca:	e02c      	b.n	8001b26 <ADC124S021_extract+0xde>
			word = (channel << 14) | (0x00 << 12); //correct!
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	039b      	lsls	r3, r3, #14
 8001ad2:	81bb      	strh	r3, [r7, #12]
			GPIOG->ODR &= ~(GPIO_ODR_OD4);
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001ada:	f023 0310 	bic.w	r3, r3, #16
 8001ade:	6153      	str	r3, [r2, #20]
			delay_software_us(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f000 f8cf 	bl	8001c84 <delay_software_us>
			uint16_t result = SPI_transmit(&adc->base, word);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	89ba      	ldrh	r2, [r7, #12]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f93a 	bl	8001d68 <SPI_transmit>
 8001af4:	4603      	mov	r3, r0
 8001af6:	813b      	strh	r3, [r7, #8]
			GPIOG->ODR |= GPIO_ODR_OD4;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b38 <ADC124S021_extract+0xf0>)
 8001afe:	f043 0310 	orr.w	r3, r3, #16
 8001b02:	6153      	str	r3, [r2, #20]
			delay_software_us(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f000 f8bd 	bl	8001c84 <delay_software_us>
			adc->data_raw[channel] = result & 0x0FFF; //masks for first 12 bits
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	893a      	ldrh	r2, [r7, #8]
 8001b0e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b12:	b291      	uxth	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	3310      	adds	r3, #16
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	805a      	strh	r2, [r3, #2]
	for(uint8_t channel = 0; channel <NUM_MUX; channel ++)
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	3301      	adds	r3, #1
 8001b24:	73bb      	strb	r3, [r7, #14]
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d9cf      	bls.n	8001acc <ADC124S021_extract+0x84>
	break;
 8001b2c:	bf00      	nop
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40021800 	.word	0x40021800

08001b3c <ADC124S021_process>:

void ADC124S021_process(ADC124S021 * adc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b08d      	sub	sp, #52	@ 0x34
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	//throw this into a LPF
	for(int i = 0; i<4; i++){
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b48:	e088      	b.n	8001c5c <ADC124S021_process+0x120>
		adc->data_processed[i] = 0.15f*adc->data_processed[i] + (1-0.15f)*adc->data_raw[i];
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4e:	3314      	adds	r3, #20
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	885b      	ldrh	r3, [r3, #2]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001c74 <ADC124S021_process+0x138>
 8001b62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6a:	3310      	adds	r3, #16
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	885b      	ldrh	r3, [r3, #2]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001c78 <ADC124S021_process+0x13c>
 8001b7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8a:	ee17 3a90 	vmov	r3, s15
 8001b8e:	b299      	uxth	r1, r3
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	3314      	adds	r3, #20
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	805a      	strh	r2, [r3, #2]
		//data_processed[0] = input 1
		//data_processed[1] = input 2
		//data_processed[2] = input 3
		//data_processed[3] = input 4
		//conversion for each here ->
		switch(adc->device)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <ADC124S021_process+0x72>
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d02a      	beq.n	8001c02 <ADC124S021_process+0xc6>
 8001bac:	e053      	b.n	8001c56 <ADC124S021_process+0x11a>
		{
			case 0: //loadcell
				typedef struct{float mass; uint16_t post_op; int mass_int;}Converter_load;
				Converter_load load = {};
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
				for(int i = 0; i<NUM_MUX; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bbe:	e01c      	b.n	8001bfa <ADC124S021_process+0xbe>
				{
					load.post_op  = adc->data_processed[i];
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	885b      	ldrh	r3, [r3, #2]
 8001bcc:	83bb      	strh	r3, [r7, #28]
					load.mass_int = load.post_op;
 8001bce:	8bbb      	ldrh	r3, [r7, #28]
 8001bd0:	623b      	str	r3, [r7, #32]
					adc->Converted_Value_LoadCell[i] = (load.mass_int/(50.0f/4096.0f));
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bdc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001c7c <ADC124S021_process+0x140>
 8001be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	330c      	adds	r3, #12
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i<NUM_MUX; i++)
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	dddf      	ble.n	8001bc0 <ADC124S021_process+0x84>
					//output for each channel will be in KG
				}
				break;
 8001c00:	e029      	b.n	8001c56 <ADC124S021_process+0x11a>

			case 1: //transducer
				typedef struct{float mass; uint16_t post_op; int mass_int;}Converter_trans;
				Converter_trans trans = {};
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
				for(int i = 0; i<NUM_MUX; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c12:	e01c      	b.n	8001c4e <ADC124S021_process+0x112>
								{
									trans.post_op  = adc->data_processed[i];
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	3314      	adds	r3, #20
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	885b      	ldrh	r3, [r3, #2]
 8001c20:	823b      	strh	r3, [r7, #16]
									trans.mass_int = trans.post_op;
 8001c22:	8a3b      	ldrh	r3, [r7, #16]
 8001c24:	617b      	str	r3, [r7, #20]
									adc->Converted_Value_Transducer[i] = (trans.mass_int/(300.0f/4096.0f));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c30:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001c80 <ADC124S021_process+0x144>
 8001c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	3310      	adds	r3, #16
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i<NUM_MUX; i++)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	dddf      	ble.n	8001c14 <ADC124S021_process+0xd8>
									//output for each channel will be in bar of pressure
								}
				break;
 8001c54:	bf00      	nop
	for(int i = 0; i<4; i++){
 8001c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c58:	3301      	adds	r3, #1
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	f77f af73 	ble.w	8001b4a <ADC124S021_process+0xe>
		}

	}
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3734      	adds	r7, #52	@ 0x34
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	3e19999a 	.word	0x3e19999a
 8001c78:	3f59999a 	.word	0x3f59999a
 8001c7c:	3c480000 	.word	0x3c480000
 8001c80:	3d960000 	.word	0x3d960000

08001c84 <delay_software_us>:
	GPIOG->ODR |= GPIO_ODR_OD4; //raise up CS of PG
    return adcValue;
}

void delay_software_us( uint32_t usec )
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (usec * 21); i++);
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e002      	b.n	8001c9c <delay_software_us+0x18>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00da      	lsls	r2, r3, #3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3f3      	bcc.n	8001c96 <delay_software_us+0x12>

}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <delay_software_ms>:

void delay_software_ms( uint32_t msec )
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (msec * 21000); i++);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e002      	b.n	8001cd4 <delay_software_ms+0x18>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f245 2208 	movw	r2, #21000	@ 0x5208
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3f4      	bcc.n	8001cce <delay_software_ms+0x12>

}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SPI_init>:
 * @param *port 			Pointer to GPIO port struct.
 * @param cs 					Device chip select address.
 * @return @c NULL.
 **
 * =============================================================================== */
void SPI_init(SPI *spi, DeviceType device, SPI_TypeDef *interface, DataFormat df, GPIO_TypeDef *port, unsigned long cs) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	460b      	mov	r3, r1
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	4613      	mov	r3, r2
 8001d06:	72bb      	strb	r3, [r7, #10]
  spi->device    = device;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	7afa      	ldrb	r2, [r7, #11]
 8001d0c:	701a      	strb	r2, [r3, #0]
  spi->interface = interface; //should be interface 0x40003C00
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]
  spi->port      = port;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]
  spi->cs        = cs;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	60da      	str	r2, [r3, #12]

  spi->send      = (df == MODE8) ? SPI_send8 : SPI_send16;
 8001d20:	7abb      	ldrb	r3, [r7, #10]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <SPI_init+0x36>
 8001d26:	4a0b      	ldr	r2, [pc, #44]	@ (8001d54 <SPI_init+0x60>)
 8001d28:	e000      	b.n	8001d2c <SPI_init+0x38>
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d58 <SPI_init+0x64>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  spi->receive   = (df == MODE8) ? SPI_receive8 : SPI_receive16; //if Data format is MODE8
 8001d30:	7abb      	ldrb	r3, [r7, #10]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <SPI_init+0x46>
 8001d36:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <SPI_init+0x68>)
 8001d38:	e000      	b.n	8001d3c <SPI_init+0x48>
 8001d3a:	4a09      	ldr	r2, [pc, #36]	@ (8001d60 <SPI_init+0x6c>)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	615a      	str	r2, [r3, #20]
  spi->transmit  = SPI_transmit;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <SPI_init+0x70>)
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	08001daf 	.word	0x08001daf
 8001d58:	08001de1 	.word	0x08001de1
 8001d5c:	08001e11 	.word	0x08001e11
 8001d60:	08001e45 	.word	0x08001e45
 8001d64:	08001d69 	.word	0x08001d69

08001d68 <SPI_transmit>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param 	data 			Data payload to be sent to slave device.
 * @retval 	response 	Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI *spi, uint16_t data) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	81fb      	strh	r3, [r7, #14]
  spi->send(spi, data);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	887a      	ldrh	r2, [r7, #2]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
  spi->receive(spi, &response);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f107 020e 	add.w	r2, r7, #14
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 8001d92:	bf00      	nop
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f8      	bne.n	8001d94 <SPI_transmit+0x2c>
  return response;
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	b29b      	uxth	r3, r3
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <SPI_send8>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param   data      The data to send.
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI *spi, uint16_t data) {
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8001dba:	bf00      	nop
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f8      	beq.n	8001dbc <SPI_send8+0xe>
  spi->interface->DR = (uint8_t) data;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <SPI_send16>:

static void SPI_send16(SPI *spi, uint16_t data) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8001dec:	bf00      	nop
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f8      	beq.n	8001dee <SPI_send16+0xe>
  spi->interface->DR = data;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	60da      	str	r2, [r3, #12]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SPI_receive8>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param   data      Pointer to variable to receive data into.
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI *spi, volatile uint16_t *data) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8001e1a:	bf00      	nop
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f8      	beq.n	8001e1c <SPI_receive8+0xc>
  *data = (uint8_t) spi->interface->DR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	801a      	strh	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SPI_receive16>:

static void SPI_receive16(SPI *spi, volatile uint16_t *data) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8001e4e:	bf00      	nop
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f8      	beq.n	8001e50 <SPI_receive16+0xc>
  *data = spi->interface->DR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	801a      	strh	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <NMI_Handler+0x4>

08001ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <MemManage_Handler+0x4>

08001ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <UsageFault_Handler+0x4>

08001ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1e:	f000 f891 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <SystemInit+0x20>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <SystemInit+0x20>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f50:	f7ff ffea 	bl	8001f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f000 fde5 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe ffcb 	bl	8000f18 <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f90:	08002bd4 	.word	0x08002bd4
  ldr r2, =_sbss
 8001f94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f98:	200004b4 	.word	0x200004b4

08001f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <HAL_Init+0x40>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_Init+0x40>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	@ (8001fe0 <HAL_Init+0x40>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 f90d 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff ff50 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f917 	bl	8002236 <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 f8ed 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	@ (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000000 	.word	0x20000000
 800203c:	20000008 	.word	0x20000008
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x20>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_IncTick+0x24>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008
 8002068:	200004b0 	.word	0x200004b0

0800206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return uwTick;
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_GetTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200004b0 	.word	0x200004b0

08002084 <__NVIC_SetPriorityGrouping>:
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b6:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_GetPriorityGrouping>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	@ (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	@ (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff47 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff5c 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffb0 	bl	80021a4 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002276:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800227c:	f7ff fef6 	bl	800206c <HAL_GetTick>
 8002280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002282:	e009      	b.n	8002298 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002284:	f7ff fef2 	bl	800206c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002292:	d901      	bls.n	8002298 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e01f      	b.n	80022d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a4:	d1ee      	bne.n	8002284 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ac:	f7ff fede 	bl	800206c <HAL_GetTick>
 80022b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022b2:	e009      	b.n	80022c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022b4:	f7ff feda 	bl	800206c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022c2:	d901      	bls.n	80022c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e007      	b.n	80022d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022c8:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022d4:	d1ee      	bne.n	80022b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	420e0040 	.word	0x420e0040
 80022e8:	40007000 	.word	0x40007000
 80022ec:	420e0044 	.word	0x420e0044

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e267      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d075      	beq.n	80023fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800230e:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b04      	cmp	r3, #4
 8002318:	d00c      	beq.n	8002334 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b85      	ldr	r3, [pc, #532]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002322:	2b08      	cmp	r3, #8
 8002324:	d112      	bne.n	800234c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b82      	ldr	r3, [pc, #520]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b7e      	ldr	r3, [pc, #504]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05b      	beq.n	80023f8 <HAL_RCC_OscConfig+0x108>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d157      	bne.n	80023f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e242      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x74>
 8002356:	4b76      	ldr	r3, [pc, #472]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a75      	ldr	r2, [pc, #468]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xb0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x98>
 800236e:	4b70      	ldr	r3, [pc, #448]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6f      	ldr	r2, [pc, #444]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6d      	ldr	r3, [pc, #436]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6c      	ldr	r2, [pc, #432]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xb0>
 8002388:	4b69      	ldr	r3, [pc, #420]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a68      	ldr	r2, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fe60 	bl	800206c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff fe5c 	bl	800206c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e207      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xc0>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fe4c 	bl	800206c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7ff fe48 	bl	800206c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1f3      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0xe8>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002406:	4b4a      	ldr	r3, [pc, #296]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b47      	ldr	r3, [pc, #284]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800241a:	2b08      	cmp	r3, #8
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b44      	ldr	r3, [pc, #272]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x152>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1c7      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b3b      	ldr	r3, [pc, #236]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4937      	ldr	r1, [pc, #220]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e03a      	b.n	80024ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7ff fe01 	bl	800206c <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7ff fdfd 	bl	800206c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1a8      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4925      	ldr	r1, [pc, #148]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff fde0 	bl	800206c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b0:	f7ff fddc 	bl	800206c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e187      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d036      	beq.n	8002548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_RCC_OscConfig+0x248>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff fdc0 	bl	800206c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7ff fdbc 	bl	800206c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e167      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x200>
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_OscConfig+0x248>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7ff fda9 	bl	800206c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	e00e      	b.n	800253c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251e:	f7ff fda5 	bl	800206c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d907      	bls.n	800253c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e150      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
 8002530:	40023800 	.word	0x40023800
 8002534:	42470000 	.word	0x42470000
 8002538:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b88      	ldr	r3, [pc, #544]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ea      	bne.n	800251e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8097 	beq.w	8002684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b81      	ldr	r3, [pc, #516]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b7d      	ldr	r3, [pc, #500]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	4a7c      	ldr	r2, [pc, #496]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	@ 0x40
 8002576:	4b7a      	ldr	r3, [pc, #488]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b77      	ldr	r3, [pc, #476]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b74      	ldr	r3, [pc, #464]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a73      	ldr	r2, [pc, #460]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7ff fd65 	bl	800206c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7ff fd61 	bl	800206c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e10c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x2ea>
 80025cc:	4b64      	ldr	r3, [pc, #400]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4a63      	ldr	r2, [pc, #396]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d8:	e01c      	b.n	8002614 <HAL_RCC_OscConfig+0x324>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x30c>
 80025e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0x324>
 80025fc:	4b58      	ldr	r3, [pc, #352]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a57      	ldr	r2, [pc, #348]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
 8002608:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	4a54      	ldr	r2, [pc, #336]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0304 	bic.w	r3, r3, #4
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d015      	beq.n	8002648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7ff fd26 	bl	800206c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7ff fd22 	bl	800206c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0cb      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ee      	beq.n	8002624 <HAL_RCC_OscConfig+0x334>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7ff fd10 	bl	800206c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7ff fd0c 	bl	800206c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0b5      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ee      	bne.n	8002650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002678:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4a38      	ldr	r2, [pc, #224]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a1 	beq.w	80027d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268e:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d05c      	beq.n	8002754 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d141      	bne.n	8002726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_RCC_OscConfig+0x478>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fce0 	bl	800206c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7ff fcdc 	bl	800206c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e087      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b27      	ldr	r3, [pc, #156]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	491b      	ldr	r1, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x478>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7ff fcb5 	bl	800206c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7ff fcb1 	bl	800206c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e05c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x416>
 8002724:	e054      	b.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_RCC_OscConfig+0x478>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fc9e 	bl	800206c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff fc9a 	bl	800206c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e045      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x444>
 8002752:	e03d      	b.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e038      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000
 8002768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x4ec>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d028      	beq.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d121      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d11a      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d111      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0cc      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b68      	ldr	r3, [pc, #416]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d90c      	bls.n	800281c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b65      	ldr	r3, [pc, #404]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a58      	ldr	r2, [pc, #352]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a52      	ldr	r2, [pc, #328]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d044      	beq.n	8002900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d119      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	2b03      	cmp	r3, #3
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e067      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028be:	4b37      	ldr	r3, [pc, #220]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 0203 	bic.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4934      	ldr	r1, [pc, #208]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d0:	f7ff fbcc 	bl	800206c <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7ff fbc8 	bl	800206c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 020c 	and.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1eb      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20c      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002952:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fb2c 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00
 800299c:	40023800 	.word	0x40023800
 80029a0:	08002bb4 	.word	0x08002bb4
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b0:	b090      	sub	sp, #64	@ 0x40
 80029b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c4:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d00d      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x40>
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	f200 80a1 	bhi.w	8002b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029de:	e09b      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029e4:	e09b      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e6:	4b53      	ldr	r3, [pc, #332]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029ea:	e098      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ec:	4b4f      	ldr	r3, [pc, #316]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f6:	4b4d      	ldr	r3, [pc, #308]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d028      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	2200      	movs	r2, #0
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a14:	2100      	movs	r1, #0
 8002a16:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a18:	fb03 f201 	mul.w	r2, r3, r1
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	fb00 f303 	mul.w	r3, r0, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	4a43      	ldr	r2, [pc, #268]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a26:	fba0 1202 	umull	r1, r2, r0, r2
 8002a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a32:	4413      	add	r3, r2
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	61fa      	str	r2, [r7, #28]
 8002a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a46:	f7fd fbd1 	bl	80001ec <__aeabi_uldivmod>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4613      	mov	r3, r2
 8002a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a52:	e053      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a54:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	617a      	str	r2, [r7, #20]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a66:	f04f 0b00 	mov.w	fp, #0
 8002a6a:	4652      	mov	r2, sl
 8002a6c:	465b      	mov	r3, fp
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	0159      	lsls	r1, r3, #5
 8002a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7c:	0150      	lsls	r0, r2, #5
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	ebb2 080a 	subs.w	r8, r2, sl
 8002a86:	eb63 090b 	sbc.w	r9, r3, fp
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	00eb      	lsls	r3, r5, #3
 8002ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab4:	00e2      	lsls	r2, r4, #3
 8002ab6:	4614      	mov	r4, r2
 8002ab8:	461d      	mov	r5, r3
 8002aba:	eb14 030a 	adds.w	r3, r4, sl
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	eb45 030b 	adc.w	r3, r5, fp
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	028b      	lsls	r3, r1, #10
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002adc:	4621      	mov	r1, r4
 8002ade:	028a      	lsls	r2, r1, #10
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af0:	f7fd fb7c 	bl	80001ec <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b16:	e002      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3740      	adds	r7, #64	@ 0x40
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <memset>:
 8002b38:	4402      	add	r2, r0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memset+0xa>
 8002b40:	4770      	bx	lr
 8002b42:	f803 1b01 	strb.w	r1, [r3], #1
 8002b46:	e7f9      	b.n	8002b3c <memset+0x4>

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b80 <__libc_init_array+0x38>)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b84 <__libc_init_array+0x3c>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	2600      	movs	r6, #0
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	4d0b      	ldr	r5, [pc, #44]	@ (8002b88 <__libc_init_array+0x40>)
 8002b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002b8c <__libc_init_array+0x44>)
 8002b5c:	f000 f818 	bl	8002b90 <_init>
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	2600      	movs	r6, #0
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	08002bcc 	.word	0x08002bcc
 8002b84:	08002bcc 	.word	0x08002bcc
 8002b88:	08002bcc 	.word	0x08002bcc
 8002b8c:	08002bd0 	.word	0x08002bd0

08002b90 <_init>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	bf00      	nop
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr

08002b9c <_fini>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr
