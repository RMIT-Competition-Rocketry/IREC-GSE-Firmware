
GSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006760  08006760  00007760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ac  080067ac  00008040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067ac  080067ac  000077ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b4  080067b4  00008040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b4  080067b4  000077b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067b8  080067b8  000077b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  080067bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008040  2**0
                  CONTENTS
 10 .bss          0000062c  20000040  20000040  00008040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000066c  2000066c  00008040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec92  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c9  00000000  00000000  00016d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  000191d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  00019da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033ef  00000000  00000000  0001a6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012894  00000000  00000000  0001daa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de8b0  00000000  00000000  0003033a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ebea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030f0  00000000  00000000  0010ec30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00111d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000040 	.word	0x20000040
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006748 	.word	0x08006748

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000044 	.word	0x20000044
 80001ec:	08006748 	.word	0x08006748

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b988 	b.w	8000930 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	468e      	mov	lr, r1
 8000640:	4604      	mov	r4, r0
 8000642:	4688      	mov	r8, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d14a      	bne.n	80006de <__udivmoddi4+0xa6>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d962      	bls.n	8000714 <__udivmoddi4+0xdc>
 800064e:	fab2 f682 	clz	r6, r2
 8000652:	b14e      	cbz	r6, 8000668 <__udivmoddi4+0x30>
 8000654:	f1c6 0320 	rsb	r3, r6, #32
 8000658:	fa01 f806 	lsl.w	r8, r1, r6
 800065c:	fa20 f303 	lsr.w	r3, r0, r3
 8000660:	40b7      	lsls	r7, r6
 8000662:	ea43 0808 	orr.w	r8, r3, r8
 8000666:	40b4      	lsls	r4, r6
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f fc87 	uxth.w	ip, r7
 8000670:	fbb8 f1fe 	udiv	r1, r8, lr
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	fb0e 8811 	mls	r8, lr, r1, r8
 800067a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067e:	fb01 f20c 	mul.w	r2, r1, ip
 8000682:	429a      	cmp	r2, r3
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x62>
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	f101 30ff 	add.w	r0, r1, #4294967295
 800068c:	f080 80ea 	bcs.w	8000864 <__udivmoddi4+0x22c>
 8000690:	429a      	cmp	r2, r3
 8000692:	f240 80e7 	bls.w	8000864 <__udivmoddi4+0x22c>
 8000696:	3902      	subs	r1, #2
 8000698:	443b      	add	r3, r7
 800069a:	1a9a      	subs	r2, r3, r2
 800069c:	b2a3      	uxth	r3, r4
 800069e:	fbb2 f0fe 	udiv	r0, r2, lr
 80006a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ae:	459c      	cmp	ip, r3
 80006b0:	d909      	bls.n	80006c6 <__udivmoddi4+0x8e>
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006b8:	f080 80d6 	bcs.w	8000868 <__udivmoddi4+0x230>
 80006bc:	459c      	cmp	ip, r3
 80006be:	f240 80d3 	bls.w	8000868 <__udivmoddi4+0x230>
 80006c2:	443b      	add	r3, r7
 80006c4:	3802      	subs	r0, #2
 80006c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ca:	eba3 030c 	sub.w	r3, r3, ip
 80006ce:	2100      	movs	r1, #0
 80006d0:	b11d      	cbz	r5, 80006da <__udivmoddi4+0xa2>
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	2200      	movs	r2, #0
 80006d6:	e9c5 3200 	strd	r3, r2, [r5]
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d905      	bls.n	80006ee <__udivmoddi4+0xb6>
 80006e2:	b10d      	cbz	r5, 80006e8 <__udivmoddi4+0xb0>
 80006e4:	e9c5 0100 	strd	r0, r1, [r5]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4608      	mov	r0, r1
 80006ec:	e7f5      	b.n	80006da <__udivmoddi4+0xa2>
 80006ee:	fab3 f183 	clz	r1, r3
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d146      	bne.n	8000784 <__udivmoddi4+0x14c>
 80006f6:	4573      	cmp	r3, lr
 80006f8:	d302      	bcc.n	8000700 <__udivmoddi4+0xc8>
 80006fa:	4282      	cmp	r2, r0
 80006fc:	f200 8105 	bhi.w	800090a <__udivmoddi4+0x2d2>
 8000700:	1a84      	subs	r4, r0, r2
 8000702:	eb6e 0203 	sbc.w	r2, lr, r3
 8000706:	2001      	movs	r0, #1
 8000708:	4690      	mov	r8, r2
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0e5      	beq.n	80006da <__udivmoddi4+0xa2>
 800070e:	e9c5 4800 	strd	r4, r8, [r5]
 8000712:	e7e2      	b.n	80006da <__udivmoddi4+0xa2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	f000 8090 	beq.w	800083a <__udivmoddi4+0x202>
 800071a:	fab2 f682 	clz	r6, r2
 800071e:	2e00      	cmp	r6, #0
 8000720:	f040 80a4 	bne.w	800086c <__udivmoddi4+0x234>
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	b280      	uxth	r0, r0
 800072e:	b2bc      	uxth	r4, r7
 8000730:	2101      	movs	r1, #1
 8000732:	fbb2 fcfe 	udiv	ip, r2, lr
 8000736:	fb0e 221c 	mls	r2, lr, ip, r2
 800073a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073e:	fb04 f20c 	mul.w	r2, r4, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x11e>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f10c 38ff 	add.w	r8, ip, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x11c>
 800074e:	429a      	cmp	r2, r3
 8000750:	f200 80e0 	bhi.w	8000914 <__udivmoddi4+0x2dc>
 8000754:	46c4      	mov	ip, r8
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	fbb3 f2fe 	udiv	r2, r3, lr
 800075c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000760:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000764:	fb02 f404 	mul.w	r4, r2, r4
 8000768:	429c      	cmp	r4, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x144>
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x142>
 8000774:	429c      	cmp	r4, r3
 8000776:	f200 80ca 	bhi.w	800090e <__udivmoddi4+0x2d6>
 800077a:	4602      	mov	r2, r0
 800077c:	1b1b      	subs	r3, r3, r4
 800077e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000782:	e7a5      	b.n	80006d0 <__udivmoddi4+0x98>
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	408b      	lsls	r3, r1
 800078a:	fa22 f706 	lsr.w	r7, r2, r6
 800078e:	431f      	orrs	r7, r3
 8000790:	fa0e f401 	lsl.w	r4, lr, r1
 8000794:	fa20 f306 	lsr.w	r3, r0, r6
 8000798:	fa2e fe06 	lsr.w	lr, lr, r6
 800079c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007a0:	4323      	orrs	r3, r4
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	fa1f fc87 	uxth.w	ip, r7
 80007aa:	fbbe f0f9 	udiv	r0, lr, r9
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007bc:	45a6      	cmp	lr, r4
 80007be:	fa02 f201 	lsl.w	r2, r2, r1
 80007c2:	d909      	bls.n	80007d8 <__udivmoddi4+0x1a0>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ca:	f080 809c 	bcs.w	8000906 <__udivmoddi4+0x2ce>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f240 8099 	bls.w	8000906 <__udivmoddi4+0x2ce>
 80007d4:	3802      	subs	r0, #2
 80007d6:	443c      	add	r4, r7
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	fa1f fe83 	uxth.w	lr, r3
 80007e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e4:	fb09 4413 	mls	r4, r9, r3, r4
 80007e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f0:	45a4      	cmp	ip, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1ce>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007fa:	f080 8082 	bcs.w	8000902 <__udivmoddi4+0x2ca>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d97f      	bls.n	8000902 <__udivmoddi4+0x2ca>
 8000802:	3b02      	subs	r3, #2
 8000804:	443c      	add	r4, r7
 8000806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800080a:	eba4 040c 	sub.w	r4, r4, ip
 800080e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000812:	4564      	cmp	r4, ip
 8000814:	4673      	mov	r3, lr
 8000816:	46e1      	mov	r9, ip
 8000818:	d362      	bcc.n	80008e0 <__udivmoddi4+0x2a8>
 800081a:	d05f      	beq.n	80008dc <__udivmoddi4+0x2a4>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x1fe>
 800081e:	ebb8 0203 	subs.w	r2, r8, r3
 8000822:	eb64 0409 	sbc.w	r4, r4, r9
 8000826:	fa04 f606 	lsl.w	r6, r4, r6
 800082a:	fa22 f301 	lsr.w	r3, r2, r1
 800082e:	431e      	orrs	r6, r3
 8000830:	40cc      	lsrs	r4, r1
 8000832:	e9c5 6400 	strd	r6, r4, [r5]
 8000836:	2100      	movs	r1, #0
 8000838:	e74f      	b.n	80006da <__udivmoddi4+0xa2>
 800083a:	fbb1 fcf2 	udiv	ip, r1, r2
 800083e:	0c01      	lsrs	r1, r0, #16
 8000840:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000844:	b280      	uxth	r0, r0
 8000846:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800084a:	463b      	mov	r3, r7
 800084c:	4638      	mov	r0, r7
 800084e:	463c      	mov	r4, r7
 8000850:	46b8      	mov	r8, r7
 8000852:	46be      	mov	lr, r7
 8000854:	2620      	movs	r6, #32
 8000856:	fbb1 f1f7 	udiv	r1, r1, r7
 800085a:	eba2 0208 	sub.w	r2, r2, r8
 800085e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000862:	e766      	b.n	8000732 <__udivmoddi4+0xfa>
 8000864:	4601      	mov	r1, r0
 8000866:	e718      	b.n	800069a <__udivmoddi4+0x62>
 8000868:	4610      	mov	r0, r2
 800086a:	e72c      	b.n	80006c6 <__udivmoddi4+0x8e>
 800086c:	f1c6 0220 	rsb	r2, r6, #32
 8000870:	fa2e f302 	lsr.w	r3, lr, r2
 8000874:	40b7      	lsls	r7, r6
 8000876:	40b1      	lsls	r1, r6
 8000878:	fa20 f202 	lsr.w	r2, r0, r2
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	430a      	orrs	r2, r1
 8000882:	fbb3 f8fe 	udiv	r8, r3, lr
 8000886:	b2bc      	uxth	r4, r7
 8000888:	fb0e 3318 	mls	r3, lr, r8, r3
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb08 f904 	mul.w	r9, r8, r4
 8000896:	40b0      	lsls	r0, r6
 8000898:	4589      	cmp	r9, r1
 800089a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800089e:	b280      	uxth	r0, r0
 80008a0:	d93e      	bls.n	8000920 <__udivmoddi4+0x2e8>
 80008a2:	1879      	adds	r1, r7, r1
 80008a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008a8:	d201      	bcs.n	80008ae <__udivmoddi4+0x276>
 80008aa:	4589      	cmp	r9, r1
 80008ac:	d81f      	bhi.n	80008ee <__udivmoddi4+0x2b6>
 80008ae:	eba1 0109 	sub.w	r1, r1, r9
 80008b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c4:	4542      	cmp	r2, r8
 80008c6:	d229      	bcs.n	800091c <__udivmoddi4+0x2e4>
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ce:	d2c4      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d0:	4542      	cmp	r2, r8
 80008d2:	d2c2      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d4:	f1a9 0102 	sub.w	r1, r9, #2
 80008d8:	443a      	add	r2, r7
 80008da:	e7be      	b.n	800085a <__udivmoddi4+0x222>
 80008dc:	45f0      	cmp	r8, lr
 80008de:	d29d      	bcs.n	800081c <__udivmoddi4+0x1e4>
 80008e0:	ebbe 0302 	subs.w	r3, lr, r2
 80008e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008e8:	3801      	subs	r0, #1
 80008ea:	46e1      	mov	r9, ip
 80008ec:	e796      	b.n	800081c <__udivmoddi4+0x1e4>
 80008ee:	eba7 0909 	sub.w	r9, r7, r9
 80008f2:	4449      	add	r1, r9
 80008f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fc:	fb09 f804 	mul.w	r8, r9, r4
 8000900:	e7db      	b.n	80008ba <__udivmoddi4+0x282>
 8000902:	4673      	mov	r3, lr
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1ce>
 8000906:	4650      	mov	r0, sl
 8000908:	e766      	b.n	80007d8 <__udivmoddi4+0x1a0>
 800090a:	4608      	mov	r0, r1
 800090c:	e6fd      	b.n	800070a <__udivmoddi4+0xd2>
 800090e:	443b      	add	r3, r7
 8000910:	3a02      	subs	r2, #2
 8000912:	e733      	b.n	800077c <__udivmoddi4+0x144>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	443b      	add	r3, r7
 800091a:	e71c      	b.n	8000756 <__udivmoddi4+0x11e>
 800091c:	4649      	mov	r1, r9
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x222>
 8000920:	eba1 0109 	sub.w	r1, r1, r9
 8000924:	46c4      	mov	ip, r8
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fb09 f804 	mul.w	r8, r9, r4
 800092e:	e7c4      	b.n	80008ba <__udivmoddi4+0x282>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <configureSPIBus6>:
	SPI1->CR1 |= SPI_CR1_SPE; //enables the protocol
}


void configureSPIBus6(void)// 	//for both additional 5V channels and LoRa
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	GPIOG->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk);
 8000938:	4b58      	ldr	r3, [pc, #352]	@ (8000a9c <configureSPIBus6+0x168>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a57      	ldr	r2, [pc, #348]	@ (8000a9c <configureSPIBus6+0x168>)
 800093e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000942:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x02 <<GPIO_MODER_MODE12_Pos | 0x02 << GPIO_MODER_MODE13_Pos | 0x02 << GPIO_MODER_MODE14_Pos);
 8000944:	4b55      	ldr	r3, [pc, #340]	@ (8000a9c <configureSPIBus6+0x168>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a54      	ldr	r2, [pc, #336]	@ (8000a9c <configureSPIBus6+0x168>)
 800094a:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 800094e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD12_Msk | GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk); //if needing to change internal pull up/downs
 8000950:	4b52      	ldr	r3, [pc, #328]	@ (8000a9c <configureSPIBus6+0x168>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a51      	ldr	r2, [pc, #324]	@ (8000a9c <configureSPIBus6+0x168>)
 8000956:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800095a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |= (0x01 << GPIO_PUPDR_PUPD12_Pos | 0x01 << GPIO_PUPDR_PUPD13_Pos | 0x01 << GPIO_PUPDR_PUPD14_Pos); //internal pull ups on SCK, MOSI and MISO
 800095c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a9c <configureSPIBus6+0x168>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a4e      	ldr	r2, [pc, #312]	@ (8000a9c <configureSPIBus6+0x168>)
 8000962:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8000966:	60d3      	str	r3, [r2, #12]
		//@var PG12 = SDO
		//		PG13 = SCLK
		// 		 PG14 = SDI
	//GPIO for LoRa, RF Switch & Chip select
	GPIOG->MODER &= ~(GPIO_MODER_MODE9_Msk | GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 8000968:	4b4c      	ldr	r3, [pc, #304]	@ (8000a9c <configureSPIBus6+0x168>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a9c <configureSPIBus6+0x168>)
 800096e:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8000972:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x01 <<GPIO_MODER_MODE9_Pos | 0x01 <<GPIO_MODER_MODE10_Pos | 0x01 <<GPIO_MODER_MODE11_Pos);
 8000974:	4b49      	ldr	r3, [pc, #292]	@ (8000a9c <configureSPIBus6+0x168>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a48      	ldr	r2, [pc, #288]	@ (8000a9c <configureSPIBus6+0x168>)
 800097a:	f443 03a8 	orr.w	r3, r3, #5505024	@ 0x540000
 800097e:	6013      	str	r3, [r2, #0]
	//		PG10 = RF_SWITCH
	//		 PG11 = CS

	//timer config for LoRa
		//Use the same config as Australis board
	TIM6->ARR &= ~(TIM_ARR_ARR_Msk);
 8000980:	4b47      	ldr	r3, [pc, #284]	@ (8000aa0 <configureSPIBus6+0x16c>)
 8000982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000984:	4b46      	ldr	r3, [pc, #280]	@ (8000aa0 <configureSPIBus6+0x16c>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC &= ~(TIM_PSC_PSC_Msk);
 800098a:	4b45      	ldr	r3, [pc, #276]	@ (8000aa0 <configureSPIBus6+0x16c>)
 800098c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800098e:	4a44      	ldr	r2, [pc, #272]	@ (8000aa0 <configureSPIBus6+0x16c>)
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	041b      	lsls	r3, r3, #16
 8000994:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR |= 20000;
 8000996:	4b42      	ldr	r3, [pc, #264]	@ (8000aa0 <configureSPIBus6+0x16c>)
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	4a41      	ldr	r2, [pc, #260]	@ (8000aa0 <configureSPIBus6+0x16c>)
 800099c:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->PSC |= 251; //same as australis to remain consistent!
 80009a6:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa0 <configureSPIBus6+0x16c>)
 80009a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009aa:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa0 <configureSPIBus6+0x16c>)
 80009ac:	f043 03fb 	orr.w	r3, r3, #251	@ 0xfb
 80009b0:	6293      	str	r3, [r2, #40]	@ 0x28

	GPIOG->ODR |= (GPIO_ODR_OD9); //hold reset high for SX1272
 80009b2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a9c <configureSPIBus6+0x168>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a39      	ldr	r2, [pc, #228]	@ (8000a9c <configureSPIBus6+0x168>)
 80009b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009bc:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //enable TIM6
 80009be:	4b38      	ldr	r3, [pc, #224]	@ (8000aa0 <configureSPIBus6+0x16c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a37      	ldr	r2, [pc, #220]	@ (8000aa0 <configureSPIBus6+0x16c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6013      	str	r3, [r2, #0]
//	while((TIM6->CR1 & TIM_SR_UIF)==0); //wait for hardware registers to be updated
	GPIOG->ODR &= ~(GPIO_ODR_OD9); //resets reset on GPIO
 80009ca:	4b34      	ldr	r3, [pc, #208]	@ (8000a9c <configureSPIBus6+0x168>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <configureSPIBus6+0x168>)
 80009d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80009d4:	6153      	str	r3, [r2, #20]
	TIM6->CR1 &= ~(TIM_SR_UIF); //clears UIF register
 80009d6:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <configureSPIBus6+0x16c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a31      	ldr	r2, [pc, #196]	@ (8000aa0 <configureSPIBus6+0x16c>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6013      	str	r3, [r2, #0]

	//
	GPIOG->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT12_Msk | GPIO_OTYPER_OT13_Msk | GPIO_OTYPER_OT14_Msk); //push pull
 80009e2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <configureSPIBus6+0x168>)
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	492d      	ldr	r1, [pc, #180]	@ (8000a9c <configureSPIBus6+0x168>)
 80009e8:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 80009ec:	4013      	ands	r3, r2
 80009ee:	604b      	str	r3, [r1, #4]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED12_Msk | GPIO_OSPEEDR_OSPEED13_Msk | GPIO_OSPEEDR_OSPEED14_Msk);
 80009f0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <configureSPIBus6+0x168>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	4a29      	ldr	r2, [pc, #164]	@ (8000a9c <configureSPIBus6+0x168>)
 80009f6:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80009fa:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0x02<<GPIO_OSPEEDR_OSPEED12_Pos | 0x02<<GPIO_OSPEEDR_OSPEED13_Pos | 0x02<<GPIO_OSPEEDR_OSPEED14_Pos); //fast mode
 80009fc:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <configureSPIBus6+0x168>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	4a26      	ldr	r2, [pc, #152]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a02:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8000a06:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD11; //raise up CS
 8000a08:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a12:	6153      	str	r3, [r2, #20]

	GPIOG->AFR[1] &= ~((GPIO_AFRH_AFRH5) | (GPIO_AFRH_AFRH6) | (GPIO_AFRH_AFRH7));// alternate functions for SPI3
 8000a14:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a18:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a1e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= ((0x05 << 4*4) | (0x05 << 5*4) | (0x05 << 6*4));// alternate functions for SPI3
 8000a20:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a24:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <configureSPIBus6+0x168>)
 8000a26:	f043 63aa 	orr.w	r3, r3, #89128960	@ 0x5500000
 8000a2a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000a2e:	6253      	str	r3, [r2, #36]	@ 0x24

    SPI6->CR1 &= ~(SPI_CR1_BR_Msk); // Clear baud rate bits
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a36:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000a3a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= (0x03 << SPI_CR1_BR_Pos); // SPIclk/8
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a42:	f043 0318 	orr.w	r3, r3, #24
 8000a46:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk); // CPHA = 0, CPOL = 0
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a4e:	f023 0303 	bic.w	r3, r3, #3
 8000a52:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_MSTR; // Master mode
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; // Software slave management
 8000a60:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a66:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a6a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_LSBFIRST); // MSB first
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a76:	6013      	str	r3, [r2, #0]
   // SPI6->CR1 |= SPI_CR1_DFF; // 16-bit mode
    SPI6->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE); // Full duplex
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a7e:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 8000a82:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SPE; // Enable SPI
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a06      	ldr	r2, [pc, #24]	@ (8000aa4 <configureSPIBus6+0x170>)
 8000a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	40015400 	.word	0x40015400

08000aa8 <configureRCC_APB1>:
	//rise and repeat for all SPI buses
}


void configureRCC_APB1(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN);
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <configureRCC_APB1+0x54>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <configureRCC_APB1+0x54>)
 8000ab2:	f423 0381 	bic.w	r3, r3, #4227072	@ 0x408000
 8000ab6:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8000aba:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <configureRCC_APB1+0x54>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <configureRCC_APB1+0x54>)
 8000ac2:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000ac6:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST |  RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <configureRCC_APB1+0x54>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <configureRCC_APB1+0x54>)
 8000ad2:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000ad6:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000ada:	6213      	str	r3, [r2, #32]
	__ASM("NOP");
 8000adc:	bf00      	nop
	__ASM("NOP");
 8000ade:	bf00      	nop
	RCC->APB1RSTR &= (uint16_t)~(RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST | RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <configureRCC_APB1+0x54>)
 8000ae2:	6a1a      	ldr	r2, [r3, #32]
 8000ae4:	4905      	ldr	r1, [pc, #20]	@ (8000afc <configureRCC_APB1+0x54>)
 8000ae6:	f647 73ce 	movw	r3, #32718	@ 0x7fce
 8000aea:	4013      	ands	r3, r2
 8000aec:	620b      	str	r3, [r1, #32]
	__ASM("NOP");
 8000aee:	bf00      	nop
	__ASM("NOP");
 8000af0:	bf00      	nop
	//configure for more timers when necessary
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800

08000b00 <configureRCC_APB2>:

void configureRCC_APB2(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	RCC->APB2ENR &=  ~(RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN |RCC_APB2ENR_SPI6EN| RCC_APB2ENR_SYSCFGEN /*important for interrupts and other sys init*/| RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN);
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b08:	490f      	ldr	r1, [pc, #60]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <configureRCC_APB2+0x4c>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	644b      	str	r3, [r1, #68]	@ 0x44
	RCC->APB2ENR |=  RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN |RCC_APB2ENR_SPI6EN| RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <configureRCC_APB2+0x50>)
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	644b      	str	r3, [r1, #68]	@ 0x44

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST|RCC_APB2RSTR_SPI6RST|RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b20:	4909      	ldr	r1, [pc, #36]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <configureRCC_APB2+0x54>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000b28:	bf00      	nop
	__ASM("NOP");
 8000b2a:	bf00      	nop
	RCC->APB2RSTR &= (uint16_t)~(RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST|RCC_APB2RSTR_SPI6RST| RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b30:	4905      	ldr	r1, [pc, #20]	@ (8000b48 <configureRCC_APB2+0x48>)
 8000b32:	f648 73df 	movw	r3, #36831	@ 0x8fdf
 8000b36:	4013      	ands	r3, r2
 8000b38:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000b3a:	bf00      	nop
	__ASM("NOP");
 8000b3c:	bf00      	nop
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	ffdf8fde 	.word	0xffdf8fde
 8000b50:	00207021 	.word	0x00207021
 8000b54:	00247020 	.word	0x00247020

08000b58 <configureRCC_AHB1>:
void configureRCC_AHB1(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <configureRCC_AHB1+0x38>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <configureRCC_AHB1+0x38>)
 8000b62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <configureRCC_AHB1+0x38>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <configureRCC_AHB1+0x38>)
 8000b6e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
	__ASM("NOP");
 8000b74:	bf00      	nop
	__ASM("NOP");
 8000b76:	bf00      	nop
	RCC->AHB1RSTR &= (uint16_t)(~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST));
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <configureRCC_AHB1+0x38>)
 8000b7a:	691a      	ldr	r2, [r3, #16]
 8000b7c:	4904      	ldr	r1, [pc, #16]	@ (8000b90 <configureRCC_AHB1+0x38>)
 8000b7e:	f64f 7382 	movw	r3, #65410	@ 0xff82
 8000b82:	4013      	ands	r3, r2
 8000b84:	610b      	str	r3, [r1, #16]
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800

08000b94 <GPIO_init>:
#include "gpio.h"
#include "stm32f4xx_hal.h"


void GPIO_init(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	79ba      	ldrb	r2, [r7, #6]
 8000bba:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	7e3a      	ldrb	r2, [r7, #24]
 8000bc0:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	7f3a      	ldrb	r2, [r7, #28]
 8000bc6:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bce:	711a      	strb	r2, [r3, #4]

	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	79f9      	ldrb	r1, [r7, #7]
 8000bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4619      	mov	r1, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	400a      	ands	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	79f9      	ldrb	r1, [r7, #7]
 8000bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	79b9      	ldrb	r1, [r7, #6]
 8000c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	400a      	ands	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	79b9      	ldrb	r1, [r7, #6]
 8000c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	7e39      	ldrb	r1, [r7, #24]
 8000c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	7e39      	ldrb	r1, [r7, #24]
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS)); //clears the bit that we want to edit
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	7f39      	ldrb	r1, [r7, #28]
 8000c82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4619      	mov	r1, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	400a      	ands	r2, r1
 8000c96:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	7f39      	ldrb	r1, [r7, #28]
 8000ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	60da      	str	r2, [r3, #12]

}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SX1272_init>:
    GPIO_TypeDef *port,
    unsigned long cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
  SPI_init(&lora->base, COMM_LORA, SPI6, MODE8, port, cs);
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4a28      	ldr	r2, [pc, #160]	@ (8000d7c <SX1272_init+0xbc>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	f002 ffb5 	bl	8003c4c <SPI_init>
  lora->standby      = SX1272_standby;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4a26      	ldr	r2, [pc, #152]	@ (8000d80 <SX1272_init+0xc0>)
 8000ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  lora->enableBoost  = SX1272_enableBoost;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4a26      	ldr	r2, [pc, #152]	@ (8000d84 <SX1272_init+0xc4>)
 8000cec:	621a      	str	r2, [r3, #32]
  lora->transmit     = SX1272_transmit;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <SX1272_init+0xc8>)
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  lora->startReceive = SX1272_startReceive;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <SX1272_init+0xcc>)
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  lora->readReceive  = SX1272_readReceive;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4a24      	ldr	r2, [pc, #144]	@ (8000d90 <SX1272_init+0xd0>)
 8000cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  lora->clearIRQ     = SX1272_clearIRQ;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a24      	ldr	r2, [pc, #144]	@ (8000d94 <SX1272_init+0xd4>)
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34


  _SX1272_setMode(lora, SX1272_MODE_SLEEP); // Set mode to sleep
 8000d06:	2100      	movs	r1, #0
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f000 f8ab 	bl	8000e64 <_SX1272_setMode>
  //MSB remains the same as default value of E4
 // SX1272_writeRegister(lora, SX1272_REG_FR_MIB, (0xE6)); //sets middle byte
  //SX1272_writeRegister(lora, SX1272_REG_FR_LSB, (0x67)); //sets last byte

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	2101      	movs	r1, #1
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f9c5 	bl	80010a2 <SX1272_writeRegister>
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 8000d18:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	b25a      	sxtb	r2, r3
 8000d20:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	211d      	movs	r1, #29
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f000 f9b5 	bl	80010a2 <SX1272_writeRegister>
  );
  /* clang-format on */

  /** @todo set spreading factor */
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 8000d38:	2294      	movs	r2, #148	@ 0x94
 8000d3a:	211e      	movs	r1, #30
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f000 f9b0 	bl	80010a2 <SX1272_writeRegister>

  //Set both Tx and Rx FIFO base addresses to 0x00
  SX1272_writeRegister(lora, SX1272_REG_FIFO_TX_BASE_ADDR, 0x00); // Tx starts at 0x00
 8000d42:	2200      	movs	r2, #0
 8000d44:	210e      	movs	r1, #14
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f9ab 	bl	80010a2 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_RX_BASE_ADDR, 0x00); // Rx starts at 0x00
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	210f      	movs	r1, #15
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f000 f9a6 	bl	80010a2 <SX1272_writeRegister>


  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000d56:	2220      	movs	r2, #32
 8000d58:	2122      	movs	r1, #34	@ 0x22
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f9a1 	bl	80010a2 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000d60:	2220      	movs	r2, #32
 8000d62:	2123      	movs	r1, #35	@ 0x23
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 f99c 	bl	80010a2 <SX1272_writeRegister>

  _SX1272_setMode(lora, SX1272_MODE_STDBY); // Set mode to Standby mode!
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f000 f879 	bl	8000e64 <_SX1272_setMode>


}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40015400 	.word	0x40015400
 8000d80:	08000f35 	.word	0x08000f35
 8000d84:	08000ea1 	.word	0x08000ea1
 8000d88:	08000f4d 	.word	0x08000f4d
 8000d8c:	08000fc3 	.word	0x08000fc3
 8000d90:	0800100b 	.word	0x0800100b
 8000d94:	08001083 	.word	0x08001083

08000d98 <Dummy_Transmit>:
		return msg;

}

LoRa_Packet Dummy_Transmit()
{
 8000d98:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000d9c:	b08e      	sub	sp, #56	@ 0x38
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	466b      	mov	r3, sp
 8000da4:	461e      	mov	r6, r3
	LoRa_Packet msg;
	uint8_t id = 0x06;
 8000da6:	2306      	movs	r3, #6
 8000da8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t SIZE = 32;
 8000dac:	2320      	movs	r3, #32
 8000dae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t data[SIZE];
 8000db2:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000db6:	460b      	mov	r3, r1
 8000db8:	3b01      	subs	r3, #1
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dbc:	b2cb      	uxtb	r3, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	4691      	mov	r9, r2
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dd8:	b2cb      	uxtb	r3, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	461c      	mov	r4, r3
 8000dde:	4615      	mov	r5, r2
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	00eb      	lsls	r3, r5, #3
 8000dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dee:	00e2      	lsls	r2, r4, #3
 8000df0:	460b      	mov	r3, r1
 8000df2:	3307      	adds	r3, #7
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	ebad 0d03 	sub.w	sp, sp, r3
 8000dfc:	466b      	mov	r3, sp
 8000dfe:	3300      	adds	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	msg.id = id;
 8000e02:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000e06:	733b      	strb	r3, [r7, #12]
	msg.data[0]=0x06;
 8000e08:	2306      	movs	r3, #6
 8000e0a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 1; i <SIZE; i++)
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000e12:	e00c      	b.n	8000e2e <Dummy_Transmit+0x96>
	{
		msg.data[i] = i;
 8000e14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000e18:	3338      	adds	r3, #56	@ 0x38
 8000e1a:	443b      	add	r3, r7
 8000e1c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000e20:	f803 2c2b 	strb.w	r2, [r3, #-43]
	for(uint8_t i = 1; i <SIZE; i++)
 8000e24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000e2e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000e32:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3ec      	bcc.n	8000e14 <Dummy_Transmit+0x7c>
	}
	return msg;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	f107 040c 	add.w	r4, r7, #12
 8000e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e44:	6028      	str	r0, [r5, #0]
 8000e46:	6069      	str	r1, [r5, #4]
 8000e48:	60aa      	str	r2, [r5, #8]
 8000e4a:	60eb      	str	r3, [r5, #12]
 8000e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4e:	6128      	str	r0, [r5, #16]
 8000e50:	6169      	str	r1, [r5, #20]
 8000e52:	61aa      	str	r2, [r5, #24]
 8000e54:	61eb      	str	r3, [r5, #28]
 8000e56:	46b5      	mov	sp, r6
}
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	3738      	adds	r7, #56	@ 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000e62:	4770      	bx	lr

08000e64 <_SX1272_setMode>:
 *
 * @param lora         Pointer to LoRa struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 8000e70:	2101      	movs	r1, #1
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f94c 	bl	8001110 <SX1272_readRegister>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f023 0307 	bic.w	r3, r3, #7
 8000e82:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f905 	bl	80010a2 <SX1272_writeRegister>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <SX1272_enableBoost>:
 * @param  enable Boolean value for the enable toggle.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 8000eac:	2109      	movs	r1, #9
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f92e 	bl	8001110 <SX1272_readRegister>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  regPaConfig         |= SX1272_PA_SELECT;								//Set PA Boost Select
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ebe:	73fb      	strb	r3, [r7, #15]
  regPaConfig 		  |= 0x0F;											//Set Gain to MAX
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f043 030f 	orr.w	r3, r3, #15
 8000ec6:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig);
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2109      	movs	r1, #9
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f8e7 	bl	80010a2 <SX1272_writeRegister>
  regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG);		 //DEBUGGING -  Read back in current config and ensure its as expected
 8000ed4:	2109      	movs	r1, #9
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f91a 	bl	8001110 <SX1272_readRegister>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint8_t regPaDac = SX1272_readRegister(lora, 0x5A);
 8000ee0:	215a      	movs	r1, #90	@ 0x5a
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f914 	bl	8001110 <SX1272_readRegister>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73bb      	strb	r3, [r7, #14]
  regPaDac |= 0x07;														//Set PaDac to +20dbm mode
 8000eec:	7bbb      	ldrb	r3, [r7, #14]
 8000eee:	f043 0307 	orr.w	r3, r3, #7
 8000ef2:	73bb      	strb	r3, [r7, #14]
  SX1272_writeRegister(lora, 0x5A, regPaDac);
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	215a      	movs	r1, #90	@ 0x5a
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f8d1 	bl	80010a2 <SX1272_writeRegister>
  uint8_t regOpC = SX1272_readRegister(lora, 0x0B);
 8000f00:	210b      	movs	r1, #11
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f904 	bl	8001110 <SX1272_readRegister>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	737b      	strb	r3, [r7, #13]
  regOpC |= 0b00100000;														//Disable Overcurrent protection
 8000f0c:	7b7b      	ldrb	r3, [r7, #13]
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	737b      	strb	r3, [r7, #13]
  SX1272_writeRegister(lora, 0x0B, regOpC);
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	461a      	mov	r2, r3
 8000f18:	210b      	movs	r1, #11
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f8c1 	bl	80010a2 <SX1272_writeRegister>
  regPaDac = SX1272_readRegister(lora, 0x0B);							//DEBUGGING - Read back in current config and ensure its as expected
 8000f20:	210b      	movs	r1, #11
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f8f4 	bl	8001110 <SX1272_readRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73bb      	strb	r3, [r7, #14]
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff90 	bl	8000e64 <_SX1272_setMode>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000f56:	2101      	movs	r1, #1
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff83 	bl	8000e64 <_SX1272_setMode>
  SX1272_enableBoost(lora, true);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff9d 	bl	8000ea0 <SX1272_enableBoost>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 8000f66:	2240      	movs	r2, #64	@ 0x40
 8000f68:	2140      	movs	r1, #64	@ 0x40
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f899 	bl	80010a2 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 8000f70:	2208      	movs	r2, #8
 8000f72:	2112      	movs	r1, #18
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f894 	bl	80010a2 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	210d      	movs	r1, #13
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f88f 	bl	80010a2 <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e00b      	b.n	8000fa2 <SX1272_transmit+0x56>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f883 	bl	80010a2 <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b1f      	cmp	r3, #31
 8000fa6:	ddf0      	ble.n	8000f8a <SX1272_transmit+0x3e>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	771a      	strb	r2, [r3, #28]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7f1b      	ldrb	r3, [r3, #28]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff55 	bl	8000e64 <_SX1272_setMode>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff49 	bl	8000e64 <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	@ 0x40
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f863 	bl	80010a2 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 8000fdc:	2240      	movs	r2, #64	@ 0x40
 8000fde:	2112      	movs	r1, #18
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f85e 	bl	80010a2 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	210d      	movs	r1, #13
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f859 	bl	80010a2 <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	771a      	strb	r2, [r3, #28]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7f1b      	ldrb	r3, [r3, #28]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff31 	bl	8000e64 <_SX1272_setMode>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	4613      	mov	r3, r2
 8001016:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 8001018:	2240      	movs	r2, #64	@ 0x40
 800101a:	2112      	movs	r1, #18
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f840 	bl	80010a2 <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 8001022:	2113      	movs	r1, #19
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f873 	bl	8001110 <SX1272_readRegister>
 800102a:	4603      	mov	r3, r0
 800102c:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 800102e:	2110      	movs	r1, #16
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f86d 	bl	8001110 <SX1272_readRegister>
 8001036:	4603      	mov	r3, r0
 8001038:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 800103a:	7cfa      	ldrb	r2, [r7, #19]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	429a      	cmp	r2, r3
 8001040:	d901      	bls.n	8001046 <SX1272_readReceive+0x3c>
    return false;
 8001042:	2300      	movs	r3, #0
 8001044:	e019      	b.n	800107a <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 8001046:	7cbb      	ldrb	r3, [r7, #18]
 8001048:	461a      	mov	r2, r3
 800104a:	210d      	movs	r1, #13
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f828 	bl	80010a2 <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e00b      	b.n	8001070 <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	18d4      	adds	r4, r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f855 	bl	8001110 <SX1272_readRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbef      	blt.n	8001058 <SX1272_readReceive+0x4e>
  }

  return true;
 8001078:	2301      	movs	r3, #1
}
 800107a:	4618      	mov	r0, r3
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}

08001082 <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	461a      	mov	r2, r3
 8001092:	2112      	movs	r1, #18
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f804 	bl	80010a2 <SX1272_writeRegister>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 80010a2:	b5b0      	push	{r4, r5, r7, lr}
 80010a4:	b08a      	sub	sp, #40	@ 0x28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	70fb      	strb	r3, [r7, #3]
 80010ae:	4613      	mov	r3, r2
 80010b0:	70bb      	strb	r3, [r7, #2]
  SPI spi = lora->base;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f107 0408 	add.w	r4, r7, #8
 80010b8:	461d      	mov	r5, r3
 80010ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  //Pull CS low
  spi.port->ODR &= ~spi.cs;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6959      	ldr	r1, [r3, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	400a      	ands	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]

  //Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  spi.transmit(&spi, payload);      // Transmit payload
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80010e4:	b291      	uxth	r1, r2
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	4610      	mov	r0, r2
 80010ec:	4798      	blx	r3
  spi.transmit(&spi, data);         // Transmit write data
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	78ba      	ldrb	r2, [r7, #2]
 80010f2:	b291      	uxth	r1, r2
 80010f4:	f107 0208 	add.w	r2, r7, #8
 80010f8:	4610      	mov	r0, r2
 80010fa:	4798      	blx	r3

  // Set CS high
  spi.port->ODR |= spi.cs;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6959      	ldr	r1, [r3, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	430a      	orrs	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}

08001110 <SX1272_readRegister>:

uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SPI spi         = lora->base;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f107 0408 	add.w	r4, r7, #8
 8001128:	461d      	mov	r5, r3
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001132:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  // Pull CS low
  spi.port->ODR &= ~spi.cs;
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6959      	ldr	r1, [r3, #20]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	400a      	ands	r2, r1
 8001142:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800114a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  response        = spi.transmit(&spi, payload); // Transmit payload
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001154:	b291      	uxth	r1, r2
 8001156:	f107 0208 	add.w	r2, r7, #8
 800115a:	4610      	mov	r0, r2
 800115c:	4798      	blx	r3
 800115e:	4603      	mov	r3, r0
 8001160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  response        = spi.transmit(&spi, 0xFF);    // Transmit dummy data and reasd response
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	21ff      	movs	r1, #255	@ 0xff
 800116c:	4610      	mov	r0, r2
 800116e:	4798      	blx	r3
 8001170:	4603      	mov	r3, r0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  // Set CS high
  spi.port->ODR |= spi.cs;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6959      	ldr	r1, [r3, #20]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	430a      	orrs	r2, r1
 8001180:	615a      	str	r2, [r3, #20]

  return response;
 8001182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001186:	4618      	mov	r0, r3
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	@ (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db12      	blt.n	8001204 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	490a      	ldr	r1, [pc, #40]	@ (8001210 <__NVIC_DisableIRQ+0x44>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	3320      	adds	r3, #32
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011f8:	f3bf 8f4f 	dsb	sy
}
 80011fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011fe:	f3bf 8f6f 	isb	sy
}
 8001202:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	@ (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	@ (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 800126e:	f002 ff09 	bl	8004084 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8001272:	f001 ff55 	bl	8003120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	configureRCC_APB1();
 8001276:	f7ff fc17 	bl	8000aa8 <configureRCC_APB1>
	configureRCC_APB2();
 800127a:	f7ff fc41 	bl	8000b00 <configureRCC_APB2>
	configureRCC_AHB1();
 800127e:	f7ff fc6b 	bl	8000b58 <configureRCC_AHB1>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	delay_software_ms(100); //important!!
 8001282:	2064      	movs	r0, #100	@ 0x64
 8001284:	f002 fcc6 	bl	8003c14 <delay_software_ms>

	MX_GPIO_Init();
 8001288:	f001 fff2 	bl	8003270 <MX_GPIO_Init>
	MX_I2C2_Init();
 800128c:	f002 f890 	bl	80033b0 <MX_I2C2_Init>
//	MX_SPI5_Init();
	MX_SPI1_Init();
 8001290:	f001 ffb6 	bl	8003200 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//configureSPIBus1();
	configureSPIBus6(); //SPI6
 8001294:	f7ff fb4e 	bl	8000934 <configureSPIBus6>

	//-------------------- SMD LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION
	//PG0 -> Power LED
	GPIO_init(&LED_1, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0C);
 8001298:	230c      	movs	r3, #12
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	2201      	movs	r2, #1
 80012a8:	49b0      	ldr	r1, [pc, #704]	@ (800156c <main+0x304>)
 80012aa:	48b1      	ldr	r0, [pc, #708]	@ (8001570 <main+0x308>)
 80012ac:	f7ff fc72 	bl	8000b94 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&LED_2, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0B);
 80012b0:	230b      	movs	r3, #11
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	2201      	movs	r2, #1
 80012c0:	49aa      	ldr	r1, [pc, #680]	@ (800156c <main+0x304>)
 80012c2:	48ac      	ldr	r0, [pc, #688]	@ (8001574 <main+0x30c>)
 80012c4:	f7ff fc66 	bl	8000b94 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&LED_3, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0A);
 80012c8:	230a      	movs	r3, #10
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2201      	movs	r2, #1
 80012d8:	49a4      	ldr	r1, [pc, #656]	@ (800156c <main+0x304>)
 80012da:	48a7      	ldr	r0, [pc, #668]	@ (8001578 <main+0x310>)
 80012dc:	f7ff fc5a 	bl	8000b94 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&LED_4, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 80012e0:	2309      	movs	r3, #9
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2201      	movs	r2, #1
 80012f0:	499e      	ldr	r1, [pc, #632]	@ (800156c <main+0x304>)
 80012f2:	48a2      	ldr	r0, [pc, #648]	@ (800157c <main+0x314>)
 80012f4:	f7ff fc4e 	bl	8000b94 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&LED_5, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x08);
 80012f8:	2308      	movs	r3, #8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	2301      	movs	r3, #1
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	2201      	movs	r2, #1
 8001308:	4998      	ldr	r1, [pc, #608]	@ (800156c <main+0x304>)
 800130a:	489d      	ldr	r0, [pc, #628]	@ (8001580 <main+0x318>)
 800130c:	f7ff fc42 	bl	8000b94 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&LED_6, GPIOC, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 8001310:	2309      	movs	r3, #9
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	2301      	movs	r3, #1
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	2201      	movs	r2, #1
 8001320:	4998      	ldr	r1, [pc, #608]	@ (8001584 <main+0x31c>)
 8001322:	4899      	ldr	r0, [pc, #612]	@ (8001588 <main+0x320>)
 8001324:	f7ff fc36 	bl	8000b94 <GPIO_init>
	//-------------------- LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION

	//PG0 -> Power LED
	GPIO_init(&led_power, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001328:	2300      	movs	r3, #0
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2302      	movs	r3, #2
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	2201      	movs	r2, #1
 8001338:	4994      	ldr	r1, [pc, #592]	@ (800158c <main+0x324>)
 800133a:	4895      	ldr	r0, [pc, #596]	@ (8001590 <main+0x328>)
 800133c:	f7ff fc2a 	bl	8000b94 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&led_local, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8001340:	2301      	movs	r3, #1
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2302      	movs	r3, #2
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	2301      	movs	r3, #1
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	2201      	movs	r2, #1
 8001350:	498e      	ldr	r1, [pc, #568]	@ (800158c <main+0x324>)
 8001352:	4890      	ldr	r0, [pc, #576]	@ (8001594 <main+0x32c>)
 8001354:	f7ff fc1e 	bl	8000b94 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&led_remote, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x07);
 8001358:	2307      	movs	r3, #7
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2302      	movs	r3, #2
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	2301      	movs	r3, #1
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	2201      	movs	r2, #1
 8001368:	498b      	ldr	r1, [pc, #556]	@ (8001598 <main+0x330>)
 800136a:	488c      	ldr	r0, [pc, #560]	@ (800159c <main+0x334>)
 800136c:	f7ff fc12 	bl	8000b94 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&led_transducer, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001370:	2308      	movs	r3, #8
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2302      	movs	r3, #2
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	2301      	movs	r3, #1
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2201      	movs	r2, #1
 8001380:	4985      	ldr	r1, [pc, #532]	@ (8001598 <main+0x330>)
 8001382:	4887      	ldr	r0, [pc, #540]	@ (80015a0 <main+0x338>)
 8001384:	f7ff fc06 	bl	8000b94 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&led_n2o, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8001388:	2305      	movs	r3, #5
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2302      	movs	r3, #2
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	2301      	movs	r3, #1
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2300      	movs	r3, #0
 8001396:	2201      	movs	r2, #1
 8001398:	497c      	ldr	r1, [pc, #496]	@ (800158c <main+0x324>)
 800139a:	4882      	ldr	r0, [pc, #520]	@ (80015a4 <main+0x33c>)
 800139c:	f7ff fbfa 	bl	8000b94 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&led_o2, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x06);
 80013a0:	2306      	movs	r3, #6
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2302      	movs	r3, #2
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2300      	movs	r3, #0
 80013ae:	2201      	movs	r2, #1
 80013b0:	4976      	ldr	r1, [pc, #472]	@ (800158c <main+0x324>)
 80013b2:	487d      	ldr	r0, [pc, #500]	@ (80015a8 <main+0x340>)
 80013b4:	f7ff fbee 	bl	8000b94 <GPIO_init>

	//-------------------- Control GPIO --------------------------

	//PF15-> Activate_sys SW
	GPIO_init(&activate_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 80013b8:	230f      	movs	r3, #15
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	2302      	movs	r3, #2
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	2200      	movs	r2, #0
 80013c8:	4978      	ldr	r1, [pc, #480]	@ (80015ac <main+0x344>)
 80013ca:	4879      	ldr	r0, [pc, #484]	@ (80015b0 <main+0x348>)
 80013cc:	f7ff fbe2 	bl	8000b94 <GPIO_init>
	//PF14-> Local_control SW
	GPIO_init(&local_control_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 80013d0:	230e      	movs	r3, #14
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2302      	movs	r3, #2
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	2301      	movs	r3, #1
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2300      	movs	r3, #0
 80013de:	2200      	movs	r2, #0
 80013e0:	4972      	ldr	r1, [pc, #456]	@ (80015ac <main+0x344>)
 80013e2:	4874      	ldr	r0, [pc, #464]	@ (80015b4 <main+0x34c>)
 80013e4:	f7ff fbd6 	bl	8000b94 <GPIO_init>
	//PF13-> N20_ISO SW
	GPIO_init(&N2O_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 80013e8:	230d      	movs	r3, #13
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	496c      	ldr	r1, [pc, #432]	@ (80015ac <main+0x344>)
 80013fa:	486f      	ldr	r0, [pc, #444]	@ (80015b8 <main+0x350>)
 80013fc:	f7ff fbca 	bl	8000b94 <GPIO_init>
	//PF12-> O2_ISO SW
	GPIO_init(&O2_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001400:	230c      	movs	r3, #12
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2302      	movs	r3, #2
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	2301      	movs	r3, #1
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	2200      	movs	r2, #0
 8001410:	4966      	ldr	r1, [pc, #408]	@ (80015ac <main+0x344>)
 8001412:	486a      	ldr	r0, [pc, #424]	@ (80015bc <main+0x354>)
 8001414:	f7ff fbbe 	bl	8000b94 <GPIO_init>
	//PF11-> IGNITION_ISO SW
	GPIO_init(&IGNITION_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001418:	230b      	movs	r3, #11
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2302      	movs	r3, #2
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2301      	movs	r3, #1
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	2200      	movs	r2, #0
 8001428:	4960      	ldr	r1, [pc, #384]	@ (80015ac <main+0x344>)
 800142a:	4865      	ldr	r0, [pc, #404]	@ (80015c0 <main+0x358>)
 800142c:	f7ff fbb2 	bl	8000b94 <GPIO_init>
	//PB0-> N2O_DEADMAN_SW
	GPIO_init(&N2O_DEAD_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001430:	2300      	movs	r3, #0
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2302      	movs	r3, #2
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	2301      	movs	r3, #1
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2300      	movs	r3, #0
 800143e:	2200      	movs	r2, #0
 8001440:	4960      	ldr	r1, [pc, #384]	@ (80015c4 <main+0x35c>)
 8001442:	4861      	ldr	r0, [pc, #388]	@ (80015c8 <main+0x360>)
 8001444:	f7ff fba6 	bl	8000b94 <GPIO_init>
	//PC5-> O2_DEADMAN_SW
	GPIO_init(&O2_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8001448:	2305      	movs	r3, #5
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2302      	movs	r3, #2
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	2301      	movs	r3, #1
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	494a      	ldr	r1, [pc, #296]	@ (8001584 <main+0x31c>)
 800145a:	485c      	ldr	r0, [pc, #368]	@ (80015cc <main+0x364>)
 800145c:	f7ff fb9a 	bl	8000b94 <GPIO_init>
	//PC4-> IGNITE_DEADMAN_SW
	GPIO_init(&IGNITE_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x04);
 8001460:	2304      	movs	r3, #4
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2302      	movs	r3, #2
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	2301      	movs	r3, #1
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	2200      	movs	r2, #0
 8001470:	4944      	ldr	r1, [pc, #272]	@ (8001584 <main+0x31c>)
 8001472:	4857      	ldr	r0, [pc, #348]	@ (80015d0 <main+0x368>)
 8001474:	f7ff fb8e 	bl	8000b94 <GPIO_init>

	//-------------------- IGNITE ACTUATION GPIO --------------------------
	GPIO_init(&Ignition1_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001478:	230f      	movs	r3, #15
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2302      	movs	r3, #2
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2201      	movs	r2, #1
 8001488:	4952      	ldr	r1, [pc, #328]	@ (80015d4 <main+0x36c>)
 800148a:	4853      	ldr	r0, [pc, #332]	@ (80015d8 <main+0x370>)
 800148c:	f7ff fb82 	bl	8000b94 <GPIO_init>
	GPIO_init(&Ignition1_OP ,GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8001490:	230e      	movs	r3, #14
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2302      	movs	r3, #2
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2301      	movs	r3, #1
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	2201      	movs	r2, #1
 80014a0:	494c      	ldr	r1, [pc, #304]	@ (80015d4 <main+0x36c>)
 80014a2:	484e      	ldr	r0, [pc, #312]	@ (80015dc <main+0x374>)
 80014a4:	f7ff fb76 	bl	8000b94 <GPIO_init>



	GPIO_init(&Ignition2_ARM, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x03);
 80014a8:	2303      	movs	r3, #3
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2302      	movs	r3, #2
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	2301      	movs	r3, #1
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	2201      	movs	r2, #1
 80014b8:	4934      	ldr	r1, [pc, #208]	@ (800158c <main+0x324>)
 80014ba:	4849      	ldr	r0, [pc, #292]	@ (80015e0 <main+0x378>)
 80014bc:	f7ff fb6a 	bl	8000b94 <GPIO_init>
	GPIO_init(&Ignition2_OP ,GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x02);
 80014c0:	2302      	movs	r3, #2
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2302      	movs	r3, #2
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2300      	movs	r3, #0
 80014ce:	2201      	movs	r2, #1
 80014d0:	492e      	ldr	r1, [pc, #184]	@ (800158c <main+0x324>)
 80014d2:	4844      	ldr	r0, [pc, #272]	@ (80015e4 <main+0x37c>)
 80014d4:	f7ff fb5e 	bl	8000b94 <GPIO_init>
	//Disarm Ignition circuit
	Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 80014d8:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <main+0x378>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <main+0x378>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f042 0208 	orr.w	r2, r2, #8
 80014e6:	615a      	str	r2, [r3, #20]
	Ignition2_OP.port->ODR |= (IGNITION2_OP);
 80014e8:	4b3e      	ldr	r3, [pc, #248]	@ (80015e4 <main+0x37c>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <main+0x37c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f042 0204 	orr.w	r2, r2, #4
 80014f6:	615a      	str	r2, [r3, #20]


	//-------------------- RELAY ACTUATION GPIO --------------------------
	//Relay 1 ->PURGE Relay
	GPIO_init(&CH1_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 80014f8:	230d      	movs	r3, #13
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2302      	movs	r3, #2
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2301      	movs	r3, #1
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2201      	movs	r2, #1
 8001508:	492e      	ldr	r1, [pc, #184]	@ (80015c4 <main+0x35c>)
 800150a:	4837      	ldr	r0, [pc, #220]	@ (80015e8 <main+0x380>)
 800150c:	f7ff fb42 	bl	8000b94 <GPIO_init>
	GPIO_init(&CH1_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0E);
 8001510:	230e      	movs	r3, #14
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2302      	movs	r3, #2
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2301      	movs	r3, #1
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2201      	movs	r2, #1
 8001520:	4928      	ldr	r1, [pc, #160]	@ (80015c4 <main+0x35c>)
 8001522:	4832      	ldr	r0, [pc, #200]	@ (80015ec <main+0x384>)
 8001524:	f7ff fb36 	bl	8000b94 <GPIO_init>
	GPIO_init(&CH1_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0B);
 8001528:	230b      	movs	r3, #11
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2302      	movs	r3, #2
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2301      	movs	r3, #1
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	2200      	movs	r2, #0
 8001538:	4922      	ldr	r1, [pc, #136]	@ (80015c4 <main+0x35c>)
 800153a:	482d      	ldr	r0, [pc, #180]	@ (80015f0 <main+0x388>)
 800153c:	f7ff fb2a 	bl	8000b94 <GPIO_init>

	//Relay 2 -> O2 Relay
	GPIO_init(&CH2_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001540:	230a      	movs	r3, #10
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2302      	movs	r3, #2
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2301      	movs	r3, #1
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2201      	movs	r2, #1
 8001550:	491c      	ldr	r1, [pc, #112]	@ (80015c4 <main+0x35c>)
 8001552:	4828      	ldr	r0, [pc, #160]	@ (80015f4 <main+0x38c>)
 8001554:	f7ff fb1e 	bl	8000b94 <GPIO_init>
	GPIO_init(&CH2_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001558:	230c      	movs	r3, #12
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	2302      	movs	r3, #2
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2301      	movs	r3, #1
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2201      	movs	r2, #1
 8001568:	e046      	b.n	80015f8 <main+0x390>
 800156a:	bf00      	nop
 800156c:	40020000 	.word	0x40020000
 8001570:	20000488 	.word	0x20000488
 8001574:	200004a0 	.word	0x200004a0
 8001578:	200004b8 	.word	0x200004b8
 800157c:	200004d0 	.word	0x200004d0
 8001580:	200004e8 	.word	0x200004e8
 8001584:	40020800 	.word	0x40020800
 8001588:	20000500 	.word	0x20000500
 800158c:	40021800 	.word	0x40021800
 8001590:	200003f8 	.word	0x200003f8
 8001594:	20000410 	.word	0x20000410
 8001598:	40021000 	.word	0x40021000
 800159c:	20000428 	.word	0x20000428
 80015a0:	20000440 	.word	0x20000440
 80015a4:	20000458 	.word	0x20000458
 80015a8:	20000470 	.word	0x20000470
 80015ac:	40021400 	.word	0x40021400
 80015b0:	20000518 	.word	0x20000518
 80015b4:	20000530 	.word	0x20000530
 80015b8:	20000560 	.word	0x20000560
 80015bc:	20000578 	.word	0x20000578
 80015c0:	20000590 	.word	0x20000590
 80015c4:	40020400 	.word	0x40020400
 80015c8:	200005a8 	.word	0x200005a8
 80015cc:	200005c0 	.word	0x200005c0
 80015d0:	200005d8 	.word	0x200005d8
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	20000398 	.word	0x20000398
 80015dc:	200003b0 	.word	0x200003b0
 80015e0:	200003c8 	.word	0x200003c8
 80015e4:	200003e0 	.word	0x200003e0
 80015e8:	20000278 	.word	0x20000278
 80015ec:	20000290 	.word	0x20000290
 80015f0:	200002a8 	.word	0x200002a8
 80015f4:	200002c0 	.word	0x200002c0
 80015f8:	499f      	ldr	r1, [pc, #636]	@ (8001878 <main+0x610>)
 80015fa:	48a0      	ldr	r0, [pc, #640]	@ (800187c <main+0x614>)
 80015fc:	f7ff faca 	bl	8000b94 <GPIO_init>
	GPIO_init(&CH2_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001600:	230f      	movs	r3, #15
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	2302      	movs	r3, #2
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2301      	movs	r3, #1
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	2200      	movs	r2, #0
 8001610:	4999      	ldr	r1, [pc, #612]	@ (8001878 <main+0x610>)
 8001612:	489b      	ldr	r0, [pc, #620]	@ (8001880 <main+0x618>)
 8001614:	f7ff fabe 	bl	8000b94 <GPIO_init>

	//Relay 3 -> N20 Relay
	GPIO_init(&CH3_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001618:	230b      	movs	r3, #11
 800161a:	9302      	str	r3, [sp, #8]
 800161c:	2302      	movs	r3, #2
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2301      	movs	r3, #1
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	2201      	movs	r2, #1
 8001628:	4996      	ldr	r1, [pc, #600]	@ (8001884 <main+0x61c>)
 800162a:	4897      	ldr	r0, [pc, #604]	@ (8001888 <main+0x620>)
 800162c:	f7ff fab2 	bl	8000b94 <GPIO_init>
	GPIO_init(&CH3_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001630:	230c      	movs	r3, #12
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2302      	movs	r3, #2
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2301      	movs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	2201      	movs	r2, #1
 8001640:	4990      	ldr	r1, [pc, #576]	@ (8001884 <main+0x61c>)
 8001642:	4892      	ldr	r0, [pc, #584]	@ (800188c <main+0x624>)
 8001644:	f7ff faa6 	bl	8000b94 <GPIO_init>
	GPIO_init(&CH3_MON, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001648:	2308      	movs	r3, #8
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2302      	movs	r3, #2
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2301      	movs	r3, #1
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	2201      	movs	r2, #1
 8001658:	498a      	ldr	r1, [pc, #552]	@ (8001884 <main+0x61c>)
 800165a:	488d      	ldr	r0, [pc, #564]	@ (8001890 <main+0x628>)
 800165c:	f7ff fa9a 	bl	8000b94 <GPIO_init>

	//Relay 4 //for future expansion
	 GPIO_init(&CH4_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 8001660:	2309      	movs	r3, #9
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2302      	movs	r3, #2
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2301      	movs	r3, #1
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2201      	movs	r2, #1
 8001670:	4984      	ldr	r1, [pc, #528]	@ (8001884 <main+0x61c>)
 8001672:	4888      	ldr	r0, [pc, #544]	@ (8001894 <main+0x62c>)
 8001674:	f7ff fa8e 	bl	8000b94 <GPIO_init>
	 GPIO_init(&CH4_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001678:	230a      	movs	r3, #10
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	2302      	movs	r3, #2
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2301      	movs	r3, #1
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	2201      	movs	r2, #1
 8001688:	497e      	ldr	r1, [pc, #504]	@ (8001884 <main+0x61c>)
 800168a:	4883      	ldr	r0, [pc, #524]	@ (8001898 <main+0x630>)
 800168c:	f7ff fa82 	bl	8000b94 <GPIO_init>
	 GPIO_init(&CH4_MON, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001690:	230d      	movs	r3, #13
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2302      	movs	r3, #2
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2301      	movs	r3, #1
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	4978      	ldr	r1, [pc, #480]	@ (8001884 <main+0x61c>)
 80016a2:	487e      	ldr	r0, [pc, #504]	@ (800189c <main+0x634>)
 80016a4:	f7ff fa76 	bl	8000b94 <GPIO_init>



	 GPIO_init(&RF_SW, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0A);
 80016a8:	230a      	movs	r3, #10
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2201      	movs	r2, #1
 80016b8:	4979      	ldr	r1, [pc, #484]	@ (80018a0 <main+0x638>)
 80016ba:	487a      	ldr	r0, [pc, #488]	@ (80018a4 <main+0x63c>)
 80016bc:	f7ff fa6a 	bl	8000b94 <GPIO_init>

	 RF_SW.port->ODR |= (GPIO_ODR_OD10);
 80016c0:	4b78      	ldr	r3, [pc, #480]	@ (80018a4 <main+0x63c>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	4b77      	ldr	r3, [pc, #476]	@ (80018a4 <main+0x63c>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016ce:	615a      	str	r2, [r3, #20]

	 //Ensure CH1-4 is turned off, as its currently unused
	 CH1_ARM.port->ODR &= ~(CH1_Arm);
 80016d0:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <main+0x640>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <main+0x640>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80016de:	615a      	str	r2, [r3, #20]
	 CH1_OP.port->ODR &= ~(CH1_Operate);
 80016e0:	4b72      	ldr	r3, [pc, #456]	@ (80018ac <main+0x644>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	4b71      	ldr	r3, [pc, #452]	@ (80018ac <main+0x644>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80016ee:	615a      	str	r2, [r3, #20]
	 CH2_ARM.port->ODR &= ~(CH2_Arm);
 80016f0:	4b62      	ldr	r3, [pc, #392]	@ (800187c <main+0x614>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	4b61      	ldr	r3, [pc, #388]	@ (800187c <main+0x614>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016fe:	615a      	str	r2, [r3, #20]
	 CH2_OP.port->ODR &= ~(CH2_Operate);
 8001700:	4b6b      	ldr	r3, [pc, #428]	@ (80018b0 <main+0x648>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	4b6a      	ldr	r3, [pc, #424]	@ (80018b0 <main+0x648>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800170e:	615a      	str	r2, [r3, #20]
	 CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001710:	4b5e      	ldr	r3, [pc, #376]	@ (800188c <main+0x624>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	4b5d      	ldr	r3, [pc, #372]	@ (800188c <main+0x624>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800171e:	615a      	str	r2, [r3, #20]
	 CH3_OP.port->ODR &= ~(CH3_Operate);
 8001720:	4b59      	ldr	r3, [pc, #356]	@ (8001888 <main+0x620>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <main+0x620>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172e:	615a      	str	r2, [r3, #20]
	 CH4_ARM.port->ODR &= ~(CH4_Arm);
 8001730:	4b59      	ldr	r3, [pc, #356]	@ (8001898 <main+0x630>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <main+0x630>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800173e:	615a      	str	r2, [r3, #20]
	 CH4_OP.port->ODR &= ~(CH4_Operate);
 8001740:	4b54      	ldr	r3, [pc, #336]	@ (8001894 <main+0x62c>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <main+0x62c>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800174e:	615a      	str	r2, [r3, #20]


	//INT_pin_input = (GPIOD->IDR & GPIO_IDR_IDR_7); //should be a non 0 value here!

	//Make sure interrupts are configured BEFORE interupts
	GPIO_init(&LoRa_Rx_int, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x07);
 8001750:	2307      	movs	r3, #7
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2300      	movs	r3, #0
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2301      	movs	r3, #1
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	2200      	movs	r2, #0
 8001760:	4948      	ldr	r1, [pc, #288]	@ (8001884 <main+0x61c>)
 8001762:	4854      	ldr	r0, [pc, #336]	@ (80018b4 <main+0x64c>)
 8001764:	f7ff fa16 	bl	8000b94 <GPIO_init>
	//NVIC_DisableIRQ(EXTI9_5_IRQn); //easier than changing the function GPIO_init_interrupt
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <main+0x650>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <main+0x650>)
 800176e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001772:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PD;
 8001774:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <main+0x650>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <main+0x650>)
 800177a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800177e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR &= ~EXTI_FTSR_TR7_Msk;
 8001780:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <main+0x654>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a4d      	ldr	r2, [pc, #308]	@ (80018bc <main+0x654>)
 8001786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800178a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_TR7;
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <main+0x654>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a4a      	ldr	r2, [pc, #296]	@ (80018bc <main+0x654>)
 8001792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001796:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8001798:	4b48      	ldr	r3, [pc, #288]	@ (80018bc <main+0x654>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <main+0x654>)
 800179e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017a2:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR7;
 80017a4:	4b45      	ldr	r3, [pc, #276]	@ (80018bc <main+0x654>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a44      	ldr	r2, [pc, #272]	@ (80018bc <main+0x654>)
 80017aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ae:	6093      	str	r3, [r2, #8]
	EXTI->IMR &= ~EXTI_IMR_IM7;
 80017b0:	4b42      	ldr	r3, [pc, #264]	@ (80018bc <main+0x654>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a41      	ldr	r2, [pc, #260]	@ (80018bc <main+0x654>)
 80017b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017ba:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM7;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <main+0x654>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a3e      	ldr	r2, [pc, #248]	@ (80018bc <main+0x654>)
 80017c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c6:	6013      	str	r3, [r2, #0]

	//here is channel for loRa PD7
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c8:	2017      	movs	r0, #23
 80017ca:	f7ff fce1 	bl	8001190 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn,9);
 80017ce:	2109      	movs	r1, #9
 80017d0:	2017      	movs	r0, #23
 80017d2:	f7ff fd1f 	bl	8001214 <__NVIC_SetPriority>
	//re-enable to turn on LoRa RX interrupt!

	SX1272_init(&lora,"GSE_LORA", LORA_PORT, LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 80017d6:	2301      	movs	r3, #1
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2309      	movs	r3, #9
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2302      	movs	r3, #2
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017e6:	4a2e      	ldr	r2, [pc, #184]	@ (80018a0 <main+0x638>)
 80017e8:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <main+0x658>)
 80017ea:	4836      	ldr	r0, [pc, #216]	@ (80018c4 <main+0x65c>)
 80017ec:	f7ff fa68 	bl	8000cc0 <SX1272_init>
	SX1272_startReceive(&lora);
 80017f0:	4834      	ldr	r0, [pc, #208]	@ (80018c4 <main+0x65c>)
 80017f2:	f7ff fbe6 	bl	8000fc2 <SX1272_startReceive>
	SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
 80017f6:	2140      	movs	r1, #64	@ 0x40
 80017f8:	4832      	ldr	r0, [pc, #200]	@ (80018c4 <main+0x65c>)
 80017fa:	f7ff fc42 	bl	8001082 <SX1272_clearIRQ>

	//Ensure SMD LEDs are turned OFF on bootup
	LED_1.port -> ODR &= ~LED_1_PWR;
 80017fe:	4b32      	ldr	r3, [pc, #200]	@ (80018c8 <main+0x660>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <main+0x660>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800180c:	615a      	str	r2, [r3, #20]
	LED_2.port -> ODR &= ~LED_2_PWR;
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <main+0x664>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <main+0x664>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800181c:	615a      	str	r2, [r3, #20]
	LED_3.port -> ODR &= ~LED_3_PWR;
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <main+0x668>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <main+0x668>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800182c:	615a      	str	r2, [r3, #20]
	LED_4.port -> ODR &= ~LED_4_PWR;
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <main+0x66c>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <main+0x66c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800183c:	615a      	str	r2, [r3, #20]
	LED_5.port -> ODR &= ~LED_5_PWR;
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <main+0x670>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <main+0x670>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800184c:	615a      	str	r2, [r3, #20]
	LED_6.port -> ODR &= ~LED_6_PWR;
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <main+0x674>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <main+0x674>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800185c:	615a      	str	r2, [r3, #20]

	CH1_ARM.port->ODR &= ~(CH1_Arm);
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <main+0x640>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <main+0x640>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800186c:	615a      	str	r2, [r3, #20]
	CH1_OP.port->ODR &= ~(CH1_Operate);
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <main+0x644>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	e034      	b.n	80018e0 <main+0x678>
 8001876:	bf00      	nop
 8001878:	40020400 	.word	0x40020400
 800187c:	200002d8 	.word	0x200002d8
 8001880:	200002f0 	.word	0x200002f0
 8001884:	40020c00 	.word	0x40020c00
 8001888:	20000308 	.word	0x20000308
 800188c:	20000320 	.word	0x20000320
 8001890:	20000338 	.word	0x20000338
 8001894:	20000350 	.word	0x20000350
 8001898:	20000368 	.word	0x20000368
 800189c:	20000380 	.word	0x20000380
 80018a0:	40021800 	.word	0x40021800
 80018a4:	200005f0 	.word	0x200005f0
 80018a8:	20000290 	.word	0x20000290
 80018ac:	20000278 	.word	0x20000278
 80018b0:	200002c0 	.word	0x200002c0
 80018b4:	20000260 	.word	0x20000260
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40013c00 	.word	0x40013c00
 80018c0:	08006760 	.word	0x08006760
 80018c4:	20000190 	.word	0x20000190
 80018c8:	20000488 	.word	0x20000488
 80018cc:	200004a0 	.word	0x200004a0
 80018d0:	200004b8 	.word	0x200004b8
 80018d4:	200004d0 	.word	0x200004d0
 80018d8:	200004e8 	.word	0x200004e8
 80018dc:	20000500 	.word	0x20000500
 80018e0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a9c <main+0x834>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018e8:	615a      	str	r2, [r3, #20]


	CH2_ARM.port->ODR &= ~(CH2_Arm);
 80018ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa0 <main+0x838>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa0 <main+0x838>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018f8:	615a      	str	r2, [r3, #20]
	CH2_OP.port->ODR &= ~(CH2_Operate);
 80018fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <main+0x83c>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	4b68      	ldr	r3, [pc, #416]	@ (8001aa4 <main+0x83c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001908:	615a      	str	r2, [r3, #20]

	CH3_ARM.port->ODR &= ~(CH3_Arm);
 800190a:	4b67      	ldr	r3, [pc, #412]	@ (8001aa8 <main+0x840>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	4b65      	ldr	r3, [pc, #404]	@ (8001aa8 <main+0x840>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001918:	615a      	str	r2, [r3, #20]
	CH3_OP.port->ODR &= ~(CH3_Operate);
 800191a:	4b64      	ldr	r3, [pc, #400]	@ (8001aac <main+0x844>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	4b62      	ldr	r3, [pc, #392]	@ (8001aac <main+0x844>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001928:	615a      	str	r2, [r3, #20]

	CH4_ARM.port->ODR &= ~(CH4_Arm);
 800192a:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <main+0x848>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <main+0x848>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001938:	615a      	str	r2, [r3, #20]
	CH4_OP.port->ODR &= ~(CH4_Operate);
 800193a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab4 <main+0x84c>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab4 <main+0x84c>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001948:	615a      	str	r2, [r3, #20]

	state = 0x00;
 800194a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab8 <main+0x850>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
	}
	*/



	switch_case_state = 0x0;
 8001950:	4b5a      	ldr	r3, [pc, #360]	@ (8001abc <main+0x854>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
//Resetting Indentation from the start, cos I CBF changing the entire code - JC 0503025
while (1) {

	switch(switch_case_state){
 8001956:	4b59      	ldr	r3, [pc, #356]	@ (8001abc <main+0x854>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	dc26      	bgt.n	80019ac <main+0x744>
 800195e:	2b00      	cmp	r3, #0
 8001960:	dbf9      	blt.n	8001956 <main+0x6ee>
 8001962:	2b0f      	cmp	r3, #15
 8001964:	d8f7      	bhi.n	8001956 <main+0x6ee>
 8001966:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <main+0x704>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	080019b5 	.word	0x080019b5
 8001970:	080022f7 	.word	0x080022f7
 8001974:	080023c9 	.word	0x080023c9
 8001978:	08002437 	.word	0x08002437
 800197c:	0800245f 	.word	0x0800245f
 8001980:	08001957 	.word	0x08001957
 8001984:	08001957 	.word	0x08001957
 8001988:	080028e7 	.word	0x080028e7
 800198c:	08002a45 	.word	0x08002a45
 8001990:	08002b33 	.word	0x08002b33
 8001994:	08002cad 	.word	0x08002cad
 8001998:	08001957 	.word	0x08001957
 800199c:	08001957 	.word	0x08001957
 80019a0:	08001957 	.word	0x08001957
 80019a4:	08001957 	.word	0x08001957
 80019a8:	08002649 	.word	0x08002649
 80019ac:	2b80      	cmp	r3, #128	@ 0x80
 80019ae:	f001 8201 	beq.w	8002db4 <main+0x1b4c>
 80019b2:	e7d0      	b.n	8001956 <main+0x6ee>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80019b4:	b662      	cpsie	i
}
 80019b6:	bf00      	nop
	case 0:

		__enable_irq();


		LED_1.port -> ODR |= LED_1_PWR;
 80019b8:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <main+0x858>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	4b40      	ldr	r3, [pc, #256]	@ (8001ac0 <main+0x858>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019c6:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 80019c8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <main+0x85c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <main+0x85c>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019d6:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <main+0x860>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <main+0x860>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019e6:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 80019e8:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <main+0x864>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b37      	ldr	r3, [pc, #220]	@ (8001acc <main+0x864>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f6:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 80019f8:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <main+0x868>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <main+0x868>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a06:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <main+0x86c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <main+0x86c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a16:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001a18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad8 <main+0x870>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <main+0x7be>
 8001a20:	f001 fde0 	bl	80035e4 <RX_Receive>
 8001a24:	e000      	b.n	8001a28 <main+0x7c0>
 8001a26:	bf00      	nop

//Extract Thermocouple Temp
		//To Do - Issues with Thermocouples ATM with accurate readings

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <main+0x870>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <main+0x7ce>
 8001a30:	f001 fdd8 	bl	80035e4 <RX_Receive>
 8001a34:	e000      	b.n	8001a38 <main+0x7d0>
 8001a36:	bf00      	nop
		}

		*/

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <main+0x870>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <main+0x7de>
 8001a40:	f001 fdd0 	bl	80035e4 <RX_Receive>
 8001a44:	e000      	b.n	8001a48 <main+0x7e0>
 8001a46:	bf00      	nop
//Get Pressure Readings from Transducers

		//Done with HAL libs atm - JC 29/04/2025

		uint8_t spi_buf[2];
		spi_buf[0] = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	753b      	strb	r3, [r7, #20]
		spi_buf[1] = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	757b      	strb	r3, [r7, #21]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2140      	movs	r1, #64	@ 0x40
 8001a54:	4821      	ldr	r0, [pc, #132]	@ (8001adc <main+0x874>)
 8001a56:	f002 fe19 	bl	800468c <HAL_GPIO_WritePin>
		ret = HAL_SPI_TransmitReceive(&hspi5,(uint8_t *)&ADC_CH1,  (uint8_t *)spi_buf, 1, 100);
 8001a5a:	f107 0214 	add.w	r2, r7, #20
 8001a5e:	2364      	movs	r3, #100	@ 0x64
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	491e      	ldr	r1, [pc, #120]	@ (8001ae0 <main+0x878>)
 8001a66:	481f      	ldr	r0, [pc, #124]	@ (8001ae4 <main+0x87c>)
 8001a68:	f004 fbbd 	bl	80061e6 <HAL_SPI_TransmitReceive>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	77bb      	strb	r3, [r7, #30]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2140      	movs	r1, #64	@ 0x40
 8001a74:	4819      	ldr	r0, [pc, #100]	@ (8001adc <main+0x874>)
 8001a76:	f002 fe09 	bl	800468c <HAL_GPIO_WritePin>
		if (ret != HAL_OK){
 8001a7a:	7fbb      	ldrb	r3, [r7, #30]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03b      	beq.n	8001af8 <main+0x890>
			TRANSDUCER_1.comms_ok = false;
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <main+0x880>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_2.comms_ok = false;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <main+0x884>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_3.comms_ok = false;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <main+0x888>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_4.comms_ok = false;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <main+0x88c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e08b      	b.n	8001bb2 <main+0x94a>
 8001a9a:	bf00      	nop
 8001a9c:	20000278 	.word	0x20000278
 8001aa0:	200002d8 	.word	0x200002d8
 8001aa4:	200002c0 	.word	0x200002c0
 8001aa8:	20000320 	.word	0x20000320
 8001aac:	20000308 	.word	0x20000308
 8001ab0:	20000368 	.word	0x20000368
 8001ab4:	20000350 	.word	0x20000350
 8001ab8:	20000161 	.word	0x20000161
 8001abc:	20000160 	.word	0x20000160
 8001ac0:	20000488 	.word	0x20000488
 8001ac4:	200004a0 	.word	0x200004a0
 8001ac8:	200004b8 	.word	0x200004b8
 8001acc:	200004d0 	.word	0x200004d0
 8001ad0:	200004e8 	.word	0x200004e8
 8001ad4:	20000500 	.word	0x20000500
 8001ad8:	2000016a 	.word	0x2000016a
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	0800678a 	.word	0x0800678a
 8001ae4:	200000b0 	.word	0x200000b0
 8001ae8:	20000608 	.word	0x20000608
 8001aec:	20000614 	.word	0x20000614
 8001af0:	20000620 	.word	0x20000620
 8001af4:	2000062c 	.word	0x2000062c
		}
		else {
			TRANSDUCER_1.comms_ok = true;
 8001af8:	4bb9      	ldr	r3, [pc, #740]	@ (8001de0 <main+0xb78>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_2.comms_ok = true;
 8001afe:	4bb9      	ldr	r3, [pc, #740]	@ (8001de4 <main+0xb7c>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_3.comms_ok = true;
 8001b04:	4bb8      	ldr	r3, [pc, #736]	@ (8001de8 <main+0xb80>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_4.comms_ok = true;
 8001b0a:	4bb8      	ldr	r3, [pc, #736]	@ (8001dec <main+0xb84>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]


			TRANSDUCER_1.raw_data[0] = spi_buf[0];
 8001b10:	7d3a      	ldrb	r2, [r7, #20]
 8001b12:	4bb3      	ldr	r3, [pc, #716]	@ (8001de0 <main+0xb78>)
 8001b14:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_1.raw_data[1] = spi_buf[1];
 8001b16:	7d7a      	ldrb	r2, [r7, #21]
 8001b18:	4bb1      	ldr	r3, [pc, #708]	@ (8001de0 <main+0xb78>)
 8001b1a:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2140      	movs	r1, #64	@ 0x40
 8001b20:	48b3      	ldr	r0, [pc, #716]	@ (8001df0 <main+0xb88>)
 8001b22:	f002 fdb3 	bl	800468c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH2, (uint8_t *)spi_buf, 1, 100);
 8001b26:	f107 0214 	add.w	r2, r7, #20
 8001b2a:	2364      	movs	r3, #100	@ 0x64
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	49b0      	ldr	r1, [pc, #704]	@ (8001df4 <main+0xb8c>)
 8001b32:	48b1      	ldr	r0, [pc, #708]	@ (8001df8 <main+0xb90>)
 8001b34:	f004 fb57 	bl	80061e6 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	48ac      	ldr	r0, [pc, #688]	@ (8001df0 <main+0xb88>)
 8001b3e:	f002 fda5 	bl	800468c <HAL_GPIO_WritePin>

			TRANSDUCER_2.raw_data[0] = spi_buf[0];
 8001b42:	7d3a      	ldrb	r2, [r7, #20]
 8001b44:	4ba7      	ldr	r3, [pc, #668]	@ (8001de4 <main+0xb7c>)
 8001b46:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_2.raw_data[1] = spi_buf[1];
 8001b48:	7d7a      	ldrb	r2, [r7, #21]
 8001b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8001de4 <main+0xb7c>)
 8001b4c:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2140      	movs	r1, #64	@ 0x40
 8001b52:	48a7      	ldr	r0, [pc, #668]	@ (8001df0 <main+0xb88>)
 8001b54:	f002 fd9a 	bl	800468c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH3, (uint8_t *)spi_buf, 1, 100);
 8001b58:	f107 0214 	add.w	r2, r7, #20
 8001b5c:	2364      	movs	r3, #100	@ 0x64
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	49a6      	ldr	r1, [pc, #664]	@ (8001dfc <main+0xb94>)
 8001b64:	48a4      	ldr	r0, [pc, #656]	@ (8001df8 <main+0xb90>)
 8001b66:	f004 fb3e 	bl	80061e6 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2140      	movs	r1, #64	@ 0x40
 8001b6e:	48a0      	ldr	r0, [pc, #640]	@ (8001df0 <main+0xb88>)
 8001b70:	f002 fd8c 	bl	800468c <HAL_GPIO_WritePin>

			TRANSDUCER_3.raw_data[0] = spi_buf[0];
 8001b74:	7d3a      	ldrb	r2, [r7, #20]
 8001b76:	4b9c      	ldr	r3, [pc, #624]	@ (8001de8 <main+0xb80>)
 8001b78:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_3.raw_data[1] = spi_buf[1];
 8001b7a:	7d7a      	ldrb	r2, [r7, #21]
 8001b7c:	4b9a      	ldr	r3, [pc, #616]	@ (8001de8 <main+0xb80>)
 8001b7e:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2140      	movs	r1, #64	@ 0x40
 8001b84:	489a      	ldr	r0, [pc, #616]	@ (8001df0 <main+0xb88>)
 8001b86:	f002 fd81 	bl	800468c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH4, (uint8_t *)spi_buf, 1, 100);
 8001b8a:	f107 0214 	add.w	r2, r7, #20
 8001b8e:	2364      	movs	r3, #100	@ 0x64
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	499a      	ldr	r1, [pc, #616]	@ (8001e00 <main+0xb98>)
 8001b96:	4898      	ldr	r0, [pc, #608]	@ (8001df8 <main+0xb90>)
 8001b98:	f004 fb25 	bl	80061e6 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2140      	movs	r1, #64	@ 0x40
 8001ba0:	4893      	ldr	r0, [pc, #588]	@ (8001df0 <main+0xb88>)
 8001ba2:	f002 fd73 	bl	800468c <HAL_GPIO_WritePin>

			TRANSDUCER_4.raw_data[0] = spi_buf[0];
 8001ba6:	7d3a      	ldrb	r2, [r7, #20]
 8001ba8:	4b90      	ldr	r3, [pc, #576]	@ (8001dec <main+0xb84>)
 8001baa:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_4.raw_data[1] = spi_buf[1];
 8001bac:	7d7a      	ldrb	r2, [r7, #21]
 8001bae:	4b8f      	ldr	r3, [pc, #572]	@ (8001dec <main+0xb84>)
 8001bb0:	709a      	strb	r2, [r3, #2]

		}

		//Translate 12bit value into relative voltage (given Vref is 5V)

		TRANSDUCER_1.read_value_voltage = ((float)(TRANSDUCER_1.raw_data[1] << 8 |  TRANSDUCER_1.raw_data[0] )/ 4095) * 5 + 0.00394; //Offset as per dataset found
 8001bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8001de0 <main+0xb78>)
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4a89      	ldr	r2, [pc, #548]	@ (8001de0 <main+0xb78>)
 8001bba:	7852      	ldrb	r2, [r2, #1]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc6:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8001e04 <main+0xb9c>
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	ee17 0a90 	vmov	r0, s15
 8001bda:	f7fe fc6d 	bl	80004b8 <__aeabi_f2d>
 8001bde:	a37e      	add	r3, pc, #504	@ (adr r3, 8001dd8 <main+0xb70>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fb0a 	bl	80001fc <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe fcba 	bl	8000568 <__aeabi_d2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	@ (8001de0 <main+0xb78>)
 8001bf8:	6053      	str	r3, [r2, #4]
		TRANSDUCER_1.read_value_voltage = TRANSDUCER_1.read_value_voltage *2; //Multiplied by 2 cos, idk, first time through correct sample is taken, every sample after that is half what it should be - find the problem? No, find a workaround? absolutely
 8001bfa:	4b79      	ldr	r3, [pc, #484]	@ (8001de0 <main+0xb78>)
 8001bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c04:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <main+0xb78>)
 8001c06:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_2.read_value_voltage = ((float)(TRANSDUCER_2.raw_data[1] << 8 |  TRANSDUCER_2.raw_data[0] )/ 4095) * 5 + 0.00394;
 8001c0a:	4b76      	ldr	r3, [pc, #472]	@ (8001de4 <main+0xb7c>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4a74      	ldr	r2, [pc, #464]	@ (8001de4 <main+0xb7c>)
 8001c12:	7852      	ldrb	r2, [r2, #1]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1e:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001e04 <main+0xb9c>
 8001c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c26:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2e:	ee17 0a90 	vmov	r0, s15
 8001c32:	f7fe fc41 	bl	80004b8 <__aeabi_f2d>
 8001c36:	a368      	add	r3, pc, #416	@ (adr r3, 8001dd8 <main+0xb70>)
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe fade 	bl	80001fc <__adddf3>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe fc8e 	bl	8000568 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <main+0xb7c>)
 8001c50:	6053      	str	r3, [r2, #4]
		TRANSDUCER_2.read_value_voltage = TRANSDUCER_2.read_value_voltage *2;
 8001c52:	4b64      	ldr	r3, [pc, #400]	@ (8001de4 <main+0xb7c>)
 8001c54:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c5c:	4b61      	ldr	r3, [pc, #388]	@ (8001de4 <main+0xb7c>)
 8001c5e:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_3.read_value_voltage = ((float)(TRANSDUCER_3.raw_data[1] << 8 |  TRANSDUCER_3.raw_data[0] )/ 4095) * 5 + 0.00394;
 8001c62:	4b61      	ldr	r3, [pc, #388]	@ (8001de8 <main+0xb80>)
 8001c64:	789b      	ldrb	r3, [r3, #2]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	4a5f      	ldr	r2, [pc, #380]	@ (8001de8 <main+0xb80>)
 8001c6a:	7852      	ldrb	r2, [r2, #1]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c76:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8001e04 <main+0xb9c>
 8001c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc15 	bl	80004b8 <__aeabi_f2d>
 8001c8e:	a352      	add	r3, pc, #328	@ (adr r3, 8001dd8 <main+0xb70>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fab2 	bl	80001fc <__adddf3>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe fc62 	bl	8000568 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a50      	ldr	r2, [pc, #320]	@ (8001de8 <main+0xb80>)
 8001ca8:	6053      	str	r3, [r2, #4]
		TRANSDUCER_3.read_value_voltage = TRANSDUCER_3.read_value_voltage *2;
 8001caa:	4b4f      	ldr	r3, [pc, #316]	@ (8001de8 <main+0xb80>)
 8001cac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8001de8 <main+0xb80>)
 8001cb6:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_4.read_value_voltage = ((float)(TRANSDUCER_4.raw_data[1] << 8 |  TRANSDUCER_4.raw_data[0] )/ 4095) * 5 + 0.00394;
 8001cba:	4b4c      	ldr	r3, [pc, #304]	@ (8001dec <main+0xb84>)
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8001dec <main+0xb84>)
 8001cc2:	7852      	ldrb	r2, [r2, #1]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cce:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001e04 <main+0xb9c>
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	ee17 0a90 	vmov	r0, s15
 8001ce2:	f7fe fbe9 	bl	80004b8 <__aeabi_f2d>
 8001ce6:	a33c      	add	r3, pc, #240	@ (adr r3, 8001dd8 <main+0xb70>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fa86 	bl	80001fc <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe fc36 	bl	8000568 <__aeabi_d2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001dec <main+0xb84>)
 8001d00:	6053      	str	r3, [r2, #4]
		TRANSDUCER_4.read_value_voltage = TRANSDUCER_4.read_value_voltage *2;
 8001d02:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <main+0xb84>)
 8001d04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d0c:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <main+0xb84>)
 8001d0e:	edc3 7a01 	vstr	s15, [r3, #4]

		TRANSDUCER_1.read_value_bar = TRANSDUCER_1.read_value_voltage * 60; //(voltage_read / 5) * 300 (bar) = pressure, 300/5 is 60, therefore (voltage_read) * 60 = pressure (for a 0-300bar range)
 8001d12:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <main+0xb78>)
 8001d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d18:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001e08 <main+0xba0>
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <main+0xb78>)
 8001d22:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_2.read_value_bar = TRANSDUCER_2.read_value_voltage * 60;
 8001d26:	4b2f      	ldr	r3, [pc, #188]	@ (8001de4 <main+0xb7c>)
 8001d28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d2c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001e08 <main+0xba0>
 8001d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d34:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <main+0xb7c>)
 8001d36:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_3.read_value_bar = TRANSDUCER_3.read_value_voltage * 60;
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <main+0xb80>)
 8001d3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d40:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001e08 <main+0xba0>
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <main+0xb80>)
 8001d4a:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_4.read_value_bar = TRANSDUCER_4.read_value_voltage * 60;
 8001d4e:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <main+0xb84>)
 8001d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d54:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001e08 <main+0xba0>
 8001d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5c:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <main+0xb84>)
 8001d5e:	edc3 7a02 	vstr	s15, [r3, #8]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{}
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <main+0xba4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <main+0xb06>
 8001d6a:	f001 fc3b 	bl	80035e4 <RX_Receive>

		//Check Transducer pressures, if pressures too high go directly to PURGE state
		//Error flags are specifc per Transducer
		if(TRANSDUCER_1.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<7);}
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <main+0xb78>)
 8001d70:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d74:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <main+0xba8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	db0a      	blt.n	8001da0 <main+0xb38>
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <main+0xbac>)
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <main+0xbb0>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <main+0xbb0>)
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e0c6      	b.n	8001f2e <main+0xcc6>
		else if(TRANSDUCER_2.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<6); }
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <main+0xb7c>)
 8001da2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <main+0xba8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	db2f      	blt.n	8001e1c <main+0xbb4>
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <main+0xbac>)
 8001dbe:	220a      	movs	r2, #10
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <main+0xbb0>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <main+0xbb0>)
 8001dce:	801a      	strh	r2, [r3, #0]
 8001dd0:	e0ad      	b.n	8001f2e <main+0xcc6>
 8001dd2:	bf00      	nop
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	b256ffc1 	.word	0xb256ffc1
 8001ddc:	3f702363 	.word	0x3f702363
 8001de0:	20000608 	.word	0x20000608
 8001de4:	20000614 	.word	0x20000614
 8001de8:	20000620 	.word	0x20000620
 8001dec:	2000062c 	.word	0x2000062c
 8001df0:	40021400 	.word	0x40021400
 8001df4:	0800678c 	.word	0x0800678c
 8001df8:	200000b0 	.word	0x200000b0
 8001dfc:	0800678e 	.word	0x0800678e
 8001e00:	08006790 	.word	0x08006790
 8001e04:	457ff000 	.word	0x457ff000
 8001e08:	42700000 	.word	0x42700000
 8001e0c:	2000016a 	.word	0x2000016a
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000160 	.word	0x20000160
 8001e18:	20000164 	.word	0x20000164
		else if(TRANSDUCER_3.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<5);}
 8001e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001f90 <main+0xd28>)
 8001e1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e22:	4b5c      	ldr	r3, [pc, #368]	@ (8001f94 <main+0xd2c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	db0a      	blt.n	8001e4e <main+0xbe6>
 8001e38:	4b57      	ldr	r3, [pc, #348]	@ (8001f98 <main+0xd30>)
 8001e3a:	220a      	movs	r2, #10
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	4b57      	ldr	r3, [pc, #348]	@ (8001f9c <main+0xd34>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b54      	ldr	r3, [pc, #336]	@ (8001f9c <main+0xd34>)
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	e06f      	b.n	8001f2e <main+0xcc6>
		else if(TRANSDUCER_4.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<4);}
 8001e4e:	4b54      	ldr	r3, [pc, #336]	@ (8001fa0 <main+0xd38>)
 8001e50:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e54:	4b4f      	ldr	r3, [pc, #316]	@ (8001f94 <main+0xd2c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	db0a      	blt.n	8001e80 <main+0xc18>
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <main+0xd30>)
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	4b4a      	ldr	r3, [pc, #296]	@ (8001f9c <main+0xd34>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b48      	ldr	r3, [pc, #288]	@ (8001f9c <main+0xd34>)
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	e056      	b.n	8001f2e <main+0xcc6>
		//If Error state but not direct to PURGE
		else{
			if(TRANSDUCER_1.read_value_bar >=max_pressure_error_mode){error |=(0x01<<3);}
 8001e80:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <main+0xd3c>)
 8001e82:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e86:	4b48      	ldr	r3, [pc, #288]	@ (8001fa8 <main+0xd40>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	db07      	blt.n	8001eac <main+0xc44>
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f9c <main+0xd34>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8001f9c <main+0xd34>)
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	e040      	b.n	8001f2e <main+0xcc6>
			else if(TRANSDUCER_2.read_value_bar >=max_pressure_error_mode){error |=(0x01<<2);}
 8001eac:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <main+0xd44>)
 8001eae:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <main+0xd40>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	db07      	blt.n	8001ed8 <main+0xc70>
 8001ec8:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <main+0xd34>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b32      	ldr	r3, [pc, #200]	@ (8001f9c <main+0xd34>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e02a      	b.n	8001f2e <main+0xcc6>
			else if(TRANSDUCER_3.read_value_bar >=max_pressure_error_mode){error |=(0x01<<1);}
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <main+0xd28>)
 8001eda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ede:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <main+0xd40>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	db07      	blt.n	8001f04 <main+0xc9c>
 8001ef4:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <main+0xd34>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <main+0xd34>)
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	e014      	b.n	8001f2e <main+0xcc6>
			else if(TRANSDUCER_4.read_value_bar >=max_pressure_error_mode){error |=0x01;}
 8001f04:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <main+0xd38>)
 8001f06:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f0a:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <main+0xd40>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	db06      	blt.n	8001f2e <main+0xcc6>
 8001f20:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <main+0xd34>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <main+0xd34>)
 8001f2c:	801a      	strh	r2, [r3, #0]
		//Pressures are A-OK, so carry on without doing anything
			else{} //make it so nothing happens here -> proceed
		}

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <main+0xd48>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <main+0xcd4>
 8001f36:	f001 fb55 	bl	80035e4 <RX_Receive>
 8001f3a:	e000      	b.n	8001f3e <main+0xcd6>
 8001f3c:	bf00      	nop

//Get Loadcell Readings

		//Done with HALD libs atm - JC 29/04/2025
		spi_buf[0] = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	753b      	strb	r3, [r7, #20]
		spi_buf[1] = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	757b      	strb	r3, [r7, #21]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2104      	movs	r1, #4
 8001f4a:	481a      	ldr	r0, [pc, #104]	@ (8001fb4 <main+0xd4c>)
 8001f4c:	f002 fb9e 	bl	800468c <HAL_GPIO_WritePin>
		ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH1,  (uint8_t *)spi_buf, 1, 100);
 8001f50:	f107 0214 	add.w	r2, r7, #20
 8001f54:	2364      	movs	r3, #100	@ 0x64
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4917      	ldr	r1, [pc, #92]	@ (8001fb8 <main+0xd50>)
 8001f5c:	4817      	ldr	r0, [pc, #92]	@ (8001fbc <main+0xd54>)
 8001f5e:	f004 f942 	bl	80061e6 <HAL_SPI_TransmitReceive>
 8001f62:	4603      	mov	r3, r0
 8001f64:	77bb      	strb	r3, [r7, #30]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4812      	ldr	r0, [pc, #72]	@ (8001fb4 <main+0xd4c>)
 8001f6c:	f002 fb8e 	bl	800468c <HAL_GPIO_WritePin>
		if (ret != HAL_OK){
 8001f70:	7fbb      	ldrb	r3, [r7, #30]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d02c      	beq.n	8001fd0 <main+0xd68>
			LOADCELL_1.comms_ok = false;
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <main+0xd58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
			LOADCELL_2.comms_ok = false;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <main+0xd5c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
			LOADCELL_3.comms_ok = false;
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <main+0xd60>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			LOADCELL_4.comms_ok = false;
 8001f88:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <main+0xd64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e082      	b.n	8002096 <main+0xe2e>
 8001f90:	20000620 	.word	0x20000620
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000160 	.word	0x20000160
 8001f9c:	20000164 	.word	0x20000164
 8001fa0:	2000062c 	.word	0x2000062c
 8001fa4:	20000608 	.word	0x20000608
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	20000614 	.word	0x20000614
 8001fb0:	2000016a 	.word	0x2000016a
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	0800678a 	.word	0x0800678a
 8001fbc:	20000108 	.word	0x20000108
 8001fc0:	20000638 	.word	0x20000638
 8001fc4:	20000644 	.word	0x20000644
 8001fc8:	20000650 	.word	0x20000650
 8001fcc:	2000065c 	.word	0x2000065c
		}
		else {
			LOADCELL_1.comms_ok = true;
 8001fd0:	4bb3      	ldr	r3, [pc, #716]	@ (80022a0 <main+0x1038>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
			LOADCELL_2.comms_ok = true;
 8001fd6:	4bb3      	ldr	r3, [pc, #716]	@ (80022a4 <main+0x103c>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
			LOADCELL_3.comms_ok = true;
 8001fdc:	4bb2      	ldr	r3, [pc, #712]	@ (80022a8 <main+0x1040>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
			LOADCELL_4.comms_ok = true;
 8001fe2:	4bb2      	ldr	r3, [pc, #712]	@ (80022ac <main+0x1044>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]


			LOADCELL_1.raw_data[0] = spi_buf[0];
 8001fe8:	7d3a      	ldrb	r2, [r7, #20]
 8001fea:	4bad      	ldr	r3, [pc, #692]	@ (80022a0 <main+0x1038>)
 8001fec:	705a      	strb	r2, [r3, #1]
			LOADCELL_1.raw_data[1] = spi_buf[1];
 8001fee:	7d7a      	ldrb	r2, [r7, #21]
 8001ff0:	4bab      	ldr	r3, [pc, #684]	@ (80022a0 <main+0x1038>)
 8001ff2:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	48ad      	ldr	r0, [pc, #692]	@ (80022b0 <main+0x1048>)
 8001ffa:	f002 fb47 	bl	800468c <HAL_GPIO_WritePin>
			ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH2,  (uint8_t *)spi_buf, 1, 100);
 8001ffe:	f107 0214 	add.w	r2, r7, #20
 8002002:	2364      	movs	r3, #100	@ 0x64
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	49aa      	ldr	r1, [pc, #680]	@ (80022b4 <main+0x104c>)
 800200a:	48ab      	ldr	r0, [pc, #684]	@ (80022b8 <main+0x1050>)
 800200c:	f004 f8eb 	bl	80061e6 <HAL_SPI_TransmitReceive>
 8002010:	4603      	mov	r3, r0
 8002012:	77bb      	strb	r3, [r7, #30]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	2110      	movs	r1, #16
 8002018:	48a5      	ldr	r0, [pc, #660]	@ (80022b0 <main+0x1048>)
 800201a:	f002 fb37 	bl	800468c <HAL_GPIO_WritePin>

			LOADCELL_2.raw_data[0] = spi_buf[0];
 800201e:	7d3a      	ldrb	r2, [r7, #20]
 8002020:	4ba0      	ldr	r3, [pc, #640]	@ (80022a4 <main+0x103c>)
 8002022:	705a      	strb	r2, [r3, #1]
			LOADCELL_2.raw_data[1] = spi_buf[1];
 8002024:	7d7a      	ldrb	r2, [r7, #21]
 8002026:	4b9f      	ldr	r3, [pc, #636]	@ (80022a4 <main+0x103c>)
 8002028:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	2110      	movs	r1, #16
 800202e:	48a0      	ldr	r0, [pc, #640]	@ (80022b0 <main+0x1048>)
 8002030:	f002 fb2c 	bl	800468c <HAL_GPIO_WritePin>
			ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH3,  (uint8_t *)spi_buf, 1, 100);
 8002034:	f107 0214 	add.w	r2, r7, #20
 8002038:	2364      	movs	r3, #100	@ 0x64
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2301      	movs	r3, #1
 800203e:	499f      	ldr	r1, [pc, #636]	@ (80022bc <main+0x1054>)
 8002040:	489d      	ldr	r0, [pc, #628]	@ (80022b8 <main+0x1050>)
 8002042:	f004 f8d0 	bl	80061e6 <HAL_SPI_TransmitReceive>
 8002046:	4603      	mov	r3, r0
 8002048:	77bb      	strb	r3, [r7, #30]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2110      	movs	r1, #16
 800204e:	4898      	ldr	r0, [pc, #608]	@ (80022b0 <main+0x1048>)
 8002050:	f002 fb1c 	bl	800468c <HAL_GPIO_WritePin>

			LOADCELL_3.raw_data[0] = spi_buf[0];
 8002054:	7d3a      	ldrb	r2, [r7, #20]
 8002056:	4b94      	ldr	r3, [pc, #592]	@ (80022a8 <main+0x1040>)
 8002058:	705a      	strb	r2, [r3, #1]
			LOADCELL_3.raw_data[1] = spi_buf[1];
 800205a:	7d7a      	ldrb	r2, [r7, #21]
 800205c:	4b92      	ldr	r3, [pc, #584]	@ (80022a8 <main+0x1040>)
 800205e:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	4892      	ldr	r0, [pc, #584]	@ (80022b0 <main+0x1048>)
 8002066:	f002 fb11 	bl	800468c <HAL_GPIO_WritePin>
			ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH4,  (uint8_t *)spi_buf, 1, 100);
 800206a:	f107 0214 	add.w	r2, r7, #20
 800206e:	2364      	movs	r3, #100	@ 0x64
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	4992      	ldr	r1, [pc, #584]	@ (80022c0 <main+0x1058>)
 8002076:	4890      	ldr	r0, [pc, #576]	@ (80022b8 <main+0x1050>)
 8002078:	f004 f8b5 	bl	80061e6 <HAL_SPI_TransmitReceive>
 800207c:	4603      	mov	r3, r0
 800207e:	77bb      	strb	r3, [r7, #30]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2110      	movs	r1, #16
 8002084:	488a      	ldr	r0, [pc, #552]	@ (80022b0 <main+0x1048>)
 8002086:	f002 fb01 	bl	800468c <HAL_GPIO_WritePin>

			LOADCELL_4.raw_data[0] = spi_buf[0];
 800208a:	7d3a      	ldrb	r2, [r7, #20]
 800208c:	4b87      	ldr	r3, [pc, #540]	@ (80022ac <main+0x1044>)
 800208e:	705a      	strb	r2, [r3, #1]
			LOADCELL_4.raw_data[1] = spi_buf[1];
 8002090:	7d7a      	ldrb	r2, [r7, #21]
 8002092:	4b86      	ldr	r3, [pc, #536]	@ (80022ac <main+0x1044>)
 8002094:	709a      	strb	r2, [r3, #2]

		}

		//Translate 12bit value into relative voltage (given Vref is 5V)

		LOADCELL_1.read_value_voltage = ((float)(LOADCELL_1.raw_data[1] << 8 |  LOADCELL_1.raw_data[0] )/ 4095) * 5;
 8002096:	4b82      	ldr	r3, [pc, #520]	@ (80022a0 <main+0x1038>)
 8002098:	789b      	ldrb	r3, [r3, #2]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	4a80      	ldr	r2, [pc, #512]	@ (80022a0 <main+0x1038>)
 800209e:	7852      	ldrb	r2, [r2, #1]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020aa:	eddf 6a86 	vldr	s13, [pc, #536]	@ 80022c4 <main+0x105c>
 80020ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <main+0x1038>)
 80020bc:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_2.read_value_voltage = ((float)(LOADCELL_2.raw_data[1] << 8 |  LOADCELL_2.raw_data[0] )/ 4095) * 5;
 80020c0:	4b78      	ldr	r3, [pc, #480]	@ (80022a4 <main+0x103c>)
 80020c2:	789b      	ldrb	r3, [r3, #2]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	4a77      	ldr	r2, [pc, #476]	@ (80022a4 <main+0x103c>)
 80020c8:	7852      	ldrb	r2, [r2, #1]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d4:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 80022c4 <main+0x105c>
 80020d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020dc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e4:	4b6f      	ldr	r3, [pc, #444]	@ (80022a4 <main+0x103c>)
 80020e6:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_3.read_value_voltage = ((float)(LOADCELL_3.raw_data[1] << 8 |  LOADCELL_3.raw_data[0] )/ 4095) * 5;
 80020ea:	4b6f      	ldr	r3, [pc, #444]	@ (80022a8 <main+0x1040>)
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	4a6d      	ldr	r2, [pc, #436]	@ (80022a8 <main+0x1040>)
 80020f2:	7852      	ldrb	r2, [r2, #1]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fe:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80022c4 <main+0x105c>
 8002102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002106:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <main+0x1040>)
 8002110:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_4.read_value_voltage = ((float)(LOADCELL_4.raw_data[1] << 8 |  LOADCELL_4.raw_data[0] )/ 4095) * 5;
 8002114:	4b65      	ldr	r3, [pc, #404]	@ (80022ac <main+0x1044>)
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4a64      	ldr	r2, [pc, #400]	@ (80022ac <main+0x1044>)
 800211c:	7852      	ldrb	r2, [r2, #1]
 800211e:	4313      	orrs	r3, r2
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002128:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80022c4 <main+0x105c>
 800212c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002130:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002138:	4b5c      	ldr	r3, [pc, #368]	@ (80022ac <main+0x1044>)
 800213a:	edc3 7a01 	vstr	s15, [r3, #4]



		LOADCELL_1.read_value_weight = LOADCELL_1.read_value_voltage * 10; //(voltage_read / 5) * 50 (kg) = pressure, 50/5 is 10, therefore (voltage_read) * 10 = weight (for a 0-50kg range)
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <main+0x1038>)
 8002140:	edd3 7a01 	vldr	s15, [r3, #4]
 8002144:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214c:	4b54      	ldr	r3, [pc, #336]	@ (80022a0 <main+0x1038>)
 800214e:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_2.read_value_weight = LOADCELL_2.read_value_voltage * 10;
 8002152:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <main+0x103c>)
 8002154:	edd3 7a01 	vldr	s15, [r3, #4]
 8002158:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800215c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002160:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <main+0x103c>)
 8002162:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_3.read_value_weight = LOADCELL_3.read_value_voltage * 10;
 8002166:	4b50      	ldr	r3, [pc, #320]	@ (80022a8 <main+0x1040>)
 8002168:	edd3 7a01 	vldr	s15, [r3, #4]
 800216c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002174:	4b4c      	ldr	r3, [pc, #304]	@ (80022a8 <main+0x1040>)
 8002176:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_4.read_value_weight = LOADCELL_4.read_value_voltage * 10;
 800217a:	4b4c      	ldr	r3, [pc, #304]	@ (80022ac <main+0x1044>)
 800217c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002180:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002188:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <main+0x1044>)
 800218a:	edc3 7a02 	vstr	s15, [r3, #8]


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800218e:	4b4e      	ldr	r3, [pc, #312]	@ (80022c8 <main+0x1060>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <main+0xf34>
 8002196:	f001 fa25 	bl	80035e4 <RX_Receive>
 800219a:	e000      	b.n	800219e <main+0xf36>
 800219c:	bf00      	nop


		//Check Loadcell weights, if too low, trigger error flag
		//Error Flags specific to loadcell
		if(LoadCells.Converted_Value_LoadCell[0] <min_weight_error_mode){error |=(0x01<<7);}
 800219e:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <main+0x1064>)
 80021a0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80021a4:	4b4a      	ldr	r3, [pc, #296]	@ (80022d0 <main+0x1068>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	d507      	bpl.n	80021ca <main+0xf62>
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <main+0x106c>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <main+0x106c>)
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	e040      	b.n	800224c <main+0xfe4>
		else if(LoadCells.Converted_Value_LoadCell[1] <min_weight_error_mode){error |=(0x01<<6);}
 80021ca:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <main+0x1064>)
 80021cc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80021d0:	4b3f      	ldr	r3, [pc, #252]	@ (80022d0 <main+0x1068>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	d507      	bpl.n	80021f6 <main+0xf8e>
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <main+0x106c>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b38      	ldr	r3, [pc, #224]	@ (80022d4 <main+0x106c>)
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	e02a      	b.n	800224c <main+0xfe4>
		else if(LoadCells.Converted_Value_LoadCell[2] <min_weight_error_mode){error |=(0x01<<5);}
 80021f6:	4b35      	ldr	r3, [pc, #212]	@ (80022cc <main+0x1064>)
 80021f8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <main+0x1068>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	d507      	bpl.n	8002222 <main+0xfba>
 8002212:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <main+0x106c>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <main+0x106c>)
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	e014      	b.n	800224c <main+0xfe4>
		else if(LoadCells.Converted_Value_LoadCell[3] <min_weight_error_mode){error |=(0x01<<4);}
 8002222:	4b2a      	ldr	r3, [pc, #168]	@ (80022cc <main+0x1064>)
 8002224:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002228:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <main+0x1068>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d506      	bpl.n	800224c <main+0xfe4>
 800223e:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <main+0x106c>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <main+0x106c>)
 800224a:	801a      	strh	r2, [r3, #0]
		//Weights are A-OK, so carry on without doing anything
		else{}

//Extract surface mount temp sensor temp
		i2c_comms_result result = get_temp(&SMD_TEMP_SENSE);
 800224c:	463b      	mov	r3, r7
 800224e:	4922      	ldr	r1, [pc, #136]	@ (80022d8 <main+0x1070>)
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fbf1 	bl	8003a38 <get_temp>
		if (result.comms_ok){
 8002256:	783b      	ldrb	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <main+0x1020>
			for (uint8_t i = 0; i <= result.return_length; i++) {
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	e00d      	b.n	800227e <main+0x1016>
				uint8_t * floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <main+0x1074>)
 8002264:	61bb      	str	r3, [r7, #24]
				floatPtr[i] = result.return_value[i];
 8002266:	7ffa      	ldrb	r2, [r7, #31]
 8002268:	7ffb      	ldrb	r3, [r7, #31]
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	440b      	add	r3, r1
 800226e:	3220      	adds	r2, #32
 8002270:	443a      	add	r2, r7
 8002272:	f812 2c1e 	ldrb.w	r2, [r2, #-30]
 8002276:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i <= result.return_length; i++) {
 8002278:	7ffb      	ldrb	r3, [r7, #31]
 800227a:	3301      	adds	r3, #1
 800227c:	77fb      	strb	r3, [r7, #31]
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	7ffa      	ldrb	r2, [r7, #31]
 8002282:	429a      	cmp	r2, r3
 8002284:	d9ed      	bls.n	8002262 <main+0xffa>
 8002286:	e003      	b.n	8002290 <main+0x1028>
			}
		}
		else {
			SMD_TEMP_SENSE.temp = 0x00;
 8002288:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <main+0x1070>)
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
		}


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <main+0x1060>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d023      	beq.n	80022e0 <main+0x1078>
 8002298:	f001 f9a4 	bl	80035e4 <RX_Receive>
 800229c:	e021      	b.n	80022e2 <main+0x107a>
 800229e:	bf00      	nop
 80022a0:	20000638 	.word	0x20000638
 80022a4:	20000644 	.word	0x20000644
 80022a8:	20000650 	.word	0x20000650
 80022ac:	2000065c 	.word	0x2000065c
 80022b0:	40021800 	.word	0x40021800
 80022b4:	0800678c 	.word	0x0800678c
 80022b8:	20000108 	.word	0x20000108
 80022bc:	0800678e 	.word	0x0800678e
 80022c0:	08006790 	.word	0x08006790
 80022c4:	457ff000 	.word	0x457ff000
 80022c8:	2000016a 	.word	0x2000016a
 80022cc:	20000208 	.word	0x20000208
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000164 	.word	0x20000164
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	20000010 	.word	0x20000010
 80022e0:	bf00      	nop

		//Check if we need to go directly to PURGE
		if(switch_case_state == 10)
 80022e2:	4b91      	ldr	r3, [pc, #580]	@ (8002528 <main+0x12c0>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b0a      	cmp	r3, #10
 80022e8:	f000 86fd 	beq.w	80030e6 <main+0x1e7e>
		{
			break; //enter PURGE state
		}
		else
		{
			switch_case_state = 1; //input selector state
 80022ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002528 <main+0x12c0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
			break;
 80022f2:	f000 befb 	b.w	80030ec <main+0x1e84>
//								Checks switch input and sets LED outputs

	case 1:

		//Set SMD LEDs as per current case/state
		LED_1.port->ODR &= ~LED_1_PWR;
 80022f6:	4b8d      	ldr	r3, [pc, #564]	@ (800252c <main+0x12c4>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b8b      	ldr	r3, [pc, #556]	@ (800252c <main+0x12c4>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002304:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002306:	4b8a      	ldr	r3, [pc, #552]	@ (8002530 <main+0x12c8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <main+0x12c8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002314:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002316:	4b87      	ldr	r3, [pc, #540]	@ (8002534 <main+0x12cc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	4b85      	ldr	r3, [pc, #532]	@ (8002534 <main+0x12cc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002324:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002326:	4b84      	ldr	r3, [pc, #528]	@ (8002538 <main+0x12d0>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	4b82      	ldr	r3, [pc, #520]	@ (8002538 <main+0x12d0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002334:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002336:	4b81      	ldr	r3, [pc, #516]	@ (800253c <main+0x12d4>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <main+0x12d4>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002344:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002346:	4b7e      	ldr	r3, [pc, #504]	@ (8002540 <main+0x12d8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	4b7c      	ldr	r3, [pc, #496]	@ (8002540 <main+0x12d8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002354:	615a      	str	r2, [r3, #20]

			//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002356:	4b7b      	ldr	r3, [pc, #492]	@ (8002544 <main+0x12dc>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <main+0x10fc>
 800235e:	f001 f941 	bl	80035e4 <RX_Receive>
 8002362:	e000      	b.n	8002366 <main+0x10fe>
 8002364:	bf00      	nop

			//check for either remote control (== 0) or local control (== 1)
		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == 0)
 8002366:	4b78      	ldr	r3, [pc, #480]	@ (8002548 <main+0x12e0>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d114      	bne.n	800239e <main+0x1136>
		{
				//Change LED State
			led_remote.port->ODR |= LOCAL_CONTROL_SW;			//Set Remote CTRL LED
 8002374:	4b75      	ldr	r3, [pc, #468]	@ (800254c <main+0x12e4>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	4b74      	ldr	r3, [pc, #464]	@ (800254c <main+0x12e4>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002382:	615a      	str	r2, [r3, #20]
			led_local.port->ODR &= ~(LOCAL_CONTROL_SW);			//Off Local CTRL LED
 8002384:	4b72      	ldr	r3, [pc, #456]	@ (8002550 <main+0x12e8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	4b71      	ldr	r3, [pc, #452]	@ (8002550 <main+0x12e8>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002392:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 3; //remote control
 8002394:	4b64      	ldr	r3, [pc, #400]	@ (8002528 <main+0x12c0>)
 8002396:	2203      	movs	r2, #3
 8002398:	701a      	strb	r2, [r3, #0]
			break;
 800239a:	f000 bea7 	b.w	80030ec <main+0x1e84>
		}
		else //Local Control (==1)
		{
			//Change LED State
			led_remote.port->ODR &= ~(LOCAL_CONTROL_SW);		//Off Remote CTRL LED
 800239e:	4b6b      	ldr	r3, [pc, #428]	@ (800254c <main+0x12e4>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	4b69      	ldr	r3, [pc, #420]	@ (800254c <main+0x12e4>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023ac:	615a      	str	r2, [r3, #20]
			led_local.port->ODR |= LOCAL_CONTROL_SW;			//Set Local CTRL LED
 80023ae:	4b68      	ldr	r3, [pc, #416]	@ (8002550 <main+0x12e8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <main+0x12e8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023bc:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 2; //local control
 80023be:	4b5a      	ldr	r3, [pc, #360]	@ (8002528 <main+0x12c0>)
 80023c0:	2202      	movs	r2, #2
 80023c2:	701a      	strb	r2, [r3, #0]
			break;
 80023c4:	f000 be92 	b.w	80030ec <main+0x1e84>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop

		__disable_irq();

		//Read in switch inputs to state_local var
		state_local =
		((DUM_SW.port->IDR & DUMP_SW) << 7) +
 80023cc:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <main+0x12ec>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	691b      	ldr	r3, [r3, #16]
		((N2O_SW.port->IDR & N2O_ISO_SW) << 6) +
 80023d2:	4b61      	ldr	r3, [pc, #388]	@ (8002558 <main+0x12f0>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	691b      	ldr	r3, [r3, #16]
		((O2_IS_SW.port->IDR & O2_ISO_SW) << 5) +
 80023d8:	4b60      	ldr	r3, [pc, #384]	@ (800255c <main+0x12f4>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	691b      	ldr	r3, [r3, #16]
		((IGNITION_IS_SW.port->IDR & IGNITION_SW) << 4) +
 80023de:	4b60      	ldr	r3, [pc, #384]	@ (8002560 <main+0x12f8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
		(activate_SW.port->IDR & ACTIVATE_SW);
 80023e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002564 <main+0x12fc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 80023ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002568 <main+0x1300>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	b2da      	uxtb	r2, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 80023fc:	4b5b      	ldr	r3, [pc, #364]	@ (800256c <main+0x1304>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800240c:	b2db      	uxtb	r3, r3
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 800240e:	4413      	add	r3, r2
 8002410:	b2da      	uxtb	r2, r3
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
 8002412:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <main+0x1308>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	b2db      	uxtb	r3, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 8002424:	4413      	add	r3, r2
 8002426:	b2da      	uxtb	r2, r3
		state_local =
 8002428:	4b52      	ldr	r3, [pc, #328]	@ (8002574 <main+0x130c>)
 800242a:	701a      	strb	r2, [r3, #0]

		//Move to local control output setting state
		switch_case_state = 0x0F;
 800242c:	4b3e      	ldr	r3, [pc, #248]	@ (8002528 <main+0x12c0>)
 800242e:	220f      	movs	r2, #15
 8002430:	701a      	strb	r2, [r3, #0]
		break;
 8002432:	f000 be5b 	b.w	80030ec <main+0x1e84>
//*******************************REMOTE ACCESS - TIMER UPDATES*************************************************************
//								Enable Interrupts
	case 3:

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002436:	4b43      	ldr	r3, [pc, #268]	@ (8002544 <main+0x12dc>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <main+0x11dc>
 800243e:	f001 f8d1 	bl	80035e4 <RX_Receive>
 8002442:	e000      	b.n	8002446 <main+0x11de>
 8002444:	bf00      	nop

		//Enable interrupts for LoRa
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002446:	2017      	movs	r0, #23
 8002448:	f7fe fea2 	bl	8001190 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI9_5_IRQn,9);
 800244c:	2109      	movs	r1, #9
 800244e:	2017      	movs	r0, #23
 8002450:	f7fe fee0 	bl	8001214 <__NVIC_SetPriority>
		//NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
		//NVIC_SetPriority(TIM1_UP_TIM10_IRQn,10);

		//Move to remote access output setting state
		switch_case_state = 4;
 8002454:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <main+0x12c0>)
 8002456:	2204      	movs	r2, #4
 8002458:	701a      	strb	r2, [r3, #0]
		 * B2: Ignition Selected
		 * B1: Gas Filled selected
		 * B0: System Activated
		 */

		break;
 800245a:	f000 be47 	b.w	80030ec <main+0x1e84>
//**************************REMOTE ACCESS - OUTPUT ACTUATION*************************************************************
//							Actuates outputs depended on state flags within last received LoRa packet
	case 4:

		LED_1.port -> ODR &= ~LED_1_PWR;
 800245e:	4b33      	ldr	r3, [pc, #204]	@ (800252c <main+0x12c4>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	4b31      	ldr	r3, [pc, #196]	@ (800252c <main+0x12c4>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800246c:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 800246e:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <main+0x12c8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	4b2e      	ldr	r3, [pc, #184]	@ (8002530 <main+0x12c8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247c:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 800247e:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <main+0x12cc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <main+0x12cc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800248c:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 800248e:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <main+0x12d0>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <main+0x12d0>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800249c:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <main+0x12d4>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <main+0x12d4>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ac:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <main+0x12d8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <main+0x12d8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024bc:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 80024be:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <main+0x12dc>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <main+0x1264>
 80024c6:	f001 f88d 	bl	80035e4 <RX_Receive>
 80024ca:	e000      	b.n	80024ce <main+0x1266>
 80024cc:	bf00      	nop

		//Check if System activated bit was set in last received packet
		if((state & SYSTEM_ACTIVATED) != SYSTEM_ACTIVATED)
 80024ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <main+0x1310>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <main+0x127c>
		{
			//If system is not active, should go straight to PURGE state
			switch_case_state = 10;
 80024da:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <main+0x12c0>)
 80024dc:	220a      	movs	r2, #10
 80024de:	701a      	strb	r2, [r3, #0]
			break;
 80024e0:	f000 be04 	b.w	80030ec <main+0x1e84>
		//	CH1_ARM.port->ODR |= (CH1_Arm);
		//	CH1_OP.port->ODR |= (CH1_Operate);
		//}

		//Check if manual purge bit was set in last received packet
		else if( ((state & MANUAL_PURGE) == MANUAL_PURGE) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED) )
 80024e4:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <main+0x1310>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	da0a      	bge.n	8002504 <main+0x129c>
 80024ee:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <main+0x1310>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <main+0x129c>
		{
			//If manual purge was set, should go straight to PURGE state
			switch_case_state = 10;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <main+0x12c0>)
 80024fc:	220a      	movs	r2, #10
 80024fe:	701a      	strb	r2, [r3, #0]
			break;
 8002500:	f000 bdf4 	b.w	80030ec <main+0x1e84>
		}
// ------------------- Pass this point, the system is active, and manual purge has not been selected! -------------------

		//If neither Gas or Ignition selected, go to neutral state
		else if( ((state & GAS_FILLED_SELECTED) == 0) && ((state & IGNITION_SELECTED) == 0) ) //0 to indicate neither are selected
 8002504:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <main+0x1310>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d135      	bne.n	800257c <main+0x1314>
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <main+0x1310>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d12f      	bne.n	800257c <main+0x1314>
		{
			switch_case_state = 9; //go into neutral state!
 800251c:	4b02      	ldr	r3, [pc, #8]	@ (8002528 <main+0x12c0>)
 800251e:	2209      	movs	r2, #9
 8002520:	701a      	strb	r2, [r3, #0]
			break;
 8002522:	f000 bde3 	b.w	80030ec <main+0x1e84>
 8002526:	bf00      	nop
 8002528:	20000160 	.word	0x20000160
 800252c:	20000488 	.word	0x20000488
 8002530:	200004a0 	.word	0x200004a0
 8002534:	200004b8 	.word	0x200004b8
 8002538:	200004d0 	.word	0x200004d0
 800253c:	200004e8 	.word	0x200004e8
 8002540:	20000500 	.word	0x20000500
 8002544:	2000016a 	.word	0x2000016a
 8002548:	20000530 	.word	0x20000530
 800254c:	20000428 	.word	0x20000428
 8002550:	20000410 	.word	0x20000410
 8002554:	20000548 	.word	0x20000548
 8002558:	20000560 	.word	0x20000560
 800255c:	20000578 	.word	0x20000578
 8002560:	20000590 	.word	0x20000590
 8002564:	20000518 	.word	0x20000518
 8002568:	200005a8 	.word	0x200005a8
 800256c:	200005c0 	.word	0x200005c0
 8002570:	200005d8 	.word	0x200005d8
 8002574:	20000162 	.word	0x20000162
 8002578:	20000161 	.word	0x20000161
		}

		//If Ignition is selected
		else if ( ((state & IGNITION_SELECTED) == IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) != GAS_FILLED_SELECTED))
 800257c:	4b99      	ldr	r3, [pc, #612]	@ (80027e4 <main+0x157c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d038      	beq.n	80025fa <main+0x1392>
 8002588:	4b96      	ldr	r3, [pc, #600]	@ (80027e4 <main+0x157c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d132      	bne.n	80025fa <main+0x1392>
		{
			//Ensure N2O Solenoid is closed, and turn off LED
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002594:	4b94      	ldr	r3, [pc, #592]	@ (80027e8 <main+0x1580>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b93      	ldr	r3, [pc, #588]	@ (80027e8 <main+0x1580>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025a2:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 80025a4:	4b91      	ldr	r3, [pc, #580]	@ (80027ec <main+0x1584>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	4b90      	ldr	r3, [pc, #576]	@ (80027ec <main+0x1584>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b2:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 80025b4:	4b8e      	ldr	r3, [pc, #568]	@ (80027f0 <main+0x1588>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	4b8d      	ldr	r3, [pc, #564]	@ (80027f0 <main+0x1588>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f022 0220 	bic.w	r2, r2, #32
 80025c2:	615a      	str	r2, [r3, #20]


			//If Ignition FIRE bit is set, time to light this puppy
			if((state & IGNITION_FIRE) == IGNITION_FIRE)
 80025c4:	4b87      	ldr	r3, [pc, #540]	@ (80027e4 <main+0x157c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <main+0x1372>
			{
				switch_case_state = 0x80;
 80025d0:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <main+0x158c>)
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	701a      	strb	r2, [r3, #0]
				break;
 80025d6:	f000 bd89 	b.w	80030ec <main+0x1e84>
			}
			//If O2 Fill bit is set, enable the O2 Solenoids
			else if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <main+0x157c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <main+0x1388>
				switch_case_state = 8;
 80025e6:	4b83      	ldr	r3, [pc, #524]	@ (80027f4 <main+0x158c>)
 80025e8:	2208      	movs	r2, #8
 80025ea:	701a      	strb	r2, [r3, #0]
				break;
 80025ec:	f000 bd7e 	b.w	80030ec <main+0x1e84>
			}
			//Otherwise go to neutral
			else{
				switch_case_state = 9;
 80025f0:	4b80      	ldr	r3, [pc, #512]	@ (80027f4 <main+0x158c>)
 80025f2:	2209      	movs	r2, #9
 80025f4:	701a      	strb	r2, [r3, #0]
				break;
 80025f6:	f000 bd79 	b.w	80030ec <main+0x1e84>
			}
		}

// ------------------- Pass this point, ignite is NOT selected, and gas fill state has been selected -------------------

		else if ( ((state & IGNITION_SELECTED) != IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED))
 80025fa:	4b7a      	ldr	r3, [pc, #488]	@ (80027e4 <main+0x157c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d120      	bne.n	8002648 <main+0x13e0>
 8002606:	4b77      	ldr	r3, [pc, #476]	@ (80027e4 <main+0x157c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01a      	beq.n	8002648 <main+0x13e0>
		{
//N2O and PURGE have not been selected, go to neutral state
			if((state & SWITCH_SELECTOR) == SWITCH_SELECTOR)
 8002612:	4b74      	ldr	r3, [pc, #464]	@ (80027e4 <main+0x157c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <main+0x13c0>
			{
				switch_case_state = 9;
 800261e:	4b75      	ldr	r3, [pc, #468]	@ (80027f4 <main+0x158c>)
 8002620:	2209      	movs	r2, #9
 8002622:	701a      	strb	r2, [r3, #0]
				break;
 8002624:	f000 bd62 	b.w	80030ec <main+0x1e84>
			}
//N20 Fill is selected, move to N2O actuation state
			else if( (state & N2O_FILL_ACTIVATE) == N2O_FILL_ACTIVATE)
 8002628:	4b6e      	ldr	r3, [pc, #440]	@ (80027e4 <main+0x157c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <main+0x13d6>
			{
				switch_case_state = 7;
 8002634:	4b6f      	ldr	r3, [pc, #444]	@ (80027f4 <main+0x158c>)
 8002636:	2207      	movs	r2, #7
 8002638:	701a      	strb	r2, [r3, #0]
				break;
 800263a:	f000 bd57 	b.w	80030ec <main+0x1e84>
			}
//If neither are selected, some error... Go to neutral state for safety, and set error flag
			else
			{
				//get error flag in here as well!
				switch_case_state = 9; //Something has gone wrong and weird - go to neutral state and stop gas flow
 800263e:	4b6d      	ldr	r3, [pc, #436]	@ (80027f4 <main+0x158c>)
 8002640:	2209      	movs	r2, #9
 8002642:	701a      	strb	r2, [r3, #0]
				break;
 8002644:	f000 bd52 	b.w	80030ec <main+0x1e84>

//*******************************LOCAL ACCESS*************************************************************
	case 0x0F:


		LED_1.port -> ODR |= LED_1_PWR;
 8002648:	4b6b      	ldr	r3, [pc, #428]	@ (80027f8 <main+0x1590>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <main+0x1590>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002656:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002658:	4b68      	ldr	r3, [pc, #416]	@ (80027fc <main+0x1594>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	4b67      	ldr	r3, [pc, #412]	@ (80027fc <main+0x1594>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002666:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002668:	4b65      	ldr	r3, [pc, #404]	@ (8002800 <main+0x1598>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	4b64      	ldr	r3, [pc, #400]	@ (8002800 <main+0x1598>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002676:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002678:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <main+0x159c>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	4b61      	ldr	r3, [pc, #388]	@ (8002804 <main+0x159c>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002686:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002688:	4b5f      	ldr	r3, [pc, #380]	@ (8002808 <main+0x15a0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <main+0x15a0>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002696:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002698:	4b5c      	ldr	r3, [pc, #368]	@ (800280c <main+0x15a4>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	4b5b      	ldr	r3, [pc, #364]	@ (800280c <main+0x15a4>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a6:	615a      	str	r2, [r3, #20]


		if((state_local & ACTIVATE_SW) != ACTIVATE_SW) //if the system is not active
 80026a8:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <main+0x15a8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <main+0x1456>
		{
			switch_case_state = 10;
 80026b4:	4b4f      	ldr	r3, [pc, #316]	@ (80027f4 <main+0x158c>)
 80026b6:	220a      	movs	r2, #10
 80026b8:	701a      	strb	r2, [r3, #0]
			break;
 80026ba:	f000 bd17 	b.w	80030ec <main+0x1e84>
		}

//Ignition Key Swtich Selected
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 80026be:	4b54      	ldr	r3, [pc, #336]	@ (8002810 <main+0x15a8>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d074      	beq.n	80027b4 <main+0x154c>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 80026ca:	4b51      	ldr	r3, [pc, #324]	@ (8002810 <main+0x15a8>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d16e      	bne.n	80027b4 <main+0x154c>
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 80026d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002810 <main+0x15a8>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d168      	bne.n	80027b4 <main+0x154c>
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 80026e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002810 <main+0x15a8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d162      	bne.n	80027b4 <main+0x154c>
				(state_local & O2_DEADMAN_SW) != O2_DEADMAN_SW) //is O2 deadman off
 80026ee:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <main+0x15a8>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	f003 0320 	and.w	r3, r3, #32
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d15c      	bne.n	80027b4 <main+0x154c>
		{

			//Adding 'dump' flag to detect the change in interrupt state in key areas!
			//periodic 'dump' flag checks are needed along certain areas as to ensure state is checked regardless
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 80026fa:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <main+0x15ac>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <main+0x14aa>
 8002702:	4b3c      	ldr	r3, [pc, #240]	@ (80027f4 <main+0x158c>)
 8002704:	220a      	movs	r2, #10
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	4b42      	ldr	r3, [pc, #264]	@ (8002814 <main+0x15ac>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	f000 bced 	b.w	80030ec <main+0x1e84>
			else{__asm("NOP");}
 8002712:	bf00      	nop
			//does nothing when false condition is set - ie when dump button has not been pressed!
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <main+0x1580>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	4b33      	ldr	r3, [pc, #204]	@ (80027e8 <main+0x1580>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002722:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <main+0x1584>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	4b30      	ldr	r3, [pc, #192]	@ (80027ec <main+0x1584>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002732:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 8002734:	4b2e      	ldr	r3, [pc, #184]	@ (80027f0 <main+0x1588>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <main+0x1588>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f022 0220 	bic.w	r2, r2, #32
 8002742:	615a      	str	r2, [r3, #20]
			led_o2.port->ODR &= ~(O2_LED);
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <main+0x15b0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	4b33      	ldr	r3, [pc, #204]	@ (8002818 <main+0x15b0>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002752:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002754:	4b31      	ldr	r3, [pc, #196]	@ (800281c <main+0x15b4>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	4b30      	ldr	r3, [pc, #192]	@ (800281c <main+0x15b4>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002762:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 8002764:	4b2e      	ldr	r3, [pc, #184]	@ (8002820 <main+0x15b8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <main+0x15b8>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002772:	615a      	str	r2, [r3, #20]


			Ignition1_ARM.port->ODR |= IGNITION1_ARM;
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <main+0x15bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <main+0x15bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002782:	615a      	str	r2, [r3, #20]
			Ignition2_ARM.port->ODR |= IGNITION2_ARM;
 8002784:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <main+0x15c0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <main+0x15c0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f042 0208 	orr.w	r2, r2, #8
 8002792:	615a      	str	r2, [r3, #20]
//Ignition Rotary Switch Selected
			if((state_local & IGNITE_DEADMAN_SW) == IGNITE_DEADMAN_SW) //is IGNITE button pressed!
 8002794:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <main+0x15a8>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <main+0x1542>
			{
				switch_case_state = 0x80;  //IGNITE state
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <main+0x158c>)
 80027a2:	2280      	movs	r2, #128	@ 0x80
 80027a4:	701a      	strb	r2, [r3, #0]
				break;
 80027a6:	f000 bca1 	b.w	80030ec <main+0x1e84>
			}
//Ignition Key Switch but NO Ignition Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <main+0x158c>)
 80027ac:	2209      	movs	r2, #9
 80027ae:	701a      	strb	r2, [r3, #0]
				break;
 80027b0:	f000 bc9c 	b.w	80030ec <main+0x1e84>
			}
		}


//Both Keyswitches for N2O and O2 are triggered
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 80027b4:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <main+0x15a8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03b      	beq.n	8002838 <main+0x15d0>
				(state_local & O2_ISO_SW) == O2_ISO_SW) //error check if both ISO switches are triggered for N20 and O2
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <main+0x15a8>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d035      	beq.n	8002838 <main+0x15d0>
		{
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <main+0x15ac>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d12b      	bne.n	800282c <main+0x15c4>
 80027d4:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <main+0x158c>)
 80027d6:	220a      	movs	r2, #10
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <main+0x15ac>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	f000 bc84 	b.w	80030ec <main+0x1e84>
 80027e4:	20000161 	.word	0x20000161
 80027e8:	20000320 	.word	0x20000320
 80027ec:	20000308 	.word	0x20000308
 80027f0:	20000458 	.word	0x20000458
 80027f4:	20000160 	.word	0x20000160
 80027f8:	20000488 	.word	0x20000488
 80027fc:	200004a0 	.word	0x200004a0
 8002800:	200004b8 	.word	0x200004b8
 8002804:	200004d0 	.word	0x200004d0
 8002808:	200004e8 	.word	0x200004e8
 800280c:	20000500 	.word	0x20000500
 8002810:	20000162 	.word	0x20000162
 8002814:	20000167 	.word	0x20000167
 8002818:	20000470 	.word	0x20000470
 800281c:	200002d8 	.word	0x200002d8
 8002820:	200002c0 	.word	0x200002c0
 8002824:	20000398 	.word	0x20000398
 8002828:	200003c8 	.word	0x200003c8
			else{__asm("NOP");}
 800282c:	bf00      	nop

			//if local dump flag has been triggered REGARDLESS of input control state!
			switch_case_state = 10;
 800282e:	4b71      	ldr	r3, [pc, #452]	@ (80029f4 <main+0x178c>)
 8002830:	220a      	movs	r2, #10
 8002832:	701a      	strb	r2, [r3, #0]
			break;
 8002834:	f000 bc5a 	b.w	80030ec <main+0x1e84>
		}


//N2O Keyswitch
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002838:	4b6f      	ldr	r3, [pc, #444]	@ (80029f8 <main+0x1790>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d022      	beq.n	800288a <main+0x1622>
				(state_local & O2_ISO_SW) != O2_ISO_SW)
 8002844:	4b6c      	ldr	r3, [pc, #432]	@ (80029f8 <main+0x1790>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11c      	bne.n	800288a <main+0x1622>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002850:	4b6a      	ldr	r3, [pc, #424]	@ (80029fc <main+0x1794>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d107      	bne.n	8002868 <main+0x1600>
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <main+0x178c>)
 800285a:	220a      	movs	r2, #10
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	4b67      	ldr	r3, [pc, #412]	@ (80029fc <main+0x1794>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	f000 bc42 	b.w	80030ec <main+0x1e84>
			else{__asm("NOP");}
 8002868:	bf00      	nop

//N2O Rotary Switch
			if((state_local& N2O_DEADMAN_SW) == N2O_DEADMAN_SW)
 800286a:	4b63      	ldr	r3, [pc, #396]	@ (80029f8 <main+0x1790>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <main+0x1618>
			{
				switch_case_state = 7; // N2O Fill State
 8002876:	4b5f      	ldr	r3, [pc, #380]	@ (80029f4 <main+0x178c>)
 8002878:	2207      	movs	r2, #7
 800287a:	701a      	strb	r2, [r3, #0]
				break;
 800287c:	f000 bc36 	b.w	80030ec <main+0x1e84>
			}
//N2O Keyswitch but NO N2O Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002880:	4b5c      	ldr	r3, [pc, #368]	@ (80029f4 <main+0x178c>)
 8002882:	2209      	movs	r2, #9
 8002884:	701a      	strb	r2, [r3, #0]
				break;
 8002886:	f000 bc31 	b.w	80030ec <main+0x1e84>
			}
		}


//O2 Keyswitch
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 800288a:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <main+0x1790>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d022      	beq.n	80028dc <main+0x1674>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW)
 8002896:	4b58      	ldr	r3, [pc, #352]	@ (80029f8 <main+0x1790>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11c      	bne.n	80028dc <main+0x1674>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 80028a2:	4b56      	ldr	r3, [pc, #344]	@ (80029fc <main+0x1794>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <main+0x1652>
 80028aa:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <main+0x178c>)
 80028ac:	220a      	movs	r2, #10
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	4b52      	ldr	r3, [pc, #328]	@ (80029fc <main+0x1794>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	f000 bc19 	b.w	80030ec <main+0x1e84>
			else{__asm("NOP");}
 80028ba:	bf00      	nop

//O2 Rotary Switch
			if((state_local & O2_DEADMAN_SW) == O2_DEADMAN_SW)
 80028bc:	4b4e      	ldr	r3, [pc, #312]	@ (80029f8 <main+0x1790>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <main+0x166a>
			{
				switch_case_state = 8;
 80028c8:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <main+0x178c>)
 80028ca:	2208      	movs	r2, #8
 80028cc:	701a      	strb	r2, [r3, #0]
				break;
 80028ce:	f000 bc0d 	b.w	80030ec <main+0x1e84>
			}
//O2 Keyswitch but NO O2 Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 80028d2:	4b48      	ldr	r3, [pc, #288]	@ (80029f4 <main+0x178c>)
 80028d4:	2209      	movs	r2, #9
 80028d6:	701a      	strb	r2, [r3, #0]
				break;
 80028d8:	f000 bc08 	b.w	80030ec <main+0x1e84>
		}

//If power is ON but other bits are off
		else
		{
			switch_case_state = 9; // Neutral state
 80028dc:	4b45      	ldr	r3, [pc, #276]	@ (80029f4 <main+0x178c>)
 80028de:	2209      	movs	r2, #9
 80028e0:	701a      	strb	r2, [r3, #0]
			break;
 80028e2:	f000 bc03 	b.w	80030ec <main+0x1e84>

//**************************N2O FILL *************************************************************
	case 7:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 80028e6:	4b46      	ldr	r3, [pc, #280]	@ (8002a00 <main+0x1798>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	4b44      	ldr	r3, [pc, #272]	@ (8002a00 <main+0x1798>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028f4:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 80028f6:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <main+0x179c>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <main+0x179c>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002904:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002906:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <main+0x17a0>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <main+0x17a0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002914:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <main+0x17a4>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a0c <main+0x17a4>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002924:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002926:	4b3a      	ldr	r3, [pc, #232]	@ (8002a10 <main+0x17a8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <main+0x17a8>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002934:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002936:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <main+0x17ac>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	4b35      	ldr	r3, [pc, #212]	@ (8002a14 <main+0x17ac>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002944:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 14;
 8002946:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <main+0x17b0>)
 8002948:	2200      	movs	r2, #0
 800294a:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 800294c:	4b33      	ldr	r3, [pc, #204]	@ (8002a1c <main+0x17b4>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <main+0x17b4>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800295a:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 800295c:	4b30      	ldr	r3, [pc, #192]	@ (8002a20 <main+0x17b8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	4b2f      	ldr	r3, [pc, #188]	@ (8002a20 <main+0x17b8>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800296a:	615a      	str	r2, [r3, #20]

		//Ensure O2 Fill is not filling
		led_o2.port->ODR &= ~(O2_LED);
 800296c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <main+0x17bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	4b2c      	ldr	r3, [pc, #176]	@ (8002a24 <main+0x17bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800297a:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <main+0x17c0>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	4b29      	ldr	r3, [pc, #164]	@ (8002a28 <main+0x17c0>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800298a:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 800298c:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <main+0x17c4>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <main+0x17c4>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800299a:	615a      	str	r2, [r3, #20]

		//Ensure igntion is not igniting
		Ignition1_ARM.port->ODR &= ~(IGNITION1_ARM);
 800299c:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <main+0x17c8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <main+0x17c8>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029aa:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION1_OP);
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <main+0x17cc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <main+0x17cc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029ba:	615a      	str	r2, [r3, #20]

		//Enable N2O Fill
		led_n2o.port->ODR|=N2O_LED;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <main+0x17d0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <main+0x17d0>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f042 0220 	orr.w	r2, r2, #32
 80029ca:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR |= CH3_Arm;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <main+0x17d4>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <main+0x17d4>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029da:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR |= CH3_Operate;
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <main+0x17d8>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <main+0x17d8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ea:	615a      	str	r2, [r3, #20]
		switch_case_state = 0;
 80029ec:	4b01      	ldr	r3, [pc, #4]	@ (80029f4 <main+0x178c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
		break;
 80029f2:	e37b      	b.n	80030ec <main+0x1e84>
 80029f4:	20000160 	.word	0x20000160
 80029f8:	20000162 	.word	0x20000162
 80029fc:	20000167 	.word	0x20000167
 8002a00:	20000488 	.word	0x20000488
 8002a04:	200004a0 	.word	0x200004a0
 8002a08:	200004b8 	.word	0x200004b8
 8002a0c:	200004d0 	.word	0x200004d0
 8002a10:	200004e8 	.word	0x200004e8
 8002a14:	20000500 	.word	0x20000500
 8002a18:	20000164 	.word	0x20000164
 8002a1c:	20000290 	.word	0x20000290
 8002a20:	20000278 	.word	0x20000278
 8002a24:	20000470 	.word	0x20000470
 8002a28:	200002d8 	.word	0x200002d8
 8002a2c:	200002c0 	.word	0x200002c0
 8002a30:	20000398 	.word	0x20000398
 8002a34:	200003b0 	.word	0x200003b0
 8002a38:	20000458 	.word	0x20000458
 8002a3c:	20000320 	.word	0x20000320
 8002a40:	20000308 	.word	0x20000308

//**************************O2 FILL*************************************************************
	case 8:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002a44:	4b85      	ldr	r3, [pc, #532]	@ (8002c5c <main+0x19f4>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	4b84      	ldr	r3, [pc, #528]	@ (8002c5c <main+0x19f4>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a52:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002a54:	4b82      	ldr	r3, [pc, #520]	@ (8002c60 <main+0x19f8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	4b81      	ldr	r3, [pc, #516]	@ (8002c60 <main+0x19f8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a62:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002a64:	4b7f      	ldr	r3, [pc, #508]	@ (8002c64 <main+0x19fc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8002c64 <main+0x19fc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a72:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002a74:	4b7c      	ldr	r3, [pc, #496]	@ (8002c68 <main+0x1a00>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c68 <main+0x1a00>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a82:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002a84:	4b79      	ldr	r3, [pc, #484]	@ (8002c6c <main+0x1a04>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	4b78      	ldr	r3, [pc, #480]	@ (8002c6c <main+0x1a04>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a92:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002a94:	4b76      	ldr	r3, [pc, #472]	@ (8002c70 <main+0x1a08>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	4b75      	ldr	r3, [pc, #468]	@ (8002c70 <main+0x1a08>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 13;
 8002aa4:	4b73      	ldr	r3, [pc, #460]	@ (8002c74 <main+0x1a0c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002aaa:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <main+0x1a10>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	4b71      	ldr	r3, [pc, #452]	@ (8002c78 <main+0x1a10>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ab8:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002aba:	4b70      	ldr	r3, [pc, #448]	@ (8002c7c <main+0x1a14>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	4b6e      	ldr	r3, [pc, #440]	@ (8002c7c <main+0x1a14>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ac8:	615a      	str	r2, [r3, #20]

		//Ensure N2O Fill is not filling
		led_n2o.port->ODR &= ~(N2O_LED);
 8002aca:	4b6d      	ldr	r3, [pc, #436]	@ (8002c80 <main+0x1a18>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c80 <main+0x1a18>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f022 0220 	bic.w	r2, r2, #32
 8002ad8:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002ada:	4b6a      	ldr	r3, [pc, #424]	@ (8002c84 <main+0x1a1c>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	4b68      	ldr	r3, [pc, #416]	@ (8002c84 <main+0x1a1c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ae8:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002aea:	4b67      	ldr	r3, [pc, #412]	@ (8002c88 <main+0x1a20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <main+0x1a20>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af8:	615a      	str	r2, [r3, #20]

		//Enable O2 to flow
		led_o2.port->ODR|=O2_LED;
 8002afa:	4b64      	ldr	r3, [pc, #400]	@ (8002c8c <main+0x1a24>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <main+0x1a24>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b08:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR |= CH2_Arm;
 8002b0a:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <main+0x1a28>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	4b5f      	ldr	r3, [pc, #380]	@ (8002c90 <main+0x1a28>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b18:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR |= CH2_Operate;
 8002b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8002c94 <main+0x1a2c>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	4b5c      	ldr	r3, [pc, #368]	@ (8002c94 <main+0x1a2c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b28:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c98 <main+0x1a30>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
		break;
 8002b30:	e2dc      	b.n	80030ec <main+0x1e84>

//**************************NEUTRAL STATE*************************************************************
	case 9:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8002b32:	4b4a      	ldr	r3, [pc, #296]	@ (8002c5c <main+0x19f4>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	4b48      	ldr	r3, [pc, #288]	@ (8002c5c <main+0x19f4>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b40:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002b42:	4b47      	ldr	r3, [pc, #284]	@ (8002c60 <main+0x19f8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	4b45      	ldr	r3, [pc, #276]	@ (8002c60 <main+0x19f8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b50:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8002b52:	4b44      	ldr	r3, [pc, #272]	@ (8002c64 <main+0x19fc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	4b42      	ldr	r3, [pc, #264]	@ (8002c64 <main+0x19fc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b60:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002b62:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <main+0x1a00>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	4b3f      	ldr	r3, [pc, #252]	@ (8002c68 <main+0x1a00>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b70:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002b72:	4b3e      	ldr	r3, [pc, #248]	@ (8002c6c <main+0x1a04>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	4b3c      	ldr	r3, [pc, #240]	@ (8002c6c <main+0x1a04>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b80:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002b82:	4b3b      	ldr	r3, [pc, #236]	@ (8002c70 <main+0x1a08>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <main+0x1a08>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b90:	615a      	str	r2, [r3, #20]


		//Turn OFF ignition coil relays
		Ignition1_ARM.port->ODR &= ~(IGNITION1_ARM);
 8002b92:	4b42      	ldr	r3, [pc, #264]	@ (8002c9c <main+0x1a34>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <main+0x1a34>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba0:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca0 <main+0x1a38>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <main+0x1a38>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION1_OP);
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca4 <main+0x1a3c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <main+0x1a3c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bc0:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002bc2:	4b39      	ldr	r3, [pc, #228]	@ (8002ca8 <main+0x1a40>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <main+0x1a40>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f022 0204 	bic.w	r2, r2, #4
 8002bd0:	615a      	str	r2, [r3, #20]


		//Ensure PURGE is not purging
		CH1_OP.port->ODR |= (CH1_Operate);
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <main+0x1a14>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	4b28      	ldr	r3, [pc, #160]	@ (8002c7c <main+0x1a14>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002be0:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002be2:	4b25      	ldr	r3, [pc, #148]	@ (8002c78 <main+0x1a10>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	4b23      	ldr	r3, [pc, #140]	@ (8002c78 <main+0x1a10>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf0:	615a      	str	r2, [r3, #20]

		//Ensure N2O is not filling
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <main+0x1a1c>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <main+0x1a1c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c00:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002c02:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <main+0x1a20>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <main+0x1a20>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c10:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8002c12:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <main+0x1a18>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <main+0x1a18>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f022 0220 	bic.w	r2, r2, #32
 8002c20:	615a      	str	r2, [r3, #20]

		//Ensure O2 is not filling
		led_o2.port->ODR &= ~(O2_LED);
 8002c22:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <main+0x1a24>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <main+0x1a24>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c30:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <main+0x1a28>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <main+0x1a28>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c40:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <main+0x1a2c>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <main+0x1a2c>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c50:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <main+0x1a30>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
		break;
 8002c58:	e248      	b.n	80030ec <main+0x1e84>
 8002c5a:	bf00      	nop
 8002c5c:	20000488 	.word	0x20000488
 8002c60:	200004a0 	.word	0x200004a0
 8002c64:	200004b8 	.word	0x200004b8
 8002c68:	200004d0 	.word	0x200004d0
 8002c6c:	200004e8 	.word	0x200004e8
 8002c70:	20000500 	.word	0x20000500
 8002c74:	20000164 	.word	0x20000164
 8002c78:	20000290 	.word	0x20000290
 8002c7c:	20000278 	.word	0x20000278
 8002c80:	20000458 	.word	0x20000458
 8002c84:	20000320 	.word	0x20000320
 8002c88:	20000308 	.word	0x20000308
 8002c8c:	20000470 	.word	0x20000470
 8002c90:	200002d8 	.word	0x200002d8
 8002c94:	200002c0 	.word	0x200002c0
 8002c98:	20000160 	.word	0x20000160
 8002c9c:	20000398 	.word	0x20000398
 8002ca0:	200003c8 	.word	0x200003c8
 8002ca4:	200003b0 	.word	0x200003b0
 8002ca8:	200003e0 	.word	0x200003e0

//**************************PURGE STATE*************************************************************
	case 10:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8002cac:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <main+0x1bf0>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	4b69      	ldr	r3, [pc, #420]	@ (8002e58 <main+0x1bf0>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cba:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002cbc:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <main+0x1bf4>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	4b66      	ldr	r3, [pc, #408]	@ (8002e5c <main+0x1bf4>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cca:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8002ccc:	4b64      	ldr	r3, [pc, #400]	@ (8002e60 <main+0x1bf8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	4b63      	ldr	r3, [pc, #396]	@ (8002e60 <main+0x1bf8>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cda:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002cdc:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <main+0x1bfc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	4b60      	ldr	r3, [pc, #384]	@ (8002e64 <main+0x1bfc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cea:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8002cec:	4b5e      	ldr	r3, [pc, #376]	@ (8002e68 <main+0x1c00>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <main+0x1c00>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfa:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8002e6c <main+0x1c04>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	4b5a      	ldr	r3, [pc, #360]	@ (8002e6c <main+0x1c04>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0a:	615a      	str	r2, [r3, #20]
		//Presuming relay 1 is the DUMP relay!
		//PURGE is NO -> output a low to purge
		//output a high to stop purging!

		//Ensure Ignition is not igniting
		Ignition1_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002d0c:	4b58      	ldr	r3, [pc, #352]	@ (8002e70 <main+0x1c08>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	4b57      	ldr	r3, [pc, #348]	@ (8002e70 <main+0x1c08>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f022 0208 	bic.w	r2, r2, #8
 8002d1a:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION2_OP);
 8002d1c:	4b55      	ldr	r3, [pc, #340]	@ (8002e74 <main+0x1c0c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	4b54      	ldr	r3, [pc, #336]	@ (8002e74 <main+0x1c0c>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	615a      	str	r2, [r3, #20]

		//Turn off N2O Solenoid and turn off LED
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002d2c:	4b52      	ldr	r3, [pc, #328]	@ (8002e78 <main+0x1c10>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	4b51      	ldr	r3, [pc, #324]	@ (8002e78 <main+0x1c10>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d3a:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e7c <main+0x1c14>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <main+0x1c14>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4a:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e80 <main+0x1c18>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	4b4b      	ldr	r3, [pc, #300]	@ (8002e80 <main+0x1c18>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f022 0220 	bic.w	r2, r2, #32
 8002d5a:	615a      	str	r2, [r3, #20]

		//Turn off O2 Solenoid and turn off LED
		led_o2.port->ODR &= ~(O2_LED);
 8002d5c:	4b49      	ldr	r3, [pc, #292]	@ (8002e84 <main+0x1c1c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	4b48      	ldr	r3, [pc, #288]	@ (8002e84 <main+0x1c1c>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d6a:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002d6c:	4b46      	ldr	r3, [pc, #280]	@ (8002e88 <main+0x1c20>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	4b45      	ldr	r3, [pc, #276]	@ (8002e88 <main+0x1c20>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d7a:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8002d7c:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <main+0x1c24>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	4b42      	ldr	r3, [pc, #264]	@ (8002e8c <main+0x1c24>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8a:	615a      	str	r2, [r3, #20]

		//Power off PURGE solenoid therefore starting purge
		CH1_ARM.port->ODR &= ~(CH1_Arm);
 8002d8c:	4b40      	ldr	r3, [pc, #256]	@ (8002e90 <main+0x1c28>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <main+0x1c28>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d9a:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR &= ~(CH1_Operate);
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e94 <main+0x1c2c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	4b3c      	ldr	r3, [pc, #240]	@ (8002e94 <main+0x1c2c>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002daa:	615a      	str	r2, [r3, #20]

		switch_case_state = 0;
 8002dac:	4b3a      	ldr	r3, [pc, #232]	@ (8002e98 <main+0x1c30>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
		break;
 8002db2:	e19b      	b.n	80030ec <main+0x1e84>
  __ASM volatile ("cpsid i" : : : "memory");
 8002db4:	b672      	cpsid	i
}
 8002db6:	bf00      	nop

		//Disable IRQs - we are igniting, nothing can stop this....
		__disable_irq();

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002db8:	4b27      	ldr	r3, [pc, #156]	@ (8002e58 <main+0x1bf0>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <main+0x1bf0>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dc6:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <main+0x1bf4>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	4b23      	ldr	r3, [pc, #140]	@ (8002e5c <main+0x1bf4>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd6:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002dd8:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <main+0x1bf8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <main+0x1bf8>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de6:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <main+0x1bfc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <main+0x1bfc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df6:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <main+0x1c00>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <main+0x1c00>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e06:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <main+0x1c04>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <main+0x1c04>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e16:	615a      	str	r2, [r3, #20]

		//Check O2 Fill status - as we check for igniton first in case 4 - we need to check O2 again to ensure that we actuate correctly
		if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <main+0x1c34>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03d      	beq.n	8002ea0 <main+0x1c38>
			//Turn ON O2 Solenoid and turn on LED
			led_o2.port->ODR |= (O2_LED);
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <main+0x1c1c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <main+0x1c1c>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e32:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm);
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <main+0x1c20>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <main+0x1c20>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e42:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate);
 8002e44:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <main+0x1c24>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <main+0x1c24>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e52:	615a      	str	r2, [r3, #20]
 8002e54:	e03c      	b.n	8002ed0 <main+0x1c68>
 8002e56:	bf00      	nop
 8002e58:	20000488 	.word	0x20000488
 8002e5c:	200004a0 	.word	0x200004a0
 8002e60:	200004b8 	.word	0x200004b8
 8002e64:	200004d0 	.word	0x200004d0
 8002e68:	200004e8 	.word	0x200004e8
 8002e6c:	20000500 	.word	0x20000500
 8002e70:	20000398 	.word	0x20000398
 8002e74:	200003b0 	.word	0x200003b0
 8002e78:	20000320 	.word	0x20000320
 8002e7c:	20000308 	.word	0x20000308
 8002e80:	20000458 	.word	0x20000458
 8002e84:	20000470 	.word	0x20000470
 8002e88:	200002d8 	.word	0x200002d8
 8002e8c:	200002c0 	.word	0x200002c0
 8002e90:	20000290 	.word	0x20000290
 8002e94:	20000278 	.word	0x20000278
 8002e98:	20000160 	.word	0x20000160
 8002e9c:	20000161 	.word	0x20000161
		}
		else {
			//Turn off O2 Solenoid and turn off LED
			led_o2.port->ODR &= ~(O2_LED);
 8002ea0:	4b93      	ldr	r3, [pc, #588]	@ (80030f0 <main+0x1e88>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b92      	ldr	r3, [pc, #584]	@ (80030f0 <main+0x1e88>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eae:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002eb0:	4b90      	ldr	r3, [pc, #576]	@ (80030f4 <main+0x1e8c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80030f4 <main+0x1e8c>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ebe:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 8002ec0:	4b8d      	ldr	r3, [pc, #564]	@ (80030f8 <main+0x1e90>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	4b8c      	ldr	r3, [pc, #560]	@ (80030f8 <main+0x1e90>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ece:	615a      	str	r2, [r3, #20]
		}

		//Ensure N2O LED are OFF
		led_n2o.port->ODR &= ~(N2O_LED);
 8002ed0:	4b8a      	ldr	r3, [pc, #552]	@ (80030fc <main+0x1e94>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b89      	ldr	r3, [pc, #548]	@ (80030fc <main+0x1e94>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f022 0220 	bic.w	r2, r2, #32
 8002ede:	615a      	str	r2, [r3, #20]

		//Ensure N2O solenoid is OFF
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002ee0:	4b87      	ldr	r3, [pc, #540]	@ (8003100 <main+0x1e98>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	4b86      	ldr	r3, [pc, #536]	@ (8003100 <main+0x1e98>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eee:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002ef0:	4b84      	ldr	r3, [pc, #528]	@ (8003104 <main+0x1e9c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	4b83      	ldr	r3, [pc, #524]	@ (8003104 <main+0x1e9c>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002efe:	615a      	str	r2, [r3, #20]

		//Ensure the DUMP solenoid is not dumping
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002f00:	4b81      	ldr	r3, [pc, #516]	@ (8003108 <main+0x1ea0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	4b80      	ldr	r3, [pc, #512]	@ (8003108 <main+0x1ea0>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f0e:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002f10:	4b7e      	ldr	r3, [pc, #504]	@ (800310c <main+0x1ea4>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	4b7d      	ldr	r3, [pc, #500]	@ (800310c <main+0x1ea4>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f1e:	615a      	str	r2, [r3, #20]


		//Spark Generation Sequence, 5 sparks total
	//	Ignition1_ARM.port->ODR |= IGNITION1_ARM;
		//Ignition1_OP.port->ODR |= IGNITION1_OP;
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002f20:	4b7b      	ldr	r3, [pc, #492]	@ (8003110 <main+0x1ea8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	4b7a      	ldr	r3, [pc, #488]	@ (8003110 <main+0x1ea8>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f042 0208 	orr.w	r2, r2, #8
 8002f2e:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002f30:	4b78      	ldr	r3, [pc, #480]	@ (8003114 <main+0x1eac>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	4b77      	ldr	r3, [pc, #476]	@ (8003114 <main+0x1eac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f042 0204 	orr.w	r2, r2, #4
 8002f3e:	615a      	str	r2, [r3, #20]
		delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002f40:	201e      	movs	r0, #30
 8002f42:	f000 fe67 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002f46:	4b73      	ldr	r3, [pc, #460]	@ (8003114 <main+0x1eac>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	4b71      	ldr	r3, [pc, #452]	@ (8003114 <main+0x1eac>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f022 0204 	bic.w	r2, r2, #4
 8002f54:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <main+0x1ea8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003110 <main+0x1ea8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f022 0208 	bic.w	r2, r2, #8
 8002f64:	615a      	str	r2, [r3, #20]
		delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002f66:	201e      	movs	r0, #30
 8002f68:	f000 fe54 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002f6c:	4b69      	ldr	r3, [pc, #420]	@ (8003114 <main+0x1eac>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <main+0x1eac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f042 0204 	orr.w	r2, r2, #4
 8002f7a:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002f7c:	4b64      	ldr	r3, [pc, #400]	@ (8003110 <main+0x1ea8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	4b63      	ldr	r3, [pc, #396]	@ (8003110 <main+0x1ea8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	615a      	str	r2, [r3, #20]
		delay_software_ms(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002f8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f90:	f000 fe40 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002f94:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <main+0x1eac>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003114 <main+0x1eac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8003110 <main+0x1ea8>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b59      	ldr	r3, [pc, #356]	@ (8003110 <main+0x1ea8>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f022 0208 	bic.w	r2, r2, #8
 8002fb2:	615a      	str	r2, [r3, #20]
		delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002fb4:	201e      	movs	r0, #30
 8002fb6:	f000 fe2d 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002fba:	4b56      	ldr	r3, [pc, #344]	@ (8003114 <main+0x1eac>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <main+0x1eac>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f042 0204 	orr.w	r2, r2, #4
 8002fc8:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002fca:	4b51      	ldr	r3, [pc, #324]	@ (8003110 <main+0x1ea8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8003110 <main+0x1ea8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f042 0208 	orr.w	r2, r2, #8
 8002fd8:	615a      	str	r2, [r3, #20]
		delay_software_ms(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002fda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fde:	f000 fe19 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8003114 <main+0x1eac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <main+0x1eac>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f022 0204 	bic.w	r2, r2, #4
 8002ff0:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002ff2:	4b47      	ldr	r3, [pc, #284]	@ (8003110 <main+0x1ea8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	4b45      	ldr	r3, [pc, #276]	@ (8003110 <main+0x1ea8>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f022 0208 	bic.w	r2, r2, #8
 8003000:	615a      	str	r2, [r3, #20]
		delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 8003002:	201e      	movs	r0, #30
 8003004:	f000 fe06 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8003008:	4b42      	ldr	r3, [pc, #264]	@ (8003114 <main+0x1eac>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <main+0x1eac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f042 0204 	orr.w	r2, r2, #4
 8003016:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8003018:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <main+0x1ea8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	4b3c      	ldr	r3, [pc, #240]	@ (8003110 <main+0x1ea8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	615a      	str	r2, [r3, #20]
		delay_software_ms(500); //provide a delay to ensure fire state has been activated for a long enough time
 8003028:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800302c:	f000 fdf2 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8003030:	4b38      	ldr	r3, [pc, #224]	@ (8003114 <main+0x1eac>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	4b37      	ldr	r3, [pc, #220]	@ (8003114 <main+0x1eac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8003040:	4b33      	ldr	r3, [pc, #204]	@ (8003110 <main+0x1ea8>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	4b32      	ldr	r3, [pc, #200]	@ (8003110 <main+0x1ea8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f022 0208 	bic.w	r2, r2, #8
 800304e:	615a      	str	r2, [r3, #20]
		delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 8003050:	201e      	movs	r0, #30
 8003052:	f000 fddf 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8003056:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <main+0x1eac>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <main+0x1eac>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f042 0204 	orr.w	r2, r2, #4
 8003064:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8003066:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <main+0x1ea8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	4b28      	ldr	r3, [pc, #160]	@ (8003110 <main+0x1ea8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f042 0208 	orr.w	r2, r2, #8
 8003074:	615a      	str	r2, [r3, #20]
		delay_software_ms(500); //provide a delay to ensure fire state has been activated for a long enough time
 8003076:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800307a:	f000 fdcb 	bl	8003c14 <delay_software_ms>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 800307e:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <main+0x1eac>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <main+0x1eac>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f022 0204 	bic.w	r2, r2, #4
 800308c:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 800308e:	4b20      	ldr	r3, [pc, #128]	@ (8003110 <main+0x1ea8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <main+0x1ea8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	615a      	str	r2, [r3, #20]
		delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 800309e:	201e      	movs	r0, #30
 80030a0:	f000 fdb8 	bl	8003c14 <delay_software_ms>

		//Disarm Ignition circuit
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <main+0x1ea8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	4b19      	ldr	r3, [pc, #100]	@ (8003110 <main+0x1ea8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f042 0208 	orr.w	r2, r2, #8
 80030b2:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <main+0x1eac>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	4b16      	ldr	r3, [pc, #88]	@ (8003114 <main+0x1eac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f042 0204 	orr.w	r2, r2, #4
 80030c2:	615a      	str	r2, [r3, #20]

		delay_software_ms(500); //provide a delay to ensure fire state has been activated for a long enough time
 80030c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030c8:	f000 fda4 	bl	8003c14 <delay_software_ms>

		//Manually removes "ignition" state bit from last read LoRa packet info
		state &= ~(0x02 <<2); //this if more so for remote control 0bxxxx11xx become 0
 80030cc:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <main+0x1eb0>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f023 0308 	bic.w	r3, r3, #8
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <main+0x1eb0>)
 80030d8:	701a      	strb	r2, [r3, #0]
		switch_case_state = 0;
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <main+0x1eb4>)
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030e0:	b662      	cpsie	i
}
 80030e2:	bf00      	nop
		//turns of the ignite state once done!
		//state cannot be triggered more than once sequentially!
		__enable_irq();
		break;
 80030e4:	e002      	b.n	80030ec <main+0x1e84>
			break; //enter PURGE state
 80030e6:	bf00      	nop
 80030e8:	f7fe bc35 	b.w	8001956 <main+0x6ee>
	switch(switch_case_state){
 80030ec:	f7fe bc33 	b.w	8001956 <main+0x6ee>
 80030f0:	20000470 	.word	0x20000470
 80030f4:	200002d8 	.word	0x200002d8
 80030f8:	200002c0 	.word	0x200002c0
 80030fc:	20000458 	.word	0x20000458
 8003100:	20000320 	.word	0x20000320
 8003104:	20000308 	.word	0x20000308
 8003108:	20000290 	.word	0x20000290
 800310c:	20000278 	.word	0x20000278
 8003110:	200003c8 	.word	0x200003c8
 8003114:	200003e0 	.word	0x200003e0
 8003118:	20000161 	.word	0x20000161
 800311c:	20000160 	.word	0x20000160

08003120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
 **/
void SystemClock_Config(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b094      	sub	sp, #80	@ 0x50
 8003124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003126:	f107 0320 	add.w	r3, r7, #32
 800312a:	2230      	movs	r2, #48	@ 0x30
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fade 	bl	80066f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	4b2b      	ldr	r3, [pc, #172]	@ (80031f8 <SystemClock_Config+0xd8>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	4a2a      	ldr	r2, [pc, #168]	@ (80031f8 <SystemClock_Config+0xd8>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003152:	6413      	str	r3, [r2, #64]	@ 0x40
 8003154:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <SystemClock_Config+0xd8>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003160:	2300      	movs	r3, #0
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <SystemClock_Config+0xdc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a24      	ldr	r2, [pc, #144]	@ (80031fc <SystemClock_Config+0xdc>)
 800316a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <SystemClock_Config+0xdc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800317c:	2302      	movs	r3, #2
 800317e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003180:	2301      	movs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003184:	2310      	movs	r3, #16
 8003186:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003188:	2302      	movs	r3, #2
 800318a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800318c:	2300      	movs	r3, #0
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003190:	2308      	movs	r3, #8
 8003192:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003194:	23b4      	movs	r3, #180	@ 0xb4
 8003196:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003198:	2302      	movs	r3, #2
 800319a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800319c:	2304      	movs	r3, #4
 800319e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fb51 	bl	800584c <HAL_RCC_OscConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031b0:	f000 fc3c 	bl	8003a2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031b4:	f002 fafa 	bl	80057ac <HAL_PWREx_EnableOverDrive>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80031be:	f000 fc35 	bl	8003a2c <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c2:	230f      	movs	r3, #15
 80031c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c6:	2302      	movs	r3, #2
 80031c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80031d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	2105      	movs	r1, #5
 80031e0:	4618      	mov	r0, r3
 80031e2:	f002 fdab 	bl	8005d3c <HAL_RCC_ClockConfig>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80031ec:	f000 fc1e 	bl	8003a2c <Error_Handler>
  }
}
 80031f0:	bf00      	nop
 80031f2:	3750      	adds	r7, #80	@ 0x50
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000

08003200 <MX_SPI1_Init>:


static void MX_SPI1_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003204:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003206:	4a19      	ldr	r2, [pc, #100]	@ (800326c <MX_SPI1_Init+0x6c>)
 8003208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <MX_SPI1_Init+0x68>)
 800320c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <MX_SPI1_Init+0x68>)
 800321a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800321e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003222:	2202      	movs	r2, #2
 8003224:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003228:	2201      	movs	r2, #1
 800322a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800322c:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <MX_SPI1_Init+0x68>)
 800322e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003232:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003236:	2218      	movs	r2, #24
 8003238:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800323a:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <MX_SPI1_Init+0x68>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003240:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003246:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800324c:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <MX_SPI1_Init+0x68>)
 800324e:	220a      	movs	r2, #10
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003252:	4805      	ldr	r0, [pc, #20]	@ (8003268 <MX_SPI1_Init+0x68>)
 8003254:	f002 ff3e 	bl	80060d4 <HAL_SPI_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800325e:	f000 fbe5 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000108 	.word	0x20000108
 800326c:	40013000 	.word	0x40013000

08003270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	@ 0x30
 8003274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	4b45      	ldr	r3, [pc, #276]	@ (80033a0 <MX_GPIO_Init+0x130>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a44      	ldr	r2, [pc, #272]	@ (80033a0 <MX_GPIO_Init+0x130>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b42      	ldr	r3, [pc, #264]	@ (80033a0 <MX_GPIO_Init+0x130>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a3d      	ldr	r2, [pc, #244]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032ac:	f043 0320 	orr.w	r3, r3, #32
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b3b      	ldr	r3, [pc, #236]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a36      	ldr	r2, [pc, #216]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b34      	ldr	r3, [pc, #208]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b30      	ldr	r3, [pc, #192]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a2f      	ldr	r2, [pc, #188]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <MX_GPIO_Init+0x130>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a28      	ldr	r2, [pc, #160]	@ (80033a0 <MX_GPIO_Init+0x130>)
 8003300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b26      	ldr	r3, [pc, #152]	@ (80033a0 <MX_GPIO_Init+0x130>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <MX_GPIO_Init+0x130>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <MX_GPIO_Init+0x130>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <MX_GPIO_Init+0x130>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	2140      	movs	r1, #64	@ 0x40
 8003332:	481c      	ldr	r0, [pc, #112]	@ (80033a4 <MX_GPIO_Init+0x134>)
 8003334:	f001 f9aa 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8003338:	2200      	movs	r2, #0
 800333a:	2110      	movs	r1, #16
 800333c:	481a      	ldr	r0, [pc, #104]	@ (80033a8 <MX_GPIO_Init+0x138>)
 800333e:	f001 f9a5 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003342:	2340      	movs	r3, #64	@ 0x40
 8003344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	2301      	movs	r3, #1
 8003348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4812      	ldr	r0, [pc, #72]	@ (80033a4 <MX_GPIO_Init+0x134>)
 800335a:	f000 ffeb 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800335e:	2310      	movs	r3, #16
 8003360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003362:	2301      	movs	r3, #1
 8003364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	480c      	ldr	r0, [pc, #48]	@ (80033a8 <MX_GPIO_Init+0x138>)
 8003376:	f000 ffdd 	bl	8004334 <HAL_GPIO_Init>


  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800337a:	2304      	movs	r3, #4
 800337c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337e:	2301      	movs	r3, #1
 8003380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	4806      	ldr	r0, [pc, #24]	@ (80033ac <MX_GPIO_Init+0x13c>)
 8003392:	f000 ffcf 	bl	8004334 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003396:	bf00      	nop
 8003398:	3730      	adds	r7, #48	@ 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40021400 	.word	0x40021400
 80033a8:	40021800 	.word	0x40021800
 80033ac:	40020000 	.word	0x40020000

080033b0 <MX_I2C2_Init>:


/* USER CODE BEGIN 4 */

static void MX_I2C2_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <MX_I2C2_Init+0x78>)
 80033b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80033ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <MX_I2C2_Init+0x7c>)
 80033be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033c0:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80033c6:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033cc:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d4:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e0:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033ec:	480d      	ldr	r0, [pc, #52]	@ (8003424 <MX_I2C2_Init+0x74>)
 80033ee:	f001 f967 	bl	80046c0 <HAL_I2C_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80033f8:	f000 fb18 	bl	8003a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033fc:	2100      	movs	r1, #0
 80033fe:	4809      	ldr	r0, [pc, #36]	@ (8003424 <MX_I2C2_Init+0x74>)
 8003400:	f002 f958 	bl	80056b4 <HAL_I2CEx_ConfigAnalogFilter>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800340a:	f000 fb0f 	bl	8003a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800340e:	2100      	movs	r1, #0
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <MX_I2C2_Init+0x74>)
 8003412:	f002 f98b 	bl	800572c <HAL_I2CEx_ConfigDigitalFilter>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800341c:	f000 fb06 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	2000005c 	.word	0x2000005c
 8003428:	40005800 	.word	0x40005800
 800342c:	000186a0 	.word	0x000186a0

08003430 <TIM1_UP_TIM10_IRQHandler>:
  /** Configure Digital filter
  */


void TIM1_UP_TIM10_IRQHandler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	hardware_timer_count++;
 8003434:	4b32      	ldr	r3, [pc, #200]	@ (8003500 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b30      	ldr	r3, [pc, #192]	@ (8003500 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 800343e:	701a      	strb	r2, [r3, #0]
	if(hardware_timer_count<5)
 8003440:	4b2f      	ldr	r3, [pc, #188]	@ (8003500 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d806      	bhi.n	8003456 <TIM1_UP_TIM10_IRQHandler+0x26>
	{
		   //Hardware Timer interrupt callback for LoRa RX
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8003448:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6113      	str	r3, [r2, #16]

		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
		hardware_timer_count = 0;
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
	}
}
 8003454:	e04f      	b.n	80034f6 <TIM1_UP_TIM10_IRQHandler+0xc6>
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8003456:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	4b2a      	ldr	r3, [pc, #168]	@ (8003508 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003464:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8003466:	4b29      	ldr	r3, [pc, #164]	@ (800350c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003474:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8003476:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f022 0220 	bic.w	r2, r2, #32
 8003484:	615a      	str	r2, [r3, #20]
		led_o2.port->ODR &= ~(O2_LED);
 8003486:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003494:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034a4:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 80034a6:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <TIM1_UP_TIM10_IRQHandler+0xec>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <TIM1_UP_TIM10_IRQHandler+0xec>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b4:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= CH1_Arm;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c4:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= CH1_Operate;
 80034c6:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d4:	615a      	str	r2, [r3, #20]
		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 80034e2:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4a05      	ldr	r2, [pc, #20]	@ (8003504 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6113      	str	r3, [r2, #16]
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000166 	.word	0x20000166
 8003504:	40010000 	.word	0x40010000
 8003508:	20000320 	.word	0x20000320
 800350c:	20000308 	.word	0x20000308
 8003510:	20000458 	.word	0x20000458
 8003514:	20000470 	.word	0x20000470
 8003518:	200002d8 	.word	0x200002d8
 800351c:	200002c0 	.word	0x200002c0
 8003520:	20000290 	.word	0x20000290
 8003524:	20000278 	.word	0x20000278
 8003528:	20000161 	.word	0x20000161

0800352c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	delay_software_us(200); //200us delay to prevent debouncing
 8003530:	20c8      	movs	r0, #200	@ 0xc8
 8003532:	f000 fb53 	bl	8003bdc <delay_software_us>
   	if(EXTI->PR & EXTI_PR_PR1) //if the rising edge has been detected by pin 2
 8003536:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01d      	beq.n	800357e <EXTI1_IRQHandler+0x52>
   	{
   		EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4a0f      	ldr	r2, [pc, #60]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	6153      	str	r3, [r2, #20]
   		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == LOCAL_CONTROL_SW)
 800354e:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <EXTI1_IRQHandler+0x5c>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355c:	d109      	bne.n	8003572 <EXTI1_IRQHandler+0x46>
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4a08      	ldr	r2, [pc, #32]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003564:	f023 0302 	bic.w	r3, r3, #2
 8003568:	6153      	str	r3, [r2, #20]
			dump_flag = 1; //tells program manual dump flag has been set!
 800356a:	4b08      	ldr	r3, [pc, #32]	@ (800358c <EXTI1_IRQHandler+0x60>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
   		else
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
   		}
   	}
}
 8003570:	e005      	b.n	800357e <EXTI1_IRQHandler+0x52>
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8003572:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4a03      	ldr	r2, [pc, #12]	@ (8003584 <EXTI1_IRQHandler+0x58>)
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	6153      	str	r3, [r2, #20]
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40013c00 	.word	0x40013c00
 8003588:	20000530 	.word	0x20000530
 800358c:	20000167 	.word	0x20000167

08003590 <EXTI3_IRQHandler>:


//ambient temperature alert!
void EXTI3_IRQHandler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  	if(EXTI->PR & EXTI_PR_PR3) //if the rising edge has been detected by pin 2
 8003594:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <EXTI3_IRQHandler+0x28>)
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <EXTI3_IRQHandler+0x1c>
  	{
  		EXTI->PR &= ~EXTI_PR_PR3; //resets the flag
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <EXTI3_IRQHandler+0x28>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <EXTI3_IRQHandler+0x28>)
 80035a6:	f023 0308 	bic.w	r3, r3, #8
 80035aa:	6153      	str	r3, [r2, #20]
  		//do something here
  	}
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40013c00 	.word	0x40013c00

080035bc <EXTI9_5_IRQHandler>:



// LoRa DIO Interrupt
void EXTI9_5_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	   *  5) Proceed
	   */
	//  test_rx_interrupt++;
	 // uint8_t transmit_state = 0;
 	// SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
	EXTI->PR &= ~0x1F0; //resets the flag
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <EXTI9_5_IRQHandler+0x20>)
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <EXTI9_5_IRQHandler+0x20>)
 80035c6:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 80035ca:	6153      	str	r3, [r2, #20]
	triggerRX= true;
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <EXTI9_5_IRQHandler+0x24>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 80035d2:	2017      	movs	r0, #23
 80035d4:	f7fd fdfa 	bl	80011cc <__NVIC_DisableIRQ>

}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40013c00 	.word	0x40013c00
 80035e0:	2000016a 	.word	0x2000016a

080035e4 <RX_Receive>:

void RX_Receive(void)
{
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035ea:	b672      	cpsid	i
}
 80035ec:	bf00      	nop
	__disable_irq(); //uncomment after testing!!
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 80035ee:	2017      	movs	r0, #23
 80035f0:	f7fd fdec 	bl	80011cc <__NVIC_DisableIRQ>
	//__NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn); //Disable IQR for LoRa Hardware Timer

	delay_software_ms(100); //important!!
 80035f4:	2064      	movs	r0, #100	@ 0x64
 80035f6:	f000 fb0d 	bl	8003c14 <delay_software_ms>


	bool RX_result = SX1272_readReceive(&lora, pointerdata, LORA_MSG_LENGTH);
 80035fa:	2220      	movs	r2, #32
 80035fc:	497d      	ldr	r1, [pc, #500]	@ (80037f4 <RX_Receive+0x210>)
 80035fe:	487e      	ldr	r0, [pc, #504]	@ (80037f8 <RX_Receive+0x214>)
 8003600:	f7fd fd03 	bl	800100a <SX1272_readReceive>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	triggerRX = false;
 800360a:	4b7c      	ldr	r3, [pc, #496]	@ (80037fc <RX_Receive+0x218>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
	GSE_Command.id= pointerdata[0];
 8003610:	4b78      	ldr	r3, [pc, #480]	@ (80037f4 <RX_Receive+0x210>)
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	4b7a      	ldr	r3, [pc, #488]	@ (8003800 <RX_Receive+0x21c>)
 8003616:	701a      	strb	r2, [r3, #0]
	GSE_Command.data[0]= pointerdata[1];
 8003618:	4b76      	ldr	r3, [pc, #472]	@ (80037f4 <RX_Receive+0x210>)
 800361a:	785a      	ldrb	r2, [r3, #1]
 800361c:	4b78      	ldr	r3, [pc, #480]	@ (8003800 <RX_Receive+0x21c>)
 800361e:	705a      	strb	r2, [r3, #1]
	GSE_Command.data[1]= pointerdata[2];
 8003620:	4b74      	ldr	r3, [pc, #464]	@ (80037f4 <RX_Receive+0x210>)
 8003622:	789a      	ldrb	r2, [r3, #2]
 8003624:	4b76      	ldr	r3, [pc, #472]	@ (8003800 <RX_Receive+0x21c>)
 8003626:	709a      	strb	r2, [r3, #2]


	if(GSE_Command.id != 0x02)
 8003628:	4b75      	ldr	r3, [pc, #468]	@ (8003800 <RX_Receive+0x21c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d00a      	beq.n	8003646 <RX_Receive+0x62>
	{
		lora_error = ERROR_INVALID_PACKET_ID;
 8003630:	4b74      	ldr	r3, [pc, #464]	@ (8003804 <RX_Receive+0x220>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 8003636:	4b74      	ldr	r3, [pc, #464]	@ (8003808 <RX_Receive+0x224>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <RX_Receive+0x224>)
 8003640:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8003642:	bf00      	nop
		__asm("NOP");
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
	}


}
 8003644:	e1d6      	b.n	80039f4 <RX_Receive+0x410>
	else if ((GSE_Command.data[0] & GSE_Command.data[1]) == 0x00)
 8003646:	4b6e      	ldr	r3, [pc, #440]	@ (8003800 <RX_Receive+0x21c>)
 8003648:	785a      	ldrb	r2, [r3, #1]
 800364a:	4b6d      	ldr	r3, [pc, #436]	@ (8003800 <RX_Receive+0x21c>)
 800364c:	789b      	ldrb	r3, [r3, #2]
 800364e:	4013      	ands	r3, r2
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 81c1 	bne.w	80039da <RX_Receive+0x3f6>
		led_power.port->ODR |= PWR_LED; //Turn ON LED
 8003658:	4b6c      	ldr	r3, [pc, #432]	@ (800380c <RX_Receive+0x228>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	4b6b      	ldr	r3, [pc, #428]	@ (800380c <RX_Receive+0x228>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	615a      	str	r2, [r3, #20]
		lora_error_test++;
 8003668:	4b69      	ldr	r3, [pc, #420]	@ (8003810 <RX_Receive+0x22c>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b67      	ldr	r3, [pc, #412]	@ (8003810 <RX_Receive+0x22c>)
 8003672:	701a      	strb	r2, [r3, #0]
		state = GSE_Command.data[0];
 8003674:	4b62      	ldr	r3, [pc, #392]	@ (8003800 <RX_Receive+0x21c>)
 8003676:	785a      	ldrb	r2, [r3, #1]
 8003678:	4b66      	ldr	r3, [pc, #408]	@ (8003814 <RX_Receive+0x230>)
 800367a:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 800367c:	4b62      	ldr	r3, [pc, #392]	@ (8003808 <RX_Receive+0x224>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
		uint8_t transmit_state = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		switch(TX_Packet_Flag)
 8003688:	4b63      	ldr	r3, [pc, #396]	@ (8003818 <RX_Receive+0x234>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <RX_Receive+0xb4>
 8003690:	2b01      	cmp	r3, #1
 8003692:	f000 80d3 	beq.w	800383c <RX_Receive+0x258>
 8003696:	e16f      	b.n	8003978 <RX_Receive+0x394>
				packet = Dummy_Transmit();
 8003698:	4c60      	ldr	r4, [pc, #384]	@ (800381c <RX_Receive+0x238>)
 800369a:	463b      	mov	r3, r7
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fb7b 	bl	8000d98 <Dummy_Transmit>
 80036a2:	4625      	mov	r5, r4
 80036a4:	463c      	mov	r4, r7
 80036a6:	6820      	ldr	r0, [r4, #0]
 80036a8:	6861      	ldr	r1, [r4, #4]
 80036aa:	68a2      	ldr	r2, [r4, #8]
 80036ac:	68e3      	ldr	r3, [r4, #12]
 80036ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b0:	6920      	ldr	r0, [r4, #16]
 80036b2:	6961      	ldr	r1, [r4, #20]
 80036b4:	69a2      	ldr	r2, [r4, #24]
 80036b6:	69e3      	ldr	r3, [r4, #28]
 80036b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x06;
 80036ba:	4b58      	ldr	r3, [pc, #352]	@ (800381c <RX_Receive+0x238>)
 80036bc:	2206      	movs	r2, #6
 80036be:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 80036c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003800 <RX_Receive+0x21c>)
 80036c2:	785a      	ldrb	r2, [r3, #1]
 80036c4:	4b55      	ldr	r3, [pc, #340]	@ (800381c <RX_Receive+0x238>)
 80036c6:	705a      	strb	r2, [r3, #1]
				* floatPtr = (uint8_t *) &TRANSDUCER_1.read_value_bar;
 80036c8:	4b55      	ldr	r3, [pc, #340]	@ (8003820 <RX_Receive+0x23c>)
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	701a      	strb	r2, [r3, #0]
				packet.data[1] = floatPtr[3];
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	78da      	ldrb	r2, [r3, #3]
 80036d4:	4b51      	ldr	r3, [pc, #324]	@ (800381c <RX_Receive+0x238>)
 80036d6:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	789a      	ldrb	r2, [r3, #2]
 80036dc:	4b4f      	ldr	r3, [pc, #316]	@ (800381c <RX_Receive+0x238>)
 80036de:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	785a      	ldrb	r2, [r3, #1]
 80036e4:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <RX_Receive+0x238>)
 80036e6:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	4b4b      	ldr	r3, [pc, #300]	@ (800381c <RX_Receive+0x238>)
 80036ee:	715a      	strb	r2, [r3, #5]
				* floatPtr = (uint8_t *) &TRANSDUCER_2.read_value_bar;
 80036f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003824 <RX_Receive+0x240>)
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	701a      	strb	r2, [r3, #0]
				packet.data[5] = floatPtr[3];
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	78da      	ldrb	r2, [r3, #3]
 80036fc:	4b47      	ldr	r3, [pc, #284]	@ (800381c <RX_Receive+0x238>)
 80036fe:	719a      	strb	r2, [r3, #6]
				packet.data[6] = floatPtr[2];
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	789a      	ldrb	r2, [r3, #2]
 8003704:	4b45      	ldr	r3, [pc, #276]	@ (800381c <RX_Receive+0x238>)
 8003706:	71da      	strb	r2, [r3, #7]
				packet.data[7] = floatPtr[1];
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	785a      	ldrb	r2, [r3, #1]
 800370c:	4b43      	ldr	r3, [pc, #268]	@ (800381c <RX_Receive+0x238>)
 800370e:	721a      	strb	r2, [r3, #8]
				packet.data[8] = floatPtr[0];
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	4b41      	ldr	r3, [pc, #260]	@ (800381c <RX_Receive+0x238>)
 8003716:	725a      	strb	r2, [r3, #9]
				* floatPtr = (uint8_t *) &TRANSDUCER_3.read_value_bar;
 8003718:	4b43      	ldr	r3, [pc, #268]	@ (8003828 <RX_Receive+0x244>)
 800371a:	b2da      	uxtb	r2, r3
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	701a      	strb	r2, [r3, #0]
				packet.data[9] = floatPtr[3];
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	78da      	ldrb	r2, [r3, #3]
 8003724:	4b3d      	ldr	r3, [pc, #244]	@ (800381c <RX_Receive+0x238>)
 8003726:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	789a      	ldrb	r2, [r3, #2]
 800372c:	4b3b      	ldr	r3, [pc, #236]	@ (800381c <RX_Receive+0x238>)
 800372e:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	785a      	ldrb	r2, [r3, #1]
 8003734:	4b39      	ldr	r3, [pc, #228]	@ (800381c <RX_Receive+0x238>)
 8003736:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	4b37      	ldr	r3, [pc, #220]	@ (800381c <RX_Receive+0x238>)
 800373e:	735a      	strb	r2, [r3, #13]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_1.temp;
 8003740:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <RX_Receive+0x248>)
 8003742:	b2da      	uxtb	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	701a      	strb	r2, [r3, #0]
				packet.data[13] = floatPtr[3];
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	78da      	ldrb	r2, [r3, #3]
 800374c:	4b33      	ldr	r3, [pc, #204]	@ (800381c <RX_Receive+0x238>)
 800374e:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	789a      	ldrb	r2, [r3, #2]
 8003754:	4b31      	ldr	r3, [pc, #196]	@ (800381c <RX_Receive+0x238>)
 8003756:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	785a      	ldrb	r2, [r3, #1]
 800375c:	4b2f      	ldr	r3, [pc, #188]	@ (800381c <RX_Receive+0x238>)
 800375e:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	4b2d      	ldr	r3, [pc, #180]	@ (800381c <RX_Receive+0x238>)
 8003766:	745a      	strb	r2, [r3, #17]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_2.temp;
 8003768:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <RX_Receive+0x24c>)
 800376a:	b2da      	uxtb	r2, r3
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	701a      	strb	r2, [r3, #0]
				packet.data[17] = floatPtr[3];
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	78da      	ldrb	r2, [r3, #3]
 8003774:	4b29      	ldr	r3, [pc, #164]	@ (800381c <RX_Receive+0x238>)
 8003776:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	789a      	ldrb	r2, [r3, #2]
 800377c:	4b27      	ldr	r3, [pc, #156]	@ (800381c <RX_Receive+0x238>)
 800377e:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	785a      	ldrb	r2, [r3, #1]
 8003784:	4b25      	ldr	r3, [pc, #148]	@ (800381c <RX_Receive+0x238>)
 8003786:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	4b23      	ldr	r3, [pc, #140]	@ (800381c <RX_Receive+0x238>)
 800378e:	755a      	strb	r2, [r3, #21]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_3.temp;
 8003790:	4b28      	ldr	r3, [pc, #160]	@ (8003834 <RX_Receive+0x250>)
 8003792:	b2da      	uxtb	r2, r3
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	701a      	strb	r2, [r3, #0]
				packet.data[21] = floatPtr[3];
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	78da      	ldrb	r2, [r3, #3]
 800379c:	4b1f      	ldr	r3, [pc, #124]	@ (800381c <RX_Receive+0x238>)
 800379e:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	789a      	ldrb	r2, [r3, #2]
 80037a4:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <RX_Receive+0x238>)
 80037a6:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	785a      	ldrb	r2, [r3, #1]
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <RX_Receive+0x238>)
 80037ae:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	4b19      	ldr	r3, [pc, #100]	@ (800381c <RX_Receive+0x238>)
 80037b6:	765a      	strb	r2, [r3, #25]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_4.temp;
 80037b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003838 <RX_Receive+0x254>)
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	701a      	strb	r2, [r3, #0]
				packet.data[25] = floatPtr[3];
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	78da      	ldrb	r2, [r3, #3]
 80037c4:	4b15      	ldr	r3, [pc, #84]	@ (800381c <RX_Receive+0x238>)
 80037c6:	769a      	strb	r2, [r3, #26]
				packet.data[26] = floatPtr[2];
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	789a      	ldrb	r2, [r3, #2]
 80037cc:	4b13      	ldr	r3, [pc, #76]	@ (800381c <RX_Receive+0x238>)
 80037ce:	76da      	strb	r2, [r3, #27]
				packet.data[27] = floatPtr[1];
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	785a      	ldrb	r2, [r3, #1]
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <RX_Receive+0x238>)
 80037d6:	771a      	strb	r2, [r3, #28]
				packet.data[28] = floatPtr[0];
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <RX_Receive+0x238>)
 80037de:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <RX_Receive+0x238>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 80037e6:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <RX_Receive+0x238>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 1;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <RX_Receive+0x234>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
				break;
 80037f2:	e0c4      	b.n	800397e <RX_Receive+0x39a>
 80037f4:	2000016c 	.word	0x2000016c
 80037f8:	20000190 	.word	0x20000190
 80037fc:	2000016a 	.word	0x2000016a
 8003800:	200001e8 	.word	0x200001e8
 8003804:	20000169 	.word	0x20000169
 8003808:	20000166 	.word	0x20000166
 800380c:	200003f8 	.word	0x200003f8
 8003810:	2000018c 	.word	0x2000018c
 8003814:	20000161 	.word	0x20000161
 8003818:	20000168 	.word	0x20000168
 800381c:	200001c8 	.word	0x200001c8
 8003820:	20000610 	.word	0x20000610
 8003824:	2000061c 	.word	0x2000061c
 8003828:	20000628 	.word	0x20000628
 800382c:	20000018 	.word	0x20000018
 8003830:	20000020 	.word	0x20000020
 8003834:	20000028 	.word	0x20000028
 8003838:	20000030 	.word	0x20000030
				packet = Dummy_Transmit();
 800383c:	4c6f      	ldr	r4, [pc, #444]	@ (80039fc <RX_Receive+0x418>)
 800383e:	463b      	mov	r3, r7
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd faa9 	bl	8000d98 <Dummy_Transmit>
 8003846:	4625      	mov	r5, r4
 8003848:	463c      	mov	r4, r7
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	6861      	ldr	r1, [r4, #4]
 800384e:	68a2      	ldr	r2, [r4, #8]
 8003850:	68e3      	ldr	r3, [r4, #12]
 8003852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003854:	6920      	ldr	r0, [r4, #16]
 8003856:	6961      	ldr	r1, [r4, #20]
 8003858:	69a2      	ldr	r2, [r4, #24]
 800385a:	69e3      	ldr	r3, [r4, #28]
 800385c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x07;
 800385e:	4b67      	ldr	r3, [pc, #412]	@ (80039fc <RX_Receive+0x418>)
 8003860:	2207      	movs	r2, #7
 8003862:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 8003864:	4b66      	ldr	r3, [pc, #408]	@ (8003a00 <RX_Receive+0x41c>)
 8003866:	785a      	ldrb	r2, [r3, #1]
 8003868:	4b64      	ldr	r3, [pc, #400]	@ (80039fc <RX_Receive+0x418>)
 800386a:	705a      	strb	r2, [r3, #1]
				* floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 800386c:	4b65      	ldr	r3, [pc, #404]	@ (8003a04 <RX_Receive+0x420>)
 800386e:	b2da      	uxtb	r2, r3
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	701a      	strb	r2, [r3, #0]
				packet.data[1] = floatPtr[3];
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	78da      	ldrb	r2, [r3, #3]
 8003878:	4b60      	ldr	r3, [pc, #384]	@ (80039fc <RX_Receive+0x418>)
 800387a:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	789a      	ldrb	r2, [r3, #2]
 8003880:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <RX_Receive+0x418>)
 8003882:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	785a      	ldrb	r2, [r3, #1]
 8003888:	4b5c      	ldr	r3, [pc, #368]	@ (80039fc <RX_Receive+0x418>)
 800388a:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	4b5a      	ldr	r3, [pc, #360]	@ (80039fc <RX_Receive+0x418>)
 8003892:	715a      	strb	r2, [r3, #5]
				packet.data[5] = 0x00;
 8003894:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <RX_Receive+0x418>)
 8003896:	2200      	movs	r2, #0
 8003898:	719a      	strb	r2, [r3, #6]
				packet.data[6] = 0x00;
 800389a:	4b58      	ldr	r3, [pc, #352]	@ (80039fc <RX_Receive+0x418>)
 800389c:	2200      	movs	r2, #0
 800389e:	71da      	strb	r2, [r3, #7]
				packet.data[7] = 0x00;
 80038a0:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <RX_Receive+0x418>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	721a      	strb	r2, [r3, #8]
				packet.data[8] = 0x00;
 80038a6:	4b55      	ldr	r3, [pc, #340]	@ (80039fc <RX_Receive+0x418>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	725a      	strb	r2, [r3, #9]
				* floatPtr = (uint8_t *) &LOADCELL_1.read_value_weight;
 80038ac:	4b56      	ldr	r3, [pc, #344]	@ (8003a08 <RX_Receive+0x424>)
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	701a      	strb	r2, [r3, #0]
				packet.data[9] = floatPtr[3];
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	78da      	ldrb	r2, [r3, #3]
 80038b8:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <RX_Receive+0x418>)
 80038ba:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	789a      	ldrb	r2, [r3, #2]
 80038c0:	4b4e      	ldr	r3, [pc, #312]	@ (80039fc <RX_Receive+0x418>)
 80038c2:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	785a      	ldrb	r2, [r3, #1]
 80038c8:	4b4c      	ldr	r3, [pc, #304]	@ (80039fc <RX_Receive+0x418>)
 80038ca:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	4b4a      	ldr	r3, [pc, #296]	@ (80039fc <RX_Receive+0x418>)
 80038d2:	735a      	strb	r2, [r3, #13]
				* floatPtr = (uint8_t *) &LOADCELL_2.read_value_weight;
 80038d4:	4b4d      	ldr	r3, [pc, #308]	@ (8003a0c <RX_Receive+0x428>)
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	701a      	strb	r2, [r3, #0]
				packet.data[13] = floatPtr[3];
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	78da      	ldrb	r2, [r3, #3]
 80038e0:	4b46      	ldr	r3, [pc, #280]	@ (80039fc <RX_Receive+0x418>)
 80038e2:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	789a      	ldrb	r2, [r3, #2]
 80038e8:	4b44      	ldr	r3, [pc, #272]	@ (80039fc <RX_Receive+0x418>)
 80038ea:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	785a      	ldrb	r2, [r3, #1]
 80038f0:	4b42      	ldr	r3, [pc, #264]	@ (80039fc <RX_Receive+0x418>)
 80038f2:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	4b40      	ldr	r3, [pc, #256]	@ (80039fc <RX_Receive+0x418>)
 80038fa:	745a      	strb	r2, [r3, #17]
				* floatPtr = (uint8_t *) &LOADCELL_3.read_value_weight;
 80038fc:	4b44      	ldr	r3, [pc, #272]	@ (8003a10 <RX_Receive+0x42c>)
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	701a      	strb	r2, [r3, #0]
				packet.data[17] = floatPtr[3];
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	78da      	ldrb	r2, [r3, #3]
 8003908:	4b3c      	ldr	r3, [pc, #240]	@ (80039fc <RX_Receive+0x418>)
 800390a:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	789a      	ldrb	r2, [r3, #2]
 8003910:	4b3a      	ldr	r3, [pc, #232]	@ (80039fc <RX_Receive+0x418>)
 8003912:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	785a      	ldrb	r2, [r3, #1]
 8003918:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <RX_Receive+0x418>)
 800391a:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <RX_Receive+0x418>)
 8003922:	755a      	strb	r2, [r3, #21]
				* floatPtr = (uint8_t *) &LOADCELL_4.read_value_weight;
 8003924:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <RX_Receive+0x430>)
 8003926:	b2da      	uxtb	r2, r3
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	701a      	strb	r2, [r3, #0]
				packet.data[21] = floatPtr[3];
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	78da      	ldrb	r2, [r3, #3]
 8003930:	4b32      	ldr	r3, [pc, #200]	@ (80039fc <RX_Receive+0x418>)
 8003932:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	789a      	ldrb	r2, [r3, #2]
 8003938:	4b30      	ldr	r3, [pc, #192]	@ (80039fc <RX_Receive+0x418>)
 800393a:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	785a      	ldrb	r2, [r3, #1]
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <RX_Receive+0x418>)
 8003942:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <RX_Receive+0x418>)
 800394a:	765a      	strb	r2, [r3, #25]
				packet.data[25] = 0x00;
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <RX_Receive+0x418>)
 800394e:	2200      	movs	r2, #0
 8003950:	769a      	strb	r2, [r3, #26]
				packet.data[26] = 0x00;
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <RX_Receive+0x418>)
 8003954:	2200      	movs	r2, #0
 8003956:	76da      	strb	r2, [r3, #27]
				packet.data[27] = 0x00;
 8003958:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <RX_Receive+0x418>)
 800395a:	2200      	movs	r2, #0
 800395c:	771a      	strb	r2, [r3, #28]
				packet.data[28] = 0x00;
 800395e:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <RX_Receive+0x418>)
 8003960:	2200      	movs	r2, #0
 8003962:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 8003964:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <RX_Receive+0x418>)
 8003966:	2200      	movs	r2, #0
 8003968:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <RX_Receive+0x418>)
 800396c:	2200      	movs	r2, #0
 800396e:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 0;
 8003970:	4b29      	ldr	r3, [pc, #164]	@ (8003a18 <RX_Receive+0x434>)
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
				break;
 8003976:	e002      	b.n	800397e <RX_Receive+0x39a>
				lora_error = ERROR_SYSTEM_STATE_FAILED;
 8003978:	4b28      	ldr	r3, [pc, #160]	@ (8003a1c <RX_Receive+0x438>)
 800397a:	2205      	movs	r2, #5
 800397c:	701a      	strb	r2, [r3, #0]
		RF_SW.port->ODR &= ~(GPIO_ODR_OD10);
 800397e:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <RX_Receive+0x43c>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <RX_Receive+0x43c>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398c:	615a      	str	r2, [r3, #20]
		SX1272_transmit(&lora, (uint8_t*) &packet);
 800398e:	491b      	ldr	r1, [pc, #108]	@ (80039fc <RX_Receive+0x418>)
 8003990:	4824      	ldr	r0, [pc, #144]	@ (8003a24 <RX_Receive+0x440>)
 8003992:	f7fd fadb 	bl	8000f4c <SX1272_transmit>
	  		transmit_state = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 8003996:	2112      	movs	r1, #18
 8003998:	4822      	ldr	r0, [pc, #136]	@ (8003a24 <RX_Receive+0x440>)
 800399a:	f7fd fbb9 	bl	8001110 <SX1272_readRegister>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	  	}while((transmit_state & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 80039a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f2      	beq.n	8003996 <RX_Receive+0x3b2>
	  	RF_SW.port->ODR |= (GPIO_ODR_OD10);
 80039b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <RX_Receive+0x43c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <RX_Receive+0x43c>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039be:	615a      	str	r2, [r3, #20]
	  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 80039c0:	2208      	movs	r2, #8
 80039c2:	2112      	movs	r1, #18
 80039c4:	4817      	ldr	r0, [pc, #92]	@ (8003a24 <RX_Receive+0x440>)
 80039c6:	f7fd fb6c 	bl	80010a2 <SX1272_writeRegister>
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 80039ca:	2105      	movs	r1, #5
 80039cc:	4815      	ldr	r0, [pc, #84]	@ (8003a24 <RX_Receive+0x440>)
 80039ce:	f7fd fa49 	bl	8000e64 <_SX1272_setMode>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039d2:	2017      	movs	r0, #23
 80039d4:	f7fd fbdc 	bl	8001190 <__NVIC_EnableIRQ>
}
 80039d8:	e00c      	b.n	80039f4 <RX_Receive+0x410>
		lora_error = ERROR_INVALID_PACKET_DATA;
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <RX_Receive+0x438>)
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 80039e0:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <RX_Receive+0x444>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <RX_Receive+0x444>)
 80039ea:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 80039ec:	bf00      	nop
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039ee:	2017      	movs	r0, #23
 80039f0:	f7fd fbce 	bl	8001190 <__NVIC_EnableIRQ>
}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	@ 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdb0      	pop	{r4, r5, r7, pc}
 80039fc:	200001c8 	.word	0x200001c8
 8003a00:	200001e8 	.word	0x200001e8
 8003a04:	20000010 	.word	0x20000010
 8003a08:	20000640 	.word	0x20000640
 8003a0c:	2000064c 	.word	0x2000064c
 8003a10:	20000658 	.word	0x20000658
 8003a14:	20000664 	.word	0x20000664
 8003a18:	20000168 	.word	0x20000168
 8003a1c:	20000169 	.word	0x20000169
 8003a20:	200005f0 	.word	0x200005f0
 8003a24:	20000190 	.word	0x20000190
 8003a28:	20000166 	.word	0x20000166

08003a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a30:	b672      	cpsid	i
}
 8003a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {__asm("NOP");}
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <Error_Handler+0x8>

08003a38 <get_temp>:





i2c_comms_result get_temp(TEMP_SENSE *temp_sense){
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b090      	sub	sp, #64	@ 0x40
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]

	i2c_comms_result result;

	//If its not a thermocouple, its the SMD temp sense
	if(temp_sense -> thermocouple_type == 0x00){
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	78db      	ldrb	r3, [r3, #3]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d154      	bne.n	8003af4 <get_temp+0xbc>

		uint8_t buf[4];
		buf[0] = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	743b      	strb	r3, [r7, #16]
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, temp_sense -> ADDR, buf[0], 1, 100);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	4619      	mov	r1, r3
 8003a54:	7c3b      	ldrb	r3, [r7, #16]
 8003a56:	461a      	mov	r2, r3
 8003a58:	2364      	movs	r3, #100	@ 0x64
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	485d      	ldr	r0, [pc, #372]	@ (8003bd4 <get_temp+0x19c>)
 8003a60:	f000 ff72 	bl	8004948 <HAL_I2C_Master_Transmit>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (ret != HAL_OK){
 8003a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <get_temp+0x40>
			  result.comms_ok = false;
 8003a72:	2300      	movs	r3, #0
 8003a74:	753b      	strb	r3, [r7, #20]
 8003a76:	e09e      	b.n	8003bb6 <get_temp+0x17e>
		}
		else {
			  ret = HAL_I2C_Master_Receive(&hi2c2, temp_sense -> ADDR, result.return_value, 2, 100);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	2364      	movs	r3, #100	@ 0x64
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2302      	movs	r3, #2
 8003a8a:	4852      	ldr	r0, [pc, #328]	@ (8003bd4 <get_temp+0x19c>)
 8003a8c:	f001 f85a 	bl	8004b44 <HAL_I2C_Master_Receive>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			  if (ret != HAL_OK){
 8003a96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <get_temp+0x6c>
				  result.comms_ok = false;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	753b      	strb	r3, [r7, #20]
 8003aa2:	e088      	b.n	8003bb6 <get_temp+0x17e>
			  }
			  else{

				  uint16_t val = ((int16_t)result.return_value[0]<<4) | (result.return_value[1] >> 4);
 8003aa4:	7dbb      	ldrb	r3, [r7, #22]
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	b21a      	sxth	r2, r3
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				  float temp = val/16;
 8003aba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac8:	edc7 7a03 	vstr	s15, [r7, #12]
				  uint8_t * tempPointer = (uint8_t *) &temp;
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
				  result.return_value[0] = tempPointer[0];
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	75bb      	strb	r3, [r7, #22]
				  result.return_value[1] = tempPointer[1];
 8003ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	75fb      	strb	r3, [r7, #23]
				  result.return_value[2] = tempPointer[2];
 8003ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae0:	789b      	ldrb	r3, [r3, #2]
 8003ae2:	763b      	strb	r3, [r7, #24]
				  result.return_value[3] = tempPointer[3];
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	78db      	ldrb	r3, [r3, #3]
 8003ae8:	767b      	strb	r3, [r7, #25]
				  result.return_length = 0x04;
 8003aea:	2304      	movs	r3, #4
 8003aec:	757b      	strb	r3, [r7, #21]

				  result.comms_ok = true;
 8003aee:	2301      	movs	r3, #1
 8003af0:	753b      	strb	r3, [r7, #20]
 8003af2:	e060      	b.n	8003bb6 <get_temp+0x17e>
	}

	//Its got a thermocouple type, therefore, lets get the thermocouple hot junc temp
	else{
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, (temp_sense -> ADDR | 0x00), 0x00, 1, 100); //Write to thermocouple IC, to move pointer to hot junc reg
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	2364      	movs	r3, #100	@ 0x64
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2301      	movs	r3, #1
 8003b00:	2200      	movs	r2, #0
 8003b02:	4834      	ldr	r0, [pc, #208]	@ (8003bd4 <get_temp+0x19c>)
 8003b04:	f000 ff20 	bl	8004948 <HAL_I2C_Master_Transmit>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (ret != HAL_OK){
 8003b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <get_temp+0xe4>
			result.comms_ok = false;
 8003b16:	2300      	movs	r3, #0
 8003b18:	753b      	strb	r3, [r7, #20]
 8003b1a:	e04c      	b.n	8003bb6 <get_temp+0x17e>
		}
		else {
			ret = HAL_I2C_Master_Receive(&hi2c2, (temp_sense -> ADDR | 0x01), result.return_value, 2, 100);	//Read 2 bytes from the hot junc reg into return val
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	2364      	movs	r3, #100	@ 0x64
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2302      	movs	r3, #2
 8003b34:	4827      	ldr	r0, [pc, #156]	@ (8003bd4 <get_temp+0x19c>)
 8003b36:	f001 f805 	bl	8004b44 <HAL_I2C_Master_Receive>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (ret != HAL_OK){
 8003b40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <get_temp+0x116>
				result.comms_ok = false;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	753b      	strb	r3, [r7, #20]
 8003b4c:	e033      	b.n	8003bb6 <get_temp+0x17e>
			}
			else{

				uint16_t val = ((int16_t)result.return_value[0] * 16) | (result.return_value[1]);
 8003b4e:	7dbb      	ldrb	r3, [r7, #22]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	b21a      	sxth	r2, r3
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	86bb      	strh	r3, [r7, #52]	@ 0x34
				float temp = val/16;
 8003b60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b6e:	edc7 7a02 	vstr	s15, [r7, #8]
				if ((result.return_value[0] & 0x80) == 0x80){ //If the temp is < 0deg
 8003b72:	7dbb      	ldrb	r3, [r7, #22]
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da08      	bge.n	8003b8c <get_temp+0x154>
					temp = temp - 4096;
 8003b7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b7e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003bd8 <get_temp+0x1a0>
 8003b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b86:	edc7 7a02 	vstr	s15, [r7, #8]
 8003b8a:	e001      	b.n	8003b90 <get_temp+0x158>
				}
				else{
					temp = temp; //If temp is >= 0deg, dont need to do anything
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60bb      	str	r3, [r7, #8]
				}

				uint8_t * tempPointer = (uint8_t *) &temp;
 8003b90:	f107 0308 	add.w	r3, r7, #8
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
				result.return_value[0] = tempPointer[0];
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	75bb      	strb	r3, [r7, #22]
				result.return_value[1] = tempPointer[1];
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	75fb      	strb	r3, [r7, #23]
				result.return_value[2] = tempPointer[2];
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	789b      	ldrb	r3, [r3, #2]
 8003ba6:	763b      	strb	r3, [r7, #24]
				result.return_value[3] = tempPointer[3];
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	767b      	strb	r3, [r7, #25]
				result.return_length = 0x04;
 8003bae:	2304      	movs	r3, #4
 8003bb0:	757b      	strb	r3, [r7, #21]

				result.comms_ok = true;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	753b      	strb	r3, [r7, #20]
			}
		}
	}


	return result;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	461d      	mov	r5, r3
 8003bba:	f107 0414 	add.w	r4, r7, #20
 8003bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc0:	6028      	str	r0, [r5, #0]
 8003bc2:	6069      	str	r1, [r5, #4]
 8003bc4:	60aa      	str	r2, [r5, #8]
 8003bc6:	60eb      	str	r3, [r5, #12]
 8003bc8:	8823      	ldrh	r3, [r4, #0]
 8003bca:	822b      	strh	r3, [r5, #16]

};
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	3738      	adds	r7, #56	@ 0x38
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd4:	2000005c 	.word	0x2000005c
 8003bd8:	45800000 	.word	0x45800000

08003bdc <delay_software_us>:
	GPIOG->ODR |= GPIO_ODR_OD4; //raise up CS of PG
    return adcValue;
}

void delay_software_us( uint32_t usec )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (usec * 21); i++);
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e002      	b.n	8003bf4 <delay_software_us+0x18>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00da      	lsls	r2, r3, #3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3f3      	bcc.n	8003bee <delay_software_us+0x12>

}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <delay_software_ms>:

void delay_software_ms( uint32_t msec )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (msec * 21000); i++);
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e002      	b.n	8003c2c <delay_software_ms+0x18>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3f4      	bcc.n	8003c26 <delay_software_ms+0x12>

}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <SPI_init>:
 * @param *port 			Pointer to GPIO port struct.
 * @param cs 					Device chip select address.
 * @return @c NULL.
 **
 * =============================================================================== */
void SPI_init(SPI *spi, DeviceType device, SPI_TypeDef *interface, DataFormat df, GPIO_TypeDef *port, unsigned long cs) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	461a      	mov	r2, r3
 8003c58:	460b      	mov	r3, r1
 8003c5a:	72fb      	strb	r3, [r7, #11]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	72bb      	strb	r3, [r7, #10]
  spi->device    = device;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	7afa      	ldrb	r2, [r7, #11]
 8003c64:	701a      	strb	r2, [r3, #0]
  spi->interface = interface; //should be interface 0x40003C00
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]
  spi->port      = port;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	609a      	str	r2, [r3, #8]
  spi->cs        = cs;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	60da      	str	r2, [r3, #12]

  spi->send      = (df == MODE8) ? SPI_send8 : SPI_send16;
 8003c78:	7abb      	ldrb	r3, [r7, #10]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <SPI_init+0x36>
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003cac <SPI_init+0x60>)
 8003c80:	e000      	b.n	8003c84 <SPI_init+0x38>
 8003c82:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb0 <SPI_init+0x64>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  spi->receive   = (df == MODE8) ? SPI_receive8 : SPI_receive16; //if Data format is MODE8
 8003c88:	7abb      	ldrb	r3, [r7, #10]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <SPI_init+0x46>
 8003c8e:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <SPI_init+0x68>)
 8003c90:	e000      	b.n	8003c94 <SPI_init+0x48>
 8003c92:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <SPI_init+0x6c>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	615a      	str	r2, [r3, #20]
  spi->transmit  = SPI_transmit;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <SPI_init+0x70>)
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	08003d07 	.word	0x08003d07
 8003cb0:	08003d39 	.word	0x08003d39
 8003cb4:	08003d69 	.word	0x08003d69
 8003cb8:	08003d9d 	.word	0x08003d9d
 8003cbc:	08003cc1 	.word	0x08003cc1

08003cc0 <SPI_transmit>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param 	data 			Data payload to be sent to slave device.
 * @retval 	response 	Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI *spi, uint16_t data) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	81fb      	strh	r3, [r7, #14]
  spi->send(spi, data);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	887a      	ldrh	r2, [r7, #2]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
  spi->receive(spi, &response);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f107 020e 	add.w	r2, r7, #14
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 8003cea:	bf00      	nop
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f8      	bne.n	8003cec <SPI_transmit+0x2c>
  return response;
 8003cfa:	89fb      	ldrh	r3, [r7, #14]
 8003cfc:	b29b      	uxth	r3, r3
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <SPI_send8>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param   data      The data to send.
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI *spi, uint16_t data) {
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8003d12:	bf00      	nop
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f8      	beq.n	8003d14 <SPI_send8+0xe>
  spi->interface->DR = (uint8_t) data;
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <SPI_send16>:

static void SPI_send16(SPI *spi, uint16_t data) {
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8003d44:	bf00      	nop
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f8      	beq.n	8003d46 <SPI_send16+0xe>
  spi->interface->DR = data;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	887a      	ldrh	r2, [r7, #2]
 8003d5a:	60da      	str	r2, [r3, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <SPI_receive8>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param   data      Pointer to variable to receive data into.
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI *spi, volatile uint16_t *data) {
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8003d72:	bf00      	nop
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f8      	beq.n	8003d74 <SPI_receive8+0xc>
  *data = (uint8_t) spi->interface->DR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	801a      	strh	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <SPI_receive16>:

static void SPI_receive16(SPI *spi, volatile uint16_t *data) {
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8003da6:	bf00      	nop
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f8      	beq.n	8003da8 <SPI_receive16+0xc>
  *data = spi->interface->DR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	801a      	strh	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	4b10      	ldr	r3, [pc, #64]	@ (8003e1c <HAL_MspInit+0x4c>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	4a0f      	ldr	r2, [pc, #60]	@ (8003e1c <HAL_MspInit+0x4c>)
 8003de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003de6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <HAL_MspInit+0x4c>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_MspInit+0x4c>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <HAL_MspInit+0x4c>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e02:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <HAL_MspInit+0x4c>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800

08003e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	@ 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <HAL_I2C_MspInit+0x84>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d12b      	bne.n	8003e9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <HAL_I2C_MspInit+0x88>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <HAL_I2C_MspInit+0x88>)
 8003e4c:	f043 0320 	orr.w	r3, r3, #32
 8003e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e52:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <HAL_I2C_MspInit+0x88>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e62:	2312      	movs	r3, #18
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e6e:	2304      	movs	r3, #4
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	4619      	mov	r1, r3
 8003e78:	480c      	ldr	r0, [pc, #48]	@ (8003eac <HAL_I2C_MspInit+0x8c>)
 8003e7a:	f000 fa5b 	bl	8004334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <HAL_I2C_MspInit+0x88>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4a08      	ldr	r2, [pc, #32]	@ (8003ea8 <HAL_I2C_MspInit+0x88>)
 8003e88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_I2C_MspInit+0x88>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003e9a:	bf00      	nop
 8003e9c:	3728      	adds	r7, #40	@ 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40005800 	.word	0x40005800
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40021400 	.word	0x40021400

08003eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	@ 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_SPI_MspInit+0xe8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d12c      	bne.n	8003f2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	4b31      	ldr	r3, [pc, #196]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	4a30      	ldr	r2, [pc, #192]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003edc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003efe:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f0a:	23e0      	movs	r3, #224	@ 0xe0
 8003f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f16:	2303      	movs	r3, #3
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f1a:	2305      	movs	r3, #5
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1e:	f107 031c 	add.w	r3, r7, #28
 8003f22:	4619      	mov	r1, r3
 8003f24:	481e      	ldr	r0, [pc, #120]	@ (8003fa0 <HAL_SPI_MspInit+0xf0>)
 8003f26:	f000 fa05 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003f2a:	e031      	b.n	8003f90 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <HAL_SPI_MspInit+0xf4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d12c      	bne.n	8003f90 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4a10      	ldr	r2, [pc, #64]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_SPI_MspInit+0xec>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003f6e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003f80:	2305      	movs	r3, #5
 8003f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f84:	f107 031c 	add.w	r3, r7, #28
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4807      	ldr	r0, [pc, #28]	@ (8003fa8 <HAL_SPI_MspInit+0xf8>)
 8003f8c:	f000 f9d2 	bl	8004334 <HAL_GPIO_Init>
}
 8003f90:	bf00      	nop
 8003f92:	3730      	adds	r7, #48	@ 0x30
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40013000 	.word	0x40013000
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40015000 	.word	0x40015000
 8003fa8:	40021400 	.word	0x40021400

08003fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fb0:	bf00      	nop
 8003fb2:	e7fd      	b.n	8003fb0 <NMI_Handler+0x4>

08003fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <HardFault_Handler+0x4>

08003fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <MemManage_Handler+0x4>

08003fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <BusFault_Handler+0x4>

08003fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <UsageFault_Handler+0x4>

08003fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004002:	f000 f891 	bl	8004128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004010:	4b06      	ldr	r3, [pc, #24]	@ (800402c <SystemInit+0x20>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	4a05      	ldr	r2, [pc, #20]	@ (800402c <SystemInit+0x20>)
 8004018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800401c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004068 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004034:	f7ff ffea 	bl	800400c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004038:	480c      	ldr	r0, [pc, #48]	@ (800406c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800403a:	490d      	ldr	r1, [pc, #52]	@ (8004070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800403c:	4a0d      	ldr	r2, [pc, #52]	@ (8004074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004040:	e002      	b.n	8004048 <LoopCopyDataInit>

08004042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004046:	3304      	adds	r3, #4

08004048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800404a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800404c:	d3f9      	bcc.n	8004042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800404e:	4a0a      	ldr	r2, [pc, #40]	@ (8004078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004050:	4c0a      	ldr	r4, [pc, #40]	@ (800407c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004054:	e001      	b.n	800405a <LoopFillZerobss>

08004056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004058:	3204      	adds	r2, #4

0800405a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800405a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800405c:	d3fb      	bcc.n	8004056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800405e:	f002 fb4f 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004062:	f7fd f901 	bl	8001268 <main>
  bx  lr    
 8004066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004068:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800406c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004070:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8004074:	080067bc 	.word	0x080067bc
  ldr r2, =_sbss
 8004078:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800407c:	2000066c 	.word	0x2000066c

08004080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004080:	e7fe      	b.n	8004080 <ADC_IRQHandler>
	...

08004084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004088:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <HAL_Init+0x40>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0d      	ldr	r2, [pc, #52]	@ (80040c4 <HAL_Init+0x40>)
 800408e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_Init+0x40>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0a      	ldr	r2, [pc, #40]	@ (80040c4 <HAL_Init+0x40>)
 800409a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800409e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040a0:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <HAL_Init+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a07      	ldr	r2, [pc, #28]	@ (80040c4 <HAL_Init+0x40>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ac:	2003      	movs	r0, #3
 80040ae:	f000 f90d 	bl	80042cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040b2:	200f      	movs	r0, #15
 80040b4:	f000 f808 	bl	80040c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040b8:	f7ff fe8a 	bl	8003dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023c00 	.word	0x40023c00

080040c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040d0:	4b12      	ldr	r3, [pc, #72]	@ (800411c <HAL_InitTick+0x54>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <HAL_InitTick+0x58>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040de:	fbb3 f3f1 	udiv	r3, r3, r1
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f917 	bl	800431a <HAL_SYSTICK_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00e      	b.n	8004114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b0f      	cmp	r3, #15
 80040fa:	d80a      	bhi.n	8004112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040fc:	2200      	movs	r2, #0
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	f000 f8ed 	bl	80042e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004108:	4a06      	ldr	r2, [pc, #24]	@ (8004124 <HAL_InitTick+0x5c>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000034 	.word	0x20000034
 8004120:	2000003c 	.word	0x2000003c
 8004124:	20000038 	.word	0x20000038

08004128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800412c:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_IncTick+0x20>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_IncTick+0x24>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4413      	add	r3, r2
 8004138:	4a04      	ldr	r2, [pc, #16]	@ (800414c <HAL_IncTick+0x24>)
 800413a:	6013      	str	r3, [r2, #0]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	2000003c 	.word	0x2000003c
 800414c:	20000668 	.word	0x20000668

08004150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return uwTick;
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <HAL_GetTick+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000668 	.word	0x20000668

08004168 <__NVIC_SetPriorityGrouping>:
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004178:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <__NVIC_SetPriorityGrouping+0x44>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004184:	4013      	ands	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419a:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <__NVIC_SetPriorityGrouping+0x44>)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	60d3      	str	r3, [r2, #12]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_GetPriorityGrouping>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b4:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <__NVIC_GetPriorityGrouping+0x18>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	f003 0307 	and.w	r3, r3, #7
}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <__NVIC_SetPriority>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	db0a      	blt.n	80041f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	490c      	ldr	r1, [pc, #48]	@ (8004218 <__NVIC_SetPriority+0x4c>)
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	440b      	add	r3, r1
 80041f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041f4:	e00a      	b.n	800420c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4908      	ldr	r1, [pc, #32]	@ (800421c <__NVIC_SetPriority+0x50>)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	3b04      	subs	r3, #4
 8004204:	0112      	lsls	r2, r2, #4
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	440b      	add	r3, r1
 800420a:	761a      	strb	r2, [r3, #24]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	e000e100 	.word	0xe000e100
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	@ 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f1c3 0307 	rsb	r3, r3, #7
 800423a:	2b04      	cmp	r3, #4
 800423c:	bf28      	it	cs
 800423e:	2304      	movcs	r3, #4
 8004240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3304      	adds	r3, #4
 8004246:	2b06      	cmp	r3, #6
 8004248:	d902      	bls.n	8004250 <NVIC_EncodePriority+0x30>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3b03      	subs	r3, #3
 800424e:	e000      	b.n	8004252 <NVIC_EncodePriority+0x32>
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	401a      	ands	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004268:	f04f 31ff 	mov.w	r1, #4294967295
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	43d9      	mvns	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004278:	4313      	orrs	r3, r2
         );
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004298:	d301      	bcc.n	800429e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429a:	2301      	movs	r3, #1
 800429c:	e00f      	b.n	80042be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429e:	4a0a      	ldr	r2, [pc, #40]	@ (80042c8 <SysTick_Config+0x40>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a6:	210f      	movs	r1, #15
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	f7ff ff8e 	bl	80041cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b0:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <SysTick_Config+0x40>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b6:	4b04      	ldr	r3, [pc, #16]	@ (80042c8 <SysTick_Config+0x40>)
 80042b8:	2207      	movs	r2, #7
 80042ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	e000e010 	.word	0xe000e010

080042cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff47 	bl	8004168 <__NVIC_SetPriorityGrouping>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	4603      	mov	r3, r0
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f4:	f7ff ff5c 	bl	80041b0 <__NVIC_GetPriorityGrouping>
 80042f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	6978      	ldr	r0, [r7, #20]
 8004300:	f7ff ff8e 	bl	8004220 <NVIC_EncodePriority>
 8004304:	4602      	mov	r2, r0
 8004306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff5d 	bl	80041cc <__NVIC_SetPriority>
}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ffb0 	bl	8004288 <SysTick_Config>
 8004328:	4603      	mov	r3, r0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	@ 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	e177      	b.n	8004640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004350:	2201      	movs	r2, #1
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	f040 8166 	bne.w	800463a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d005      	beq.n	8004386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004382:	2b02      	cmp	r3, #2
 8004384:	d130      	bne.n	80043e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	2203      	movs	r2, #3
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043bc:	2201      	movs	r2, #1
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 0201 	and.w	r2, r3, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d017      	beq.n	8004424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2203      	movs	r2, #3
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d123      	bne.n	8004478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	08da      	lsrs	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3208      	adds	r2, #8
 8004438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	220f      	movs	r2, #15
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	08da      	lsrs	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3208      	adds	r2, #8
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	2203      	movs	r2, #3
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0203 	and.w	r2, r3, #3
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80c0 	beq.w	800463a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b66      	ldr	r3, [pc, #408]	@ (8004658 <HAL_GPIO_Init+0x324>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	4a65      	ldr	r2, [pc, #404]	@ (8004658 <HAL_GPIO_Init+0x324>)
 80044c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ca:	4b63      	ldr	r3, [pc, #396]	@ (8004658 <HAL_GPIO_Init+0x324>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044d6:	4a61      	ldr	r2, [pc, #388]	@ (800465c <HAL_GPIO_Init+0x328>)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a58      	ldr	r2, [pc, #352]	@ (8004660 <HAL_GPIO_Init+0x32c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d037      	beq.n	8004572 <HAL_GPIO_Init+0x23e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a57      	ldr	r2, [pc, #348]	@ (8004664 <HAL_GPIO_Init+0x330>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d031      	beq.n	800456e <HAL_GPIO_Init+0x23a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a56      	ldr	r2, [pc, #344]	@ (8004668 <HAL_GPIO_Init+0x334>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02b      	beq.n	800456a <HAL_GPIO_Init+0x236>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a55      	ldr	r2, [pc, #340]	@ (800466c <HAL_GPIO_Init+0x338>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d025      	beq.n	8004566 <HAL_GPIO_Init+0x232>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a54      	ldr	r2, [pc, #336]	@ (8004670 <HAL_GPIO_Init+0x33c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <HAL_GPIO_Init+0x22e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a53      	ldr	r2, [pc, #332]	@ (8004674 <HAL_GPIO_Init+0x340>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d019      	beq.n	800455e <HAL_GPIO_Init+0x22a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_GPIO_Init+0x344>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_GPIO_Init+0x226>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a51      	ldr	r2, [pc, #324]	@ (800467c <HAL_GPIO_Init+0x348>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00d      	beq.n	8004556 <HAL_GPIO_Init+0x222>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a50      	ldr	r2, [pc, #320]	@ (8004680 <HAL_GPIO_Init+0x34c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <HAL_GPIO_Init+0x21e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4f      	ldr	r2, [pc, #316]	@ (8004684 <HAL_GPIO_Init+0x350>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_GPIO_Init+0x21a>
 800454a:	2309      	movs	r3, #9
 800454c:	e012      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800454e:	230a      	movs	r3, #10
 8004550:	e010      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004552:	2308      	movs	r3, #8
 8004554:	e00e      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004556:	2307      	movs	r3, #7
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800455a:	2306      	movs	r3, #6
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004572:	2300      	movs	r3, #0
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	@ (800465c <HAL_GPIO_Init+0x328>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004592:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_GPIO_Init+0x354>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b6:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045bc:	4b32      	ldr	r3, [pc, #200]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e0:	4a29      	ldr	r2, [pc, #164]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045e6:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_GPIO_Init+0x354>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_GPIO_Init+0x354>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004634:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <HAL_GPIO_Init+0x354>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	f67f ae84 	bls.w	8004350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800
 8004660:	40020000 	.word	0x40020000
 8004664:	40020400 	.word	0x40020400
 8004668:	40020800 	.word	0x40020800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40021000 	.word	0x40021000
 8004674:	40021400 	.word	0x40021400
 8004678:	40021800 	.word	0x40021800
 800467c:	40021c00 	.word	0x40021c00
 8004680:	40022000 	.word	0x40022000
 8004684:	40022400 	.word	0x40022400
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a8:	e003      	b.n	80046b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	041a      	lsls	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	619a      	str	r2, [r3, #24]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e12b      	b.n	800492a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff fb9a 	bl	8003e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	@ 0x24
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004724:	f001 fcc2 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8004728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4a81      	ldr	r2, [pc, #516]	@ (8004934 <HAL_I2C_Init+0x274>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d807      	bhi.n	8004744 <HAL_I2C_Init+0x84>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a80      	ldr	r2, [pc, #512]	@ (8004938 <HAL_I2C_Init+0x278>)
 8004738:	4293      	cmp	r3, r2
 800473a:	bf94      	ite	ls
 800473c:	2301      	movls	r3, #1
 800473e:	2300      	movhi	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e006      	b.n	8004752 <HAL_I2C_Init+0x92>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a7d      	ldr	r2, [pc, #500]	@ (800493c <HAL_I2C_Init+0x27c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	bf94      	ite	ls
 800474c:	2301      	movls	r3, #1
 800474e:	2300      	movhi	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0e7      	b.n	800492a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a78      	ldr	r2, [pc, #480]	@ (8004940 <HAL_I2C_Init+0x280>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a6a      	ldr	r2, [pc, #424]	@ (8004934 <HAL_I2C_Init+0x274>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d802      	bhi.n	8004794 <HAL_I2C_Init+0xd4>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	e009      	b.n	80047a8 <HAL_I2C_Init+0xe8>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	4a69      	ldr	r2, [pc, #420]	@ (8004944 <HAL_I2C_Init+0x284>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	3301      	adds	r3, #1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	495c      	ldr	r1, [pc, #368]	@ (8004934 <HAL_I2C_Init+0x274>)
 80047c4:	428b      	cmp	r3, r1
 80047c6:	d819      	bhi.n	80047fc <HAL_I2C_Init+0x13c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e59      	subs	r1, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047dc:	400b      	ands	r3, r1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_I2C_Init+0x138>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1e59      	subs	r1, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	e051      	b.n	800489c <HAL_I2C_Init+0x1dc>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e04f      	b.n	800489c <HAL_I2C_Init+0x1dc>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d111      	bne.n	8004828 <HAL_I2C_Init+0x168>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	440b      	add	r3, r1
 8004812:	fbb0 f3f3 	udiv	r3, r0, r3
 8004816:	3301      	adds	r3, #1
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e012      	b.n	800484e <HAL_I2C_Init+0x18e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e58      	subs	r0, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	0099      	lsls	r1, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	fbb0 f3f3 	udiv	r3, r0, r3
 800483e:	3301      	adds	r3, #1
 8004840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Init+0x196>
 8004852:	2301      	movs	r3, #1
 8004854:	e022      	b.n	800489c <HAL_I2C_Init+0x1dc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10e      	bne.n	800487c <HAL_I2C_Init+0x1bc>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e58      	subs	r0, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	440b      	add	r3, r1
 800486c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800487a:	e00f      	b.n	800489c <HAL_I2C_Init+0x1dc>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e58      	subs	r0, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	0099      	lsls	r1, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	6809      	ldr	r1, [r1, #0]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6911      	ldr	r1, [r2, #16]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	000186a0 	.word	0x000186a0
 8004938:	001e847f 	.word	0x001e847f
 800493c:	003d08ff 	.word	0x003d08ff
 8004940:	431bde83 	.word	0x431bde83
 8004944:	10624dd3 	.word	0x10624dd3

08004948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	460b      	mov	r3, r1
 8004956:	817b      	strh	r3, [r7, #10]
 8004958:	4613      	mov	r3, r2
 800495a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7ff fbf8 	bl	8004150 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b20      	cmp	r3, #32
 800496c:	f040 80e0 	bne.w	8004b30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2319      	movs	r3, #25
 8004976:	2201      	movs	r2, #1
 8004978:	4970      	ldr	r1, [pc, #448]	@ (8004b3c <HAL_I2C_Master_Transmit+0x1f4>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fc64 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	e0d3      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_I2C_Master_Transmit+0x50>
 8004994:	2302      	movs	r3, #2
 8004996:	e0cc      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d007      	beq.n	80049be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	@ 0x21
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2210      	movs	r2, #16
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	893a      	ldrh	r2, [r7, #8]
 80049ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_I2C_Master_Transmit+0x1f8>)
 80049fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a00:	8979      	ldrh	r1, [r7, #10]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a3a      	ldr	r2, [r7, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 face 	bl	8004fa8 <I2C_MasterRequestWrite>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08d      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a2c:	e066      	b.n	8004afc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fd22 	bl	800547c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <HAL_I2C_Master_Transmit+0x188>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	6a39      	ldr	r1, [r7, #32]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fd19 	bl	800550c <I2C_WaitOnBTFFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e01a      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d194      	bne.n	8004a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00100002 	.word	0x00100002
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	@ 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
 8004b54:	4613      	mov	r3, r2
 8004b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7ff fafa 	bl	8004150 <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	f040 8217 	bne.w	8004f9a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2319      	movs	r3, #25
 8004b72:	2201      	movs	r2, #1
 8004b74:	497c      	ldr	r1, [pc, #496]	@ (8004d68 <HAL_I2C_Master_Receive+0x224>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fb66 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
 8004b84:	e20a      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2C_Master_Receive+0x50>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e203      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d007      	beq.n	8004bba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2222      	movs	r2, #34	@ 0x22
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	893a      	ldrh	r2, [r7, #8]
 8004bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d6c <HAL_I2C_Master_Receive+0x228>)
 8004bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fa52 	bl	80050ac <I2C_MasterRequestRead>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e1c4      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d113      	bne.n	8004c42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e198      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d11b      	bne.n	8004c82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e178      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d11b      	bne.n	8004cc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	e158      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ce8:	e144      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	f200 80f1 	bhi.w	8004ed6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d123      	bne.n	8004d44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fc4b 	bl	800559c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e145      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d42:	e117      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d14e      	bne.n	8004dea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	2200      	movs	r2, #0
 8004d54:	4906      	ldr	r1, [pc, #24]	@ (8004d70 <HAL_I2C_Master_Receive+0x22c>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fa76 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e11a      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
 8004d66:	bf00      	nop
 8004d68:	00100002 	.word	0x00100002
 8004d6c:	ffff0000 	.word	0xffff0000
 8004d70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004de8:	e0c4      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	2200      	movs	r2, #0
 8004df2:	496c      	ldr	r1, [pc, #432]	@ (8004fa4 <HAL_I2C_Master_Receive+0x460>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fa27 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0cb      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4955      	ldr	r1, [pc, #340]	@ (8004fa4 <HAL_I2C_Master_Receive+0x460>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f9f9 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e09d      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ed4:	e04e      	b.n	8004f74 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fb5e 	bl	800559c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e058      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d124      	bne.n	8004f74 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d107      	bne.n	8004f42 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f40:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f aeb6 	bne.w	8004cea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3728      	adds	r7, #40	@ 0x28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	00010004 	.word	0x00010004

08004fa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d006      	beq.n	8004fd2 <I2C_MasterRequestWrite+0x2a>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d003      	beq.n	8004fd2 <I2C_MasterRequestWrite+0x2a>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fd0:	d108      	bne.n	8004fe4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e00b      	b.n	8004ffc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	2b12      	cmp	r3, #18
 8004fea:	d107      	bne.n	8004ffc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f91d 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005022:	d103      	bne.n	800502c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e035      	b.n	800509c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005038:	d108      	bne.n	800504c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800503a:	897b      	ldrh	r3, [r7, #10]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	e01b      	b.n	8005084 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800504c:	897b      	ldrh	r3, [r7, #10]
 800504e:	11db      	asrs	r3, r3, #7
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f063 030f 	orn	r3, r3, #15
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	490e      	ldr	r1, [pc, #56]	@ (80050a4 <I2C_MasterRequestWrite+0xfc>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f966 	bl	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e010      	b.n	800509c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4907      	ldr	r1, [pc, #28]	@ (80050a8 <I2C_MasterRequestWrite+0x100>)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f956 	bl	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	00010008 	.word	0x00010008
 80050a8:	00010002 	.word	0x00010002

080050ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	460b      	mov	r3, r1
 80050ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d006      	beq.n	80050e6 <I2C_MasterRequestRead+0x3a>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d003      	beq.n	80050e6 <I2C_MasterRequestRead+0x3a>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050e4:	d108      	bne.n	80050f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e00b      	b.n	8005110 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fc:	2b11      	cmp	r3, #17
 80050fe:	d107      	bne.n	8005110 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800510e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f893 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005136:	d103      	bne.n	8005140 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800513e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e079      	b.n	8005238 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800514c:	d108      	bne.n	8005160 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800514e:	897b      	ldrh	r3, [r7, #10]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	611a      	str	r2, [r3, #16]
 800515e:	e05f      	b.n	8005220 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005160:	897b      	ldrh	r3, [r7, #10]
 8005162:	11db      	asrs	r3, r3, #7
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f063 030f 	orn	r3, r3, #15
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4930      	ldr	r1, [pc, #192]	@ (8005240 <I2C_MasterRequestRead+0x194>)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8dc 	bl	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e054      	b.n	8005238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800518e:	897b      	ldrh	r3, [r7, #10]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4929      	ldr	r1, [pc, #164]	@ (8005244 <I2C_MasterRequestRead+0x198>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f8cc 	bl	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e044      	b.n	8005238 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f831 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fa:	d103      	bne.n	8005204 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e017      	b.n	8005238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005208:	897b      	ldrh	r3, [r7, #10]
 800520a:	11db      	asrs	r3, r3, #7
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 0306 	and.w	r3, r3, #6
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f063 030e 	orn	r3, r3, #14
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4907      	ldr	r1, [pc, #28]	@ (8005244 <I2C_MasterRequestRead+0x198>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f888 	bl	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	00010008 	.word	0x00010008
 8005244:	00010002 	.word	0x00010002

08005248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005258:	e048      	b.n	80052ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d044      	beq.n	80052ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fe ff75 	bl	8004150 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d139      	bne.n	80052ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10d      	bne.n	800529e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	43da      	mvns	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4013      	ands	r3, r2
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	e00c      	b.n	80052b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d116      	bne.n	80052ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e023      	b.n	8005334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10d      	bne.n	8005312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	43da      	mvns	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	e00c      	b.n	800532c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	429a      	cmp	r2, r3
 8005330:	d093      	beq.n	800525a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800534a:	e071      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800535a:	d123      	bne.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800536a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	f043 0204 	orr.w	r2, r3, #4
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e067      	b.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d041      	beq.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ac:	f7fe fed0 	bl	8004150 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d136      	bne.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10c      	bne.n	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	e00b      	b.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	43da      	mvns	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e021      	b.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	0c1b      	lsrs	r3, r3, #16
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10c      	bne.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	43da      	mvns	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4013      	ands	r3, r2
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e00b      	b.n	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	43da      	mvns	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f af6d 	bne.w	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005488:	e034      	b.n	80054f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f8e3 	bl	8005656 <I2C_IsAcknowledgeFailed>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e034      	b.n	8005504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d028      	beq.n	80054f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fe fe55 	bl	8004150 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11d      	bne.n	80054f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d016      	beq.n	80054f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e007      	b.n	8005504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d1c3      	bne.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005518:	e034      	b.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f89b 	bl	8005656 <I2C_IsAcknowledgeFailed>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e034      	b.n	8005594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d028      	beq.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fe fe0d 	bl	8004150 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11d      	bne.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d016      	beq.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b04      	cmp	r3, #4
 8005590:	d1c3      	bne.n	800551a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a8:	e049      	b.n	800563e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d119      	bne.n	80055ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0210 	mvn.w	r2, #16
 80055c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e030      	b.n	800564e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ec:	f7fe fdb0 	bl	8004150 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11d      	bne.n	800563e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d016      	beq.n	800563e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e007      	b.n	800564e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005648:	2b40      	cmp	r3, #64	@ 0x40
 800564a:	d1ae      	bne.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566c:	d11b      	bne.n	80056a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005676:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	f043 0204 	orr.w	r2, r3, #4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d129      	bne.n	800571e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2224      	movs	r2, #36	@ 0x24
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0210 	bic.w	r2, r2, #16
 80056f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	d12a      	bne.n	800579c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	@ 0x24
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	f023 030f 	bic.w	r3, r3, #15
 800576c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b29a      	uxth	r2, r3
 8005772:	89fb      	ldrh	r3, [r7, #14]
 8005774:	4313      	orrs	r3, r2
 8005776:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	89fa      	ldrh	r2, [r7, #14]
 800577e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e000      	b.n	800579e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4b20      	ldr	r3, [pc, #128]	@ (800583c <HAL_PWREx_EnableOverDrive+0x90>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057be:	4a1f      	ldr	r2, [pc, #124]	@ (800583c <HAL_PWREx_EnableOverDrive+0x90>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057c6:	4b1d      	ldr	r3, [pc, #116]	@ (800583c <HAL_PWREx_EnableOverDrive+0x90>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80057d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <HAL_PWREx_EnableOverDrive+0x94>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057d8:	f7fe fcba 	bl	8004150 <HAL_GetTick>
 80057dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057de:	e009      	b.n	80057f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057e0:	f7fe fcb6 	bl	8004150 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057ee:	d901      	bls.n	80057f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e01f      	b.n	8005834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057f4:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <HAL_PWREx_EnableOverDrive+0x98>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005800:	d1ee      	bne.n	80057e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005802:	4b11      	ldr	r3, [pc, #68]	@ (8005848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005808:	f7fe fca2 	bl	8004150 <HAL_GetTick>
 800580c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800580e:	e009      	b.n	8005824 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005810:	f7fe fc9e 	bl	8004150 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800581e:	d901      	bls.n	8005824 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e007      	b.n	8005834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005824:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <HAL_PWREx_EnableOverDrive+0x98>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005830:	d1ee      	bne.n	8005810 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40023800 	.word	0x40023800
 8005840:	420e0040 	.word	0x420e0040
 8005844:	40007000 	.word	0x40007000
 8005848:	420e0044 	.word	0x420e0044

0800584c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e267      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d075      	beq.n	8005956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800586a:	4b88      	ldr	r3, [pc, #544]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b04      	cmp	r3, #4
 8005874:	d00c      	beq.n	8005890 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005876:	4b85      	ldr	r3, [pc, #532]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800587e:	2b08      	cmp	r3, #8
 8005880:	d112      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005882:	4b82      	ldr	r3, [pc, #520]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800588a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800588e:	d10b      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	4b7e      	ldr	r3, [pc, #504]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05b      	beq.n	8005954 <HAL_RCC_OscConfig+0x108>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d157      	bne.n	8005954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e242      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b0:	d106      	bne.n	80058c0 <HAL_RCC_OscConfig+0x74>
 80058b2:	4b76      	ldr	r3, [pc, #472]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a75      	ldr	r2, [pc, #468]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e01d      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x98>
 80058ca:	4b70      	ldr	r3, [pc, #448]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a6f      	ldr	r2, [pc, #444]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6c      	ldr	r2, [pc, #432]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e00b      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058e4:	4b69      	ldr	r3, [pc, #420]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a68      	ldr	r2, [pc, #416]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b66      	ldr	r3, [pc, #408]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a65      	ldr	r2, [pc, #404]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fe fc24 	bl	8004150 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800590c:	f7fe fc20 	bl	8004150 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	@ 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e207      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b5b      	ldr	r3, [pc, #364]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0xc0>
 800592a:	e014      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fe fc10 	bl	8004150 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005934:	f7fe fc0c 	bl	8004150 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	@ 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1f3      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	4b51      	ldr	r3, [pc, #324]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0xe8>
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d063      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005962:	4b4a      	ldr	r3, [pc, #296]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596e:	4b47      	ldr	r3, [pc, #284]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005976:	2b08      	cmp	r3, #8
 8005978:	d11c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597a:	4b44      	ldr	r3, [pc, #272]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005986:	4b41      	ldr	r3, [pc, #260]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCC_OscConfig+0x152>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e1c7      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4937      	ldr	r1, [pc, #220]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b2:	e03a      	b.n	8005a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d020      	beq.n	80059fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059bc:	4b34      	ldr	r3, [pc, #208]	@ (8005a90 <HAL_RCC_OscConfig+0x244>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fe fbc5 	bl	8004150 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fe fbc1 	bl	8004150 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e1a8      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	4b2b      	ldr	r3, [pc, #172]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e8:	4b28      	ldr	r3, [pc, #160]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4925      	ldr	r1, [pc, #148]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
 80059fc:	e015      	b.n	8005a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fe:	4b24      	ldr	r3, [pc, #144]	@ (8005a90 <HAL_RCC_OscConfig+0x244>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fe fba4 	bl	8004150 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0c:	f7fe fba0 	bl	8004150 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e187      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d036      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <HAL_RCC_OscConfig+0x248>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fe fb84 	bl	8004150 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4c:	f7fe fb80 	bl	8004150 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e167      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x200>
 8005a6a:	e01b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a6c:	4b09      	ldr	r3, [pc, #36]	@ (8005a94 <HAL_RCC_OscConfig+0x248>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a72:	f7fe fb6d 	bl	8004150 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	e00e      	b.n	8005a98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fe fb69 	bl	8004150 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d907      	bls.n	8005a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e150      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	42470000 	.word	0x42470000
 8005a94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	4b88      	ldr	r3, [pc, #544]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ea      	bne.n	8005a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8097 	beq.w	8005be0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab6:	4b81      	ldr	r3, [pc, #516]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10f      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	4a7c      	ldr	r2, [pc, #496]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b77      	ldr	r3, [pc, #476]	@ (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d118      	bne.n	8005b20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aee:	4b74      	ldr	r3, [pc, #464]	@ (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a73      	ldr	r2, [pc, #460]	@ (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afa:	f7fe fb29 	bl	8004150 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fe fb25 	bl	8004150 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e10c      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b14:	4b6a      	ldr	r3, [pc, #424]	@ (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x2ea>
 8005b28:	4b64      	ldr	r3, [pc, #400]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	4a63      	ldr	r2, [pc, #396]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b34:	e01c      	b.n	8005b70 <HAL_RCC_OscConfig+0x324>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCC_OscConfig+0x30c>
 8005b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	4a5e      	ldr	r2, [pc, #376]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	4a5b      	ldr	r2, [pc, #364]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b56:	e00b      	b.n	8005b70 <HAL_RCC_OscConfig+0x324>
 8005b58:	4b58      	ldr	r3, [pc, #352]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5c:	4a57      	ldr	r2, [pc, #348]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b64:	4b55      	ldr	r3, [pc, #340]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	4a54      	ldr	r2, [pc, #336]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b6a:	f023 0304 	bic.w	r3, r3, #4
 8005b6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fe faea 	bl	8004150 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b80:	f7fe fae6 	bl	8004150 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0cb      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b96:	4b49      	ldr	r3, [pc, #292]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ee      	beq.n	8005b80 <HAL_RCC_OscConfig+0x334>
 8005ba2:	e014      	b.n	8005bce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba4:	f7fe fad4 	bl	8004150 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bac:	f7fe fad0 	bl	8004150 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0b5      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ee      	bne.n	8005bac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b39      	ldr	r3, [pc, #228]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	4a38      	ldr	r2, [pc, #224]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a1 	beq.w	8005d2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bea:	4b34      	ldr	r3, [pc, #208]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d05c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d141      	bne.n	8005c82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b31      	ldr	r3, [pc, #196]	@ (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fe faa4 	bl	8004150 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fe faa0 	bl	8004150 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e087      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	3b01      	subs	r3, #1
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	491b      	ldr	r1, [pc, #108]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c54:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5a:	f7fe fa79 	bl	8004150 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fe fa75 	bl	8004150 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e05c      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c74:	4b11      	ldr	r3, [pc, #68]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCC_OscConfig+0x416>
 8005c80:	e054      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c82:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c88:	f7fe fa62 	bl	8004150 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fe fa5e 	bl	8004150 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e045      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca2:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x444>
 8005cae:	e03d      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e038      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40007000 	.word	0x40007000
 8005cc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d38 <HAL_RCC_OscConfig+0x4ec>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d028      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d121      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d11a      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d111      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	3b01      	subs	r3, #1
 8005d12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0cc      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d50:	4b68      	ldr	r3, [pc, #416]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d90c      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b65      	ldr	r3, [pc, #404]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b63      	ldr	r3, [pc, #396]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0b8      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d90:	4b59      	ldr	r3, [pc, #356]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a58      	ldr	r2, [pc, #352]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da8:	4b53      	ldr	r3, [pc, #332]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a52      	ldr	r2, [pc, #328]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b50      	ldr	r3, [pc, #320]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	494d      	ldr	r1, [pc, #308]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d044      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d107      	bne.n	8005dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b47      	ldr	r3, [pc, #284]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d119      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e07f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d003      	beq.n	8005dfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e06f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e067      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1a:	4b37      	ldr	r3, [pc, #220]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 0203 	bic.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4934      	ldr	r1, [pc, #208]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fe f990 	bl	8004150 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e34:	f7fe f98c 	bl	8004150 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e04f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 020c 	and.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d1eb      	bne.n	8005e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d20c      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b22      	ldr	r3, [pc, #136]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b20      	ldr	r3, [pc, #128]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e032      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e90:	4b19      	ldr	r3, [pc, #100]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4916      	ldr	r1, [pc, #88]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eae:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	490e      	ldr	r1, [pc, #56]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ec2:	f000 f821 	bl	8005f08 <HAL_RCC_GetSysClockFreq>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	490a      	ldr	r1, [pc, #40]	@ (8005efc <HAL_RCC_ClockConfig+0x1c0>)
 8005ed4:	5ccb      	ldrb	r3, [r1, r3]
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	4a09      	ldr	r2, [pc, #36]	@ (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005ede:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe f8f0 	bl	80040c8 <HAL_InitTick>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40023c00 	.word	0x40023c00
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	08006794 	.word	0x08006794
 8005f00:	20000034 	.word	0x20000034
 8005f04:	20000038 	.word	0x20000038

08005f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f0c:	b090      	sub	sp, #64	@ 0x40
 8005f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f20:	4b59      	ldr	r3, [pc, #356]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d00d      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x40>
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	f200 80a1 	bhi.w	8006074 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x34>
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d003      	beq.n	8005f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f3a:	e09b      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f3c:	4b53      	ldr	r3, [pc, #332]	@ (800608c <HAL_RCC_GetSysClockFreq+0x184>)
 8005f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f40:	e09b      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f42:	4b53      	ldr	r3, [pc, #332]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f46:	e098      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f48:	4b4f      	ldr	r3, [pc, #316]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f52:	4b4d      	ldr	r3, [pc, #308]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d028      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	099b      	lsrs	r3, r3, #6
 8005f64:	2200      	movs	r2, #0
 8005f66:	623b      	str	r3, [r7, #32]
 8005f68:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f70:	2100      	movs	r1, #0
 8005f72:	4b47      	ldr	r3, [pc, #284]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f74:	fb03 f201 	mul.w	r2, r3, r1
 8005f78:	2300      	movs	r3, #0
 8005f7a:	fb00 f303 	mul.w	r3, r0, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	4a43      	ldr	r2, [pc, #268]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f82:	fba0 1202 	umull	r1, r2, r0, r2
 8005f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f88:	460a      	mov	r2, r1
 8005f8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f8e:	4413      	add	r3, r2
 8005f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	2200      	movs	r2, #0
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	61fa      	str	r2, [r7, #28]
 8005f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005fa2:	f7fa fb31 	bl	8000608 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4613      	mov	r3, r2
 8005fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fae:	e053      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb0:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	099b      	lsrs	r3, r3, #6
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	617a      	str	r2, [r7, #20]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fc2:	f04f 0b00 	mov.w	fp, #0
 8005fc6:	4652      	mov	r2, sl
 8005fc8:	465b      	mov	r3, fp
 8005fca:	f04f 0000 	mov.w	r0, #0
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	0159      	lsls	r1, r3, #5
 8005fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd8:	0150      	lsls	r0, r2, #5
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	ebb2 080a 	subs.w	r8, r2, sl
 8005fe2:	eb63 090b 	sbc.w	r9, r3, fp
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ff2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ff6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ffa:	ebb2 0408 	subs.w	r4, r2, r8
 8005ffe:	eb63 0509 	sbc.w	r5, r3, r9
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	00eb      	lsls	r3, r5, #3
 800600c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006010:	00e2      	lsls	r2, r4, #3
 8006012:	4614      	mov	r4, r2
 8006014:	461d      	mov	r5, r3
 8006016:	eb14 030a 	adds.w	r3, r4, sl
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	eb45 030b 	adc.w	r3, r5, fp
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602e:	4629      	mov	r1, r5
 8006030:	028b      	lsls	r3, r1, #10
 8006032:	4621      	mov	r1, r4
 8006034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006038:	4621      	mov	r1, r4
 800603a:	028a      	lsls	r2, r1, #10
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	2200      	movs	r2, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	60fa      	str	r2, [r7, #12]
 8006048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800604c:	f7fa fadc 	bl	8000608 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4613      	mov	r3, r2
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x180>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	3301      	adds	r3, #1
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006068:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006072:	e002      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006074:	4b05      	ldr	r3, [pc, #20]	@ (800608c <HAL_RCC_GetSysClockFreq+0x184>)
 8006076:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800607c:	4618      	mov	r0, r3
 800607e:	3740      	adds	r7, #64	@ 0x40
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	00f42400 	.word	0x00f42400
 8006090:	017d7840 	.word	0x017d7840

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b03      	ldr	r3, [pc, #12]	@ (80060a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000034 	.word	0x20000034

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060b0:	f7ff fff0 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	0a9b      	lsrs	r3, r3, #10
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4903      	ldr	r1, [pc, #12]	@ (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	080067a4 	.word	0x080067a4

080060d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e07b      	b.n	80061de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f6:	d009      	beq.n	800610c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	61da      	str	r2, [r3, #28]
 80060fe:	e005      	b.n	800610c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fd fec2 	bl	8003eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006190:	ea42 0103 	orr.w	r1, r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	f003 0104 	and.w	r1, r3, #4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	f003 0210 	and.w	r2, r3, #16
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b08a      	sub	sp, #40	@ 0x28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061f4:	2301      	movs	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061f8:	f7fd ffaa 	bl	8004150 <HAL_GetTick>
 80061fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006204:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006210:	7ffb      	ldrb	r3, [r7, #31]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d00c      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x4a>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800621c:	d106      	bne.n	800622c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <HAL_SPI_TransmitReceive+0x46>
 8006226:	7ffb      	ldrb	r3, [r7, #31]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d001      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
 800622e:	e17f      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x5c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x5c>
 800623c:	887b      	ldrh	r3, [r7, #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e174      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x6e>
 8006250:	2302      	movs	r3, #2
 8006252:	e16d      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b04      	cmp	r3, #4
 8006266:	d003      	beq.n	8006270 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2205      	movs	r2, #5
 800626c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	887a      	ldrh	r2, [r7, #2]
 8006292:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d007      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d17e      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_TransmitReceive+0xf6>
 80062d6:	8afb      	ldrh	r3, [r7, #22]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d16c      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ec:	1c9a      	adds	r2, r3, #2
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006300:	e059      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d11b      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x162>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <HAL_SPI_TransmitReceive+0x162>
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	2b01      	cmp	r3, #1
 800631e:	d113      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d119      	bne.n	800638a <HAL_SPI_TransmitReceive+0x1a4>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d014      	beq.n	800638a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	b292      	uxth	r2, r2
 800636c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006386:	2301      	movs	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800638a:	f7fd fee1 	bl	8004150 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006396:	429a      	cmp	r2, r3
 8006398:	d80d      	bhi.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d009      	beq.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0bc      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1a0      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x11c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d19b      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x11c>
 80063ca:	e082      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_TransmitReceive+0x1f4>
 80063d4:	8afb      	ldrh	r3, [r7, #22]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d171      	bne.n	80064be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006400:	e05d      	b.n	80064be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b02      	cmp	r3, #2
 800640e:	d11c      	bne.n	800644a <HAL_SPI_TransmitReceive+0x264>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <HAL_SPI_TransmitReceive+0x264>
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	2b01      	cmp	r3, #1
 800641e:	d114      	bne.n	800644a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d119      	bne.n	800648c <HAL_SPI_TransmitReceive+0x2a6>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d014      	beq.n	800648c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006488:	2301      	movs	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800648c:	f7fd fe60 	bl	8004150 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	429a      	cmp	r2, r3
 800649a:	d803      	bhi.n	80064a4 <HAL_SPI_TransmitReceive+0x2be>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d102      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x2c4>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e038      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d19c      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x21c>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d197      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f8b6 	bl	8006648 <SPI_EndRxTxTransaction>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e01d      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800652e:	2300      	movs	r3, #0
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3728      	adds	r7, #40	@ 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006548:	f7fd fe02 	bl	8004150 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006558:	f7fd fdfa 	bl	8004150 <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800655e:	4b39      	ldr	r3, [pc, #228]	@ (8006644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656e:	e054      	b.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d050      	beq.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006578:	f7fd fdea 	bl	8004150 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d13d      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800659c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a6:	d111      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b0:	d004      	beq.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ba:	d107      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d4:	d10f      	bne.n	80065f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e017      	b.n	800663a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3b01      	subs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	429a      	cmp	r2, r3
 8006636:	d19b      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000034 	.word	0x20000034

08006648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2201      	movs	r2, #1
 800665c:	2102      	movs	r1, #2
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff ff6a 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e032      	b.n	80066e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800667a:	4b1b      	ldr	r3, [pc, #108]	@ (80066e8 <SPI_EndRxTxTransaction+0xa0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <SPI_EndRxTxTransaction+0xa4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	0d5b      	lsrs	r3, r3, #21
 8006686:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006698:	d112      	bne.n	80066c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	@ 0x80
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff ff47 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d016      	beq.n	80066de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e00f      	b.n	80066e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d0f2      	beq.n	80066c0 <SPI_EndRxTxTransaction+0x78>
 80066da:	e000      	b.n	80066de <SPI_EndRxTxTransaction+0x96>
        break;
 80066dc:	bf00      	nop
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000034 	.word	0x20000034
 80066ec:	165e9f81 	.word	0x165e9f81

080066f0 <memset>:
 80066f0:	4402      	add	r2, r0
 80066f2:	4603      	mov	r3, r0
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d100      	bne.n	80066fa <memset+0xa>
 80066f8:	4770      	bx	lr
 80066fa:	f803 1b01 	strb.w	r1, [r3], #1
 80066fe:	e7f9      	b.n	80066f4 <memset+0x4>

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	@ (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	@ (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	@ (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	@ (8006744 <__libc_init_array+0x44>)
 8006714:	f000 f818 	bl	8006748 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	080067b4 	.word	0x080067b4
 800673c:	080067b4 	.word	0x080067b4
 8006740:	080067b4 	.word	0x080067b4
 8006744:	080067b8 	.word	0x080067b8

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
