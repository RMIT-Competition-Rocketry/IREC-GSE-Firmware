
GSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080063fc  080063fc  000073fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006440  08006440  00008040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006448  08006448  00008040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800644c  0800644c  0000744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08006450  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008040  2**0
                  CONTENTS
 10 .bss          0000059c  20000040  20000040  00008040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  00008040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c286  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc2  00000000  00000000  000142f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  000162b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000731  00000000  00000000  00016c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dac  00000000  00000000  00017361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc8e  00000000  00000000  0001a10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddd04  00000000  00000000  00029d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107a9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002684  00000000  00000000  00107ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0010a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000040 	.word	0x20000040
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080063e4 	.word	0x080063e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000044 	.word	0x20000044
 80001ec:	080063e4 	.word	0x080063e4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b988 	b.w	8000930 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	468e      	mov	lr, r1
 8000640:	4604      	mov	r4, r0
 8000642:	4688      	mov	r8, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d14a      	bne.n	80006de <__udivmoddi4+0xa6>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d962      	bls.n	8000714 <__udivmoddi4+0xdc>
 800064e:	fab2 f682 	clz	r6, r2
 8000652:	b14e      	cbz	r6, 8000668 <__udivmoddi4+0x30>
 8000654:	f1c6 0320 	rsb	r3, r6, #32
 8000658:	fa01 f806 	lsl.w	r8, r1, r6
 800065c:	fa20 f303 	lsr.w	r3, r0, r3
 8000660:	40b7      	lsls	r7, r6
 8000662:	ea43 0808 	orr.w	r8, r3, r8
 8000666:	40b4      	lsls	r4, r6
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f fc87 	uxth.w	ip, r7
 8000670:	fbb8 f1fe 	udiv	r1, r8, lr
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	fb0e 8811 	mls	r8, lr, r1, r8
 800067a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067e:	fb01 f20c 	mul.w	r2, r1, ip
 8000682:	429a      	cmp	r2, r3
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x62>
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	f101 30ff 	add.w	r0, r1, #4294967295
 800068c:	f080 80ea 	bcs.w	8000864 <__udivmoddi4+0x22c>
 8000690:	429a      	cmp	r2, r3
 8000692:	f240 80e7 	bls.w	8000864 <__udivmoddi4+0x22c>
 8000696:	3902      	subs	r1, #2
 8000698:	443b      	add	r3, r7
 800069a:	1a9a      	subs	r2, r3, r2
 800069c:	b2a3      	uxth	r3, r4
 800069e:	fbb2 f0fe 	udiv	r0, r2, lr
 80006a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ae:	459c      	cmp	ip, r3
 80006b0:	d909      	bls.n	80006c6 <__udivmoddi4+0x8e>
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006b8:	f080 80d6 	bcs.w	8000868 <__udivmoddi4+0x230>
 80006bc:	459c      	cmp	ip, r3
 80006be:	f240 80d3 	bls.w	8000868 <__udivmoddi4+0x230>
 80006c2:	443b      	add	r3, r7
 80006c4:	3802      	subs	r0, #2
 80006c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ca:	eba3 030c 	sub.w	r3, r3, ip
 80006ce:	2100      	movs	r1, #0
 80006d0:	b11d      	cbz	r5, 80006da <__udivmoddi4+0xa2>
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	2200      	movs	r2, #0
 80006d6:	e9c5 3200 	strd	r3, r2, [r5]
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d905      	bls.n	80006ee <__udivmoddi4+0xb6>
 80006e2:	b10d      	cbz	r5, 80006e8 <__udivmoddi4+0xb0>
 80006e4:	e9c5 0100 	strd	r0, r1, [r5]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4608      	mov	r0, r1
 80006ec:	e7f5      	b.n	80006da <__udivmoddi4+0xa2>
 80006ee:	fab3 f183 	clz	r1, r3
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d146      	bne.n	8000784 <__udivmoddi4+0x14c>
 80006f6:	4573      	cmp	r3, lr
 80006f8:	d302      	bcc.n	8000700 <__udivmoddi4+0xc8>
 80006fa:	4282      	cmp	r2, r0
 80006fc:	f200 8105 	bhi.w	800090a <__udivmoddi4+0x2d2>
 8000700:	1a84      	subs	r4, r0, r2
 8000702:	eb6e 0203 	sbc.w	r2, lr, r3
 8000706:	2001      	movs	r0, #1
 8000708:	4690      	mov	r8, r2
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0e5      	beq.n	80006da <__udivmoddi4+0xa2>
 800070e:	e9c5 4800 	strd	r4, r8, [r5]
 8000712:	e7e2      	b.n	80006da <__udivmoddi4+0xa2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	f000 8090 	beq.w	800083a <__udivmoddi4+0x202>
 800071a:	fab2 f682 	clz	r6, r2
 800071e:	2e00      	cmp	r6, #0
 8000720:	f040 80a4 	bne.w	800086c <__udivmoddi4+0x234>
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	b280      	uxth	r0, r0
 800072e:	b2bc      	uxth	r4, r7
 8000730:	2101      	movs	r1, #1
 8000732:	fbb2 fcfe 	udiv	ip, r2, lr
 8000736:	fb0e 221c 	mls	r2, lr, ip, r2
 800073a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073e:	fb04 f20c 	mul.w	r2, r4, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x11e>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f10c 38ff 	add.w	r8, ip, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x11c>
 800074e:	429a      	cmp	r2, r3
 8000750:	f200 80e0 	bhi.w	8000914 <__udivmoddi4+0x2dc>
 8000754:	46c4      	mov	ip, r8
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	fbb3 f2fe 	udiv	r2, r3, lr
 800075c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000760:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000764:	fb02 f404 	mul.w	r4, r2, r4
 8000768:	429c      	cmp	r4, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x144>
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x142>
 8000774:	429c      	cmp	r4, r3
 8000776:	f200 80ca 	bhi.w	800090e <__udivmoddi4+0x2d6>
 800077a:	4602      	mov	r2, r0
 800077c:	1b1b      	subs	r3, r3, r4
 800077e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000782:	e7a5      	b.n	80006d0 <__udivmoddi4+0x98>
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	408b      	lsls	r3, r1
 800078a:	fa22 f706 	lsr.w	r7, r2, r6
 800078e:	431f      	orrs	r7, r3
 8000790:	fa0e f401 	lsl.w	r4, lr, r1
 8000794:	fa20 f306 	lsr.w	r3, r0, r6
 8000798:	fa2e fe06 	lsr.w	lr, lr, r6
 800079c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007a0:	4323      	orrs	r3, r4
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	fa1f fc87 	uxth.w	ip, r7
 80007aa:	fbbe f0f9 	udiv	r0, lr, r9
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007bc:	45a6      	cmp	lr, r4
 80007be:	fa02 f201 	lsl.w	r2, r2, r1
 80007c2:	d909      	bls.n	80007d8 <__udivmoddi4+0x1a0>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ca:	f080 809c 	bcs.w	8000906 <__udivmoddi4+0x2ce>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f240 8099 	bls.w	8000906 <__udivmoddi4+0x2ce>
 80007d4:	3802      	subs	r0, #2
 80007d6:	443c      	add	r4, r7
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	fa1f fe83 	uxth.w	lr, r3
 80007e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e4:	fb09 4413 	mls	r4, r9, r3, r4
 80007e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f0:	45a4      	cmp	ip, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1ce>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007fa:	f080 8082 	bcs.w	8000902 <__udivmoddi4+0x2ca>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d97f      	bls.n	8000902 <__udivmoddi4+0x2ca>
 8000802:	3b02      	subs	r3, #2
 8000804:	443c      	add	r4, r7
 8000806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800080a:	eba4 040c 	sub.w	r4, r4, ip
 800080e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000812:	4564      	cmp	r4, ip
 8000814:	4673      	mov	r3, lr
 8000816:	46e1      	mov	r9, ip
 8000818:	d362      	bcc.n	80008e0 <__udivmoddi4+0x2a8>
 800081a:	d05f      	beq.n	80008dc <__udivmoddi4+0x2a4>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x1fe>
 800081e:	ebb8 0203 	subs.w	r2, r8, r3
 8000822:	eb64 0409 	sbc.w	r4, r4, r9
 8000826:	fa04 f606 	lsl.w	r6, r4, r6
 800082a:	fa22 f301 	lsr.w	r3, r2, r1
 800082e:	431e      	orrs	r6, r3
 8000830:	40cc      	lsrs	r4, r1
 8000832:	e9c5 6400 	strd	r6, r4, [r5]
 8000836:	2100      	movs	r1, #0
 8000838:	e74f      	b.n	80006da <__udivmoddi4+0xa2>
 800083a:	fbb1 fcf2 	udiv	ip, r1, r2
 800083e:	0c01      	lsrs	r1, r0, #16
 8000840:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000844:	b280      	uxth	r0, r0
 8000846:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800084a:	463b      	mov	r3, r7
 800084c:	4638      	mov	r0, r7
 800084e:	463c      	mov	r4, r7
 8000850:	46b8      	mov	r8, r7
 8000852:	46be      	mov	lr, r7
 8000854:	2620      	movs	r6, #32
 8000856:	fbb1 f1f7 	udiv	r1, r1, r7
 800085a:	eba2 0208 	sub.w	r2, r2, r8
 800085e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000862:	e766      	b.n	8000732 <__udivmoddi4+0xfa>
 8000864:	4601      	mov	r1, r0
 8000866:	e718      	b.n	800069a <__udivmoddi4+0x62>
 8000868:	4610      	mov	r0, r2
 800086a:	e72c      	b.n	80006c6 <__udivmoddi4+0x8e>
 800086c:	f1c6 0220 	rsb	r2, r6, #32
 8000870:	fa2e f302 	lsr.w	r3, lr, r2
 8000874:	40b7      	lsls	r7, r6
 8000876:	40b1      	lsls	r1, r6
 8000878:	fa20 f202 	lsr.w	r2, r0, r2
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	430a      	orrs	r2, r1
 8000882:	fbb3 f8fe 	udiv	r8, r3, lr
 8000886:	b2bc      	uxth	r4, r7
 8000888:	fb0e 3318 	mls	r3, lr, r8, r3
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb08 f904 	mul.w	r9, r8, r4
 8000896:	40b0      	lsls	r0, r6
 8000898:	4589      	cmp	r9, r1
 800089a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800089e:	b280      	uxth	r0, r0
 80008a0:	d93e      	bls.n	8000920 <__udivmoddi4+0x2e8>
 80008a2:	1879      	adds	r1, r7, r1
 80008a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008a8:	d201      	bcs.n	80008ae <__udivmoddi4+0x276>
 80008aa:	4589      	cmp	r9, r1
 80008ac:	d81f      	bhi.n	80008ee <__udivmoddi4+0x2b6>
 80008ae:	eba1 0109 	sub.w	r1, r1, r9
 80008b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c4:	4542      	cmp	r2, r8
 80008c6:	d229      	bcs.n	800091c <__udivmoddi4+0x2e4>
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ce:	d2c4      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d0:	4542      	cmp	r2, r8
 80008d2:	d2c2      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d4:	f1a9 0102 	sub.w	r1, r9, #2
 80008d8:	443a      	add	r2, r7
 80008da:	e7be      	b.n	800085a <__udivmoddi4+0x222>
 80008dc:	45f0      	cmp	r8, lr
 80008de:	d29d      	bcs.n	800081c <__udivmoddi4+0x1e4>
 80008e0:	ebbe 0302 	subs.w	r3, lr, r2
 80008e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008e8:	3801      	subs	r0, #1
 80008ea:	46e1      	mov	r9, ip
 80008ec:	e796      	b.n	800081c <__udivmoddi4+0x1e4>
 80008ee:	eba7 0909 	sub.w	r9, r7, r9
 80008f2:	4449      	add	r1, r9
 80008f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fc:	fb09 f804 	mul.w	r8, r9, r4
 8000900:	e7db      	b.n	80008ba <__udivmoddi4+0x282>
 8000902:	4673      	mov	r3, lr
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1ce>
 8000906:	4650      	mov	r0, sl
 8000908:	e766      	b.n	80007d8 <__udivmoddi4+0x1a0>
 800090a:	4608      	mov	r0, r1
 800090c:	e6fd      	b.n	800070a <__udivmoddi4+0xd2>
 800090e:	443b      	add	r3, r7
 8000910:	3a02      	subs	r2, #2
 8000912:	e733      	b.n	800077c <__udivmoddi4+0x144>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	443b      	add	r3, r7
 800091a:	e71c      	b.n	8000756 <__udivmoddi4+0x11e>
 800091c:	4649      	mov	r1, r9
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x222>
 8000920:	eba1 0109 	sub.w	r1, r1, r9
 8000924:	46c4      	mov	ip, r8
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fb09 f804 	mul.w	r8, r9, r4
 800092e:	e7c4      	b.n	80008ba <__udivmoddi4+0x282>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <configureSPIBus1>:
}



void configureSPIBus1(void) //for ADC transducers
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <configureSPIBus1+0x74>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1a      	ldr	r2, [pc, #104]	@ (80009a8 <configureSPIBus1+0x74>)
 800093e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000942:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODE5_Pos | 0x02 << GPIO_MODER_MODE6_Pos | 0x02 << GPIO_MODER_MODE7_Pos);
 8000944:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <configureSPIBus1+0x74>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <configureSPIBus1+0x74>)
 800094a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800094e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5_Msk | GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk); //if needing to change internal pull up/downs
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <configureSPIBus1+0x74>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a14      	ldr	r2, [pc, #80]	@ (80009a8 <configureSPIBus1+0x74>)
 8000956:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800095a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x01 << GPIO_PUPDR_PUPD5_Pos | 0x01 << GPIO_PUPDR_PUPD6_Pos | 0x01 << GPIO_PUPDR_PUPD7_Pos); //internal pull ups on SCK, MOSI and MISO
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <configureSPIBus1+0x74>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <configureSPIBus1+0x74>)
 8000962:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000966:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT5_Msk | GPIO_OTYPER_OT6_Msk | GPIO_OTYPER_OT7_Msk ); //push pull de
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <configureSPIBus1+0x74>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	490e      	ldr	r1, [pc, #56]	@ (80009a8 <configureSPIBus1+0x74>)
 800096e:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8000972:	4013      	ands	r3, r2
 8000974:	604b      	str	r3, [r1, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5_Msk | GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED7_Msk);
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <configureSPIBus1+0x74>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	4a0b      	ldr	r2, [pc, #44]	@ (80009a8 <configureSPIBus1+0x74>)
 800097c:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000980:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x03<<GPIO_OSPEEDR_OSPEED5_Pos | 0x03<<GPIO_OSPEEDR_OSPEED6_Pos | 0x03<<GPIO_OSPEEDR_OSPEED7_Pos); //fast mode
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <configureSPIBus1+0x74>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <configureSPIBus1+0x74>)
 8000988:	f443 437c 	orr.w	r3, r3, #64512	@ 0xfc00
 800098c:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <configureSPIBus1+0x74>)
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <configureSPIBus1+0x74>)
 8000994:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000998:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800099c:	6213      	str	r3, [r2, #32]
	SPI1->CR1 |= SPI_CR1_DFF; //16 bit mode has been selected!
	SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE);
	SPI1->CR1 |= SPI_CR1_SPE; //enables the protocol

	*/
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40020000 	.word	0x40020000

080009ac <configureSPIBus5>:


void configureSPIBus5(void) // For ADC or external SPI device via SPI5
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
    // Config PF7 (Clock), PF8 (MISO), PF9 (MOSI) for alternate function mode
    GPIOF->MODER &= ~(GPIO_MODER_MODE7_Msk | GPIO_MODER_MODE8_Msk | GPIO_MODER_MODE9_Msk);
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <configureSPIBus5+0x94>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <configureSPIBus5+0x94>)
 80009b6:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80009ba:	6013      	str	r3, [r2, #0]
    GPIOF->MODER |= (0x2 << GPIO_MODER_MODE7_Pos) | (0x2 << GPIO_MODER_MODE8_Pos) | (0x2 << GPIO_MODER_MODE9_Pos);
 80009bc:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <configureSPIBus5+0x94>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <configureSPIBus5+0x94>)
 80009c2:	f443 2328 	orr.w	r3, r3, #688128	@ 0xa8000
 80009c6:	6013      	str	r3, [r2, #0]

    // PUPDs
    GPIOF->PUPDR &= ~(GPIO_PUPDR_PUPD7_Msk | GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <configureSPIBus5+0x94>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a40 <configureSPIBus5+0x94>)
 80009ce:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80009d2:	60d3      	str	r3, [r2, #12]
    GPIOF->PUPDR |= (0x1 << GPIO_PUPDR_PUPD7_Pos) | (0x1 << GPIO_PUPDR_PUPD8_Pos) | (0x1 << GPIO_PUPDR_PUPD9_Pos);
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <configureSPIBus5+0x94>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <configureSPIBus5+0x94>)
 80009da:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 80009de:	60d3      	str	r3, [r2, #12]

    // Push Pull
    GPIOF->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <configureSPIBus5+0x94>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a16      	ldr	r2, [pc, #88]	@ (8000a40 <configureSPIBus5+0x94>)
 80009e6:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 80009ea:	6053      	str	r3, [r2, #4]

    // Speed - fast
    GPIOF->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7_Msk | GPIO_OSPEEDR_OSPEED8_Msk | GPIO_OSPEEDR_OSPEED9_Msk);
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <configureSPIBus5+0x94>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <configureSPIBus5+0x94>)
 80009f2:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80009f6:	6093      	str	r3, [r2, #8]
    GPIOF->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED7_Pos) | (0x3 << GPIO_OSPEEDR_OSPEED8_Pos) | (0x3 << GPIO_OSPEEDR_OSPEED9_Pos);
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <configureSPIBus5+0x94>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <configureSPIBus5+0x94>)
 80009fe:	f443 237c 	orr.w	r3, r3, #1032192	@ 0xfc000
 8000a02:	6093      	str	r3, [r2, #8]

    // Alternate Function 5 for SPI5 on PF7, PF8, PF9
    GPIOF->AFR[0] &= ~(0xF << (4 * 7));                      // PF7 (SCK)
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000a0e:	6213      	str	r3, [r2, #32]
    GPIOF->AFR[1] &= ~((0xF << (4 * (8 - 8))) | (0xF << (4 * (9 - 8)))); // PF8, PF9
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a14:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000a1a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOF->AFR[0] |= (5 << (4 * 7));
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a1e:	6a1b      	ldr	r3, [r3, #32]
 8000a20:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a22:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000a26:	6213      	str	r3, [r2, #32]
    GPIOF->AFR[1] |= (5 << (4 * (8 - 8))) | (5 << (4 * (9 - 8)));
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <configureSPIBus5+0x94>)
 8000a2e:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000a32:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021400 	.word	0x40021400

08000a44 <configureSPIBus6>:


void configureSPIBus6(void)// 	//for both additional 5V channels and LoRa
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	GPIOG->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk);
 8000a48:	4b58      	ldr	r3, [pc, #352]	@ (8000bac <configureSPIBus6+0x168>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a57      	ldr	r2, [pc, #348]	@ (8000bac <configureSPIBus6+0x168>)
 8000a4e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000a52:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x02 <<GPIO_MODER_MODE12_Pos | 0x02 << GPIO_MODER_MODE13_Pos | 0x02 << GPIO_MODER_MODE14_Pos);
 8000a54:	4b55      	ldr	r3, [pc, #340]	@ (8000bac <configureSPIBus6+0x168>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a54      	ldr	r2, [pc, #336]	@ (8000bac <configureSPIBus6+0x168>)
 8000a5a:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8000a5e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD12_Msk | GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk); //if needing to change internal pull up/downs
 8000a60:	4b52      	ldr	r3, [pc, #328]	@ (8000bac <configureSPIBus6+0x168>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a51      	ldr	r2, [pc, #324]	@ (8000bac <configureSPIBus6+0x168>)
 8000a66:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000a6a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |= (0x01 << GPIO_PUPDR_PUPD12_Pos | 0x01 << GPIO_PUPDR_PUPD13_Pos | 0x01 << GPIO_PUPDR_PUPD14_Pos); //internal pull ups on SCK, MOSI and MISO
 8000a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000bac <configureSPIBus6+0x168>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4a4e      	ldr	r2, [pc, #312]	@ (8000bac <configureSPIBus6+0x168>)
 8000a72:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8000a76:	60d3      	str	r3, [r2, #12]
		//@var PG12 = SDO
		//		PG13 = SCLK
		// 		 PG14 = SDI
	//GPIO for LoRa, RF Switch & Chip select
	GPIOG->MODER &= ~(GPIO_MODER_MODE9_Msk | GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 8000a78:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <configureSPIBus6+0x168>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000bac <configureSPIBus6+0x168>)
 8000a7e:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8000a82:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x01 <<GPIO_MODER_MODE9_Pos | 0x01 <<GPIO_MODER_MODE10_Pos | 0x01 <<GPIO_MODER_MODE11_Pos);
 8000a84:	4b49      	ldr	r3, [pc, #292]	@ (8000bac <configureSPIBus6+0x168>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a48      	ldr	r2, [pc, #288]	@ (8000bac <configureSPIBus6+0x168>)
 8000a8a:	f443 03a8 	orr.w	r3, r3, #5505024	@ 0x540000
 8000a8e:	6013      	str	r3, [r2, #0]
	//		PG10 = RF_SWITCH
	//		 PG11 = CS

	//timer config for LoRa
		//Use the same config as Australis board
	TIM6->ARR &= ~(TIM_ARR_ARR_Msk);
 8000a90:	4b47      	ldr	r3, [pc, #284]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a94:	4b46      	ldr	r3, [pc, #280]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC &= ~(TIM_PSC_PSC_Msk);
 8000a9a:	4b45      	ldr	r3, [pc, #276]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9e:	4a44      	ldr	r2, [pc, #272]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000aa0:	0c1b      	lsrs	r3, r3, #16
 8000aa2:	041b      	lsls	r3, r3, #16
 8000aa4:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR |= 20000;
 8000aa6:	4b42      	ldr	r3, [pc, #264]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aaa:	4a41      	ldr	r2, [pc, #260]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000aac:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->PSC |= 251; //same as australis to remain consistent!
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aba:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000abc:	f043 03fb 	orr.w	r3, r3, #251	@ 0xfb
 8000ac0:	6293      	str	r3, [r2, #40]	@ 0x28

	GPIOG->ODR |= (GPIO_ODR_OD9); //hold reset high for SX1272
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <configureSPIBus6+0x168>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a39      	ldr	r2, [pc, #228]	@ (8000bac <configureSPIBus6+0x168>)
 8000ac8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000acc:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //enable TIM6
 8000ace:	4b38      	ldr	r3, [pc, #224]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a37      	ldr	r2, [pc, #220]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6013      	str	r3, [r2, #0]
//	while((TIM6->CR1 & TIM_SR_UIF)==0); //wait for hardware registers to be updated
	GPIOG->ODR &= ~(GPIO_ODR_OD9); //resets reset on GPIO
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <configureSPIBus6+0x168>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a33      	ldr	r2, [pc, #204]	@ (8000bac <configureSPIBus6+0x168>)
 8000ae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ae4:	6153      	str	r3, [r2, #20]
	TIM6->CR1 &= ~(TIM_SR_UIF); //clears UIF register
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <configureSPIBus6+0x16c>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	6013      	str	r3, [r2, #0]

	//
	GPIOG->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT12_Msk | GPIO_OTYPER_OT13_Msk | GPIO_OTYPER_OT14_Msk); //push pull
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <configureSPIBus6+0x168>)
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	492d      	ldr	r1, [pc, #180]	@ (8000bac <configureSPIBus6+0x168>)
 8000af8:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8000afc:	4013      	ands	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED12_Msk | GPIO_OSPEEDR_OSPEED13_Msk | GPIO_OSPEEDR_OSPEED14_Msk);
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <configureSPIBus6+0x168>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <configureSPIBus6+0x168>)
 8000b06:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000b0a:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0x02<<GPIO_OSPEEDR_OSPEED12_Pos | 0x02<<GPIO_OSPEEDR_OSPEED13_Pos | 0x02<<GPIO_OSPEEDR_OSPEED14_Pos); //fast mode
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <configureSPIBus6+0x168>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4a26      	ldr	r2, [pc, #152]	@ (8000bac <configureSPIBus6+0x168>)
 8000b12:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8000b16:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD11; //raise up CS
 8000b18:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <configureSPIBus6+0x168>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <configureSPIBus6+0x168>)
 8000b1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b22:	6153      	str	r3, [r2, #20]

	GPIOG->AFR[1] &= ~((GPIO_AFRH_AFRH5) | (GPIO_AFRH_AFRH6) | (GPIO_AFRH_AFRH7));// alternate functions for SPI3
 8000b24:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <configureSPIBus6+0x168>)
 8000b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b28:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <configureSPIBus6+0x168>)
 8000b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000b2e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= ((0x05 << 4*4) | (0x05 << 5*4) | (0x05 << 6*4));// alternate functions for SPI3
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <configureSPIBus6+0x168>)
 8000b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b34:	4a1d      	ldr	r2, [pc, #116]	@ (8000bac <configureSPIBus6+0x168>)
 8000b36:	f043 63aa 	orr.w	r3, r3, #89128960	@ 0x5500000
 8000b3a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000b3e:	6253      	str	r3, [r2, #36]	@ 0x24

    SPI6->CR1 &= ~(SPI_CR1_BR_Msk); // Clear baud rate bits
 8000b40:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b46:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000b4a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= (0x03 << SPI_CR1_BR_Pos); // SPIclk/8
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b52:	f043 0318 	orr.w	r3, r3, #24
 8000b56:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk); // CPHA = 0, CPOL = 0
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a15      	ldr	r2, [pc, #84]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b5e:	f023 0303 	bic.w	r3, r3, #3
 8000b62:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_MSTR; // Master mode
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; // Software slave management
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b76:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b7a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_LSBFIRST); // MSB first
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b86:	6013      	str	r3, [r2, #0]
   // SPI6->CR1 |= SPI_CR1_DFF; // 16-bit mode
    SPI6->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE); // Full duplex
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b8e:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 8000b92:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SPE; // Enable SPI
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <configureSPIBus6+0x170>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40001000 	.word	0x40001000
 8000bb4:	40015400 	.word	0x40015400

08000bb8 <configureRCC_APB1>:
	//rise and repeat for all SPI buses
}


void configureRCC_APB1(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN);
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bc2:	f423 0381 	bic.w	r3, r3, #4227072	@ 0x408000
 8000bc6:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8000bca:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bd2:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000bd6:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000bda:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST |  RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST;
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000be2:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000be6:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000bea:	6213      	str	r3, [r2, #32]
	__ASM("NOP");
 8000bec:	bf00      	nop
	__ASM("NOP");
 8000bee:	bf00      	nop
	RCC->APB1RSTR &= (uint16_t)~(RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST | RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST);
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bf2:	6a1a      	ldr	r2, [r3, #32]
 8000bf4:	4905      	ldr	r1, [pc, #20]	@ (8000c0c <configureRCC_APB1+0x54>)
 8000bf6:	f647 73ce 	movw	r3, #32718	@ 0x7fce
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	620b      	str	r3, [r1, #32]
	__ASM("NOP");
 8000bfe:	bf00      	nop
	__ASM("NOP");
 8000c00:	bf00      	nop
	//configure for more timers when necessary
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40023800 	.word	0x40023800

08000c10 <configureRCC_APB2>:

void configureRCC_APB2(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	RCC->APB2ENR &=  ~(RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN | RCC_APB2ENR_SPI5EN | RCC_APB2ENR_SPI6EN | RCC_APB2ENR_SYSCFGEN /*important for interrupts and other sys init*/| RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN);
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c18:	490f      	ldr	r1, [pc, #60]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <configureRCC_APB2+0x4c>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	644b      	str	r3, [r1, #68]	@ 0x44
	RCC->APB2ENR |=  RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN | RCC_APB2ENR_SPI5EN | RCC_APB2ENR_SPI6EN | RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <configureRCC_APB2+0x50>)
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	644b      	str	r3, [r1, #68]	@ 0x44

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST | RCC_APB2RSTR_SPI5RST | RCC_APB2RSTR_SPI6RST | RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c30:	4909      	ldr	r1, [pc, #36]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <configureRCC_APB2+0x54>)
 8000c34:	4313      	orrs	r3, r2
 8000c36:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000c38:	bf00      	nop
	__ASM("NOP");
 8000c3a:	bf00      	nop
	RCC->APB2RSTR &= (uint16_t)~(RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST| RCC_APB2RSTR_SPI5RST | RCC_APB2RSTR_SPI6RST| RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c40:	4905      	ldr	r1, [pc, #20]	@ (8000c58 <configureRCC_APB2+0x48>)
 8000c42:	f648 73df 	movw	r3, #36831	@ 0x8fdf
 8000c46:	4013      	ands	r3, r2
 8000c48:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000c4a:	bf00      	nop
	__ASM("NOP");
 8000c4c:	bf00      	nop
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	ffcf8fde 	.word	0xffcf8fde
 8000c60:	00307021 	.word	0x00307021
 8000c64:	00347020 	.word	0x00347020

08000c68 <configureRCC_AHB1>:
void configureRCC_AHB1(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <configureRCC_AHB1+0x38>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <configureRCC_AHB1+0x38>)
 8000c72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c76:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <configureRCC_AHB1+0x38>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <configureRCC_AHB1+0x38>)
 8000c7e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
	__ASM("NOP");
 8000c84:	bf00      	nop
	__ASM("NOP");
 8000c86:	bf00      	nop
	RCC->AHB1RSTR &= (uint16_t)(~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST));
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <configureRCC_AHB1+0x38>)
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	4904      	ldr	r1, [pc, #16]	@ (8000ca0 <configureRCC_AHB1+0x38>)
 8000c8e:	f64f 7382 	movw	r3, #65410	@ 0xff82
 8000c92:	4013      	ands	r3, r2
 8000c94:	610b      	str	r3, [r1, #16]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <GPIO_init>:
#include "gpio.h"
#include "stm32f4xx_hal.h"


void GPIO_init(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	79ba      	ldrb	r2, [r7, #6]
 8000cca:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	7e3a      	ldrb	r2, [r7, #24]
 8000cd0:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	7f3a      	ldrb	r2, [r7, #28]
 8000cd6:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cde:	711a      	strb	r2, [r3, #4]

	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	79f9      	ldrb	r1, [r7, #7]
 8000ce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	79f9      	ldrb	r1, [r7, #7]
 8000d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4619      	mov	r1, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	79b9      	ldrb	r1, [r7, #6]
 8000d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	400a      	ands	r2, r1
 8000d34:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	79b9      	ldrb	r1, [r7, #6]
 8000d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	7e39      	ldrb	r1, [r7, #24]
 8000d58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4619      	mov	r1, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	7e39      	ldrb	r1, [r7, #24]
 8000d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4619      	mov	r1, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS)); //clears the bit that we want to edit
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	7f39      	ldrb	r1, [r7, #28]
 8000d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	400a      	ands	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	7f39      	ldrb	r1, [r7, #28]
 8000db0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	4619      	mov	r1, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	60da      	str	r2, [r3, #12]

}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SX1272_init>:
    GPIO_TypeDef *port,
    unsigned long cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b08c      	sub	sp, #48	@ 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8000dd8:	6239      	str	r1, [r7, #32]
 8000dda:	61fa      	str	r2, [r7, #28]
 8000ddc:	61bb      	str	r3, [r7, #24]

	SPI_Config spiLoraConfig = SPI_CONFIG_DEFAULT; // Using default settings as base
 8000dde:	2300      	movs	r3, #0
 8000de0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000dee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f362 03c5 	bfi	r3, r2, #3, #3
 8000e10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e14:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000e20:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	spiLoraConfig.CPHA       = SPI_CPHA_FIRST;     // Begin on first clock edge
 8000e2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	spiLoraConfig.CPOL       = SPI_CPOL0;          // Idle clock low
 8000e38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e3c:	f023 0302 	bic.w	r3, r3, #2
 8000e40:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	spiLoraConfig.BR 		= SPI_BR_PCLK16;
 8000e44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e48:	2203      	movs	r2, #3
 8000e4a:	f362 03c5 	bfi	r3, r2, #3, #3
 8000e4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	static SPI_t base;
	base = SPI_init(SPI6, &spiLoraConfig);
 8000e52:	4c2f      	ldr	r4, [pc, #188]	@ (8000f10 <SX1272_init+0x140>)
 8000e54:	463b      	mov	r3, r7
 8000e56:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000e5a:	492e      	ldr	r1, [pc, #184]	@ (8000f14 <SX1272_init+0x144>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 f835 	bl	8003ecc <SPI_init>
 8000e62:	4625      	mov	r5, r4
 8000e64:	463c      	mov	r4, r7
 8000e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e6e:	e885 0003 	stmia.w	r5, {r0, r1}
	lora->base = &base;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <SX1272_init+0x140>)
 8000e76:	601a      	str	r2, [r3, #0]

  //SPI_init(&lora->base, COMM_LORA, SPI6, MODE8, port, cs);
  lora->standby      = SX1272_standby;
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <SX1272_init+0x148>)
 8000e7c:	60da      	str	r2, [r3, #12]
  lora->enableBoost  = SX1272_enableBoost;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <SX1272_init+0x14c>)
 8000e82:	609a      	str	r2, [r3, #8]
  lora->transmit     = SX1272_transmit;
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	4a26      	ldr	r2, [pc, #152]	@ (8000f20 <SX1272_init+0x150>)
 8000e88:	611a      	str	r2, [r3, #16]
  lora->startReceive = SX1272_startReceive;
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	4a25      	ldr	r2, [pc, #148]	@ (8000f24 <SX1272_init+0x154>)
 8000e8e:	615a      	str	r2, [r3, #20]
  lora->readReceive  = SX1272_readReceive;
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	4a25      	ldr	r2, [pc, #148]	@ (8000f28 <SX1272_init+0x158>)
 8000e94:	619a      	str	r2, [r3, #24]
  lora->clearIRQ     = SX1272_clearIRQ;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <SX1272_init+0x15c>)
 8000e9a:	61da      	str	r2, [r3, #28]


  _SX1272_setMode(lora, SX1272_MODE_SLEEP); // Set mode to sleep
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ea0:	f000 f8ac 	bl	8000ffc <_SX1272_setMode>
  //MSB remains the same as default value of E4
 // SX1272_writeRegister(lora, SX1272_REG_FR_MIB, (0xE6)); //sets middle byte
  //SX1272_writeRegister(lora, SX1272_REG_FR_LSB, (0x67)); //sets last byte

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000eaa:	f000 f9c7 	bl	800123c <SX1272_writeRegister>
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 8000eae:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8000eb2:	019b      	lsls	r3, r3, #6
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	211d      	movs	r1, #29
 8000ec8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000eca:	f000 f9b7 	bl	800123c <SX1272_writeRegister>
  );
  /* clang-format on */

  /** @todo set spreading factor */
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 8000ece:	2294      	movs	r2, #148	@ 0x94
 8000ed0:	211e      	movs	r1, #30
 8000ed2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ed4:	f000 f9b2 	bl	800123c <SX1272_writeRegister>

  //Set both Tx and Rx FIFO base addresses to 0x00
  SX1272_writeRegister(lora, SX1272_REG_FIFO_TX_BASE_ADDR, 0x00); // Tx starts at 0x00
 8000ed8:	2200      	movs	r2, #0
 8000eda:	210e      	movs	r1, #14
 8000edc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ede:	f000 f9ad 	bl	800123c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_RX_BASE_ADDR, 0x00); // Rx starts at 0x00
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ee8:	f000 f9a8 	bl	800123c <SX1272_writeRegister>


  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000eec:	2220      	movs	r2, #32
 8000eee:	2122      	movs	r1, #34	@ 0x22
 8000ef0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ef2:	f000 f9a3 	bl	800123c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	2123      	movs	r1, #35	@ 0x23
 8000efa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000efc:	f000 f99e 	bl	800123c <SX1272_writeRegister>

  _SX1272_setMode(lora, SX1272_MODE_STDBY); // Set mode to Standby mode!
 8000f00:	2101      	movs	r1, #1
 8000f02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f04:	f000 f87a 	bl	8000ffc <_SX1272_setMode>


}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	@ 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f10:	2000005c 	.word	0x2000005c
 8000f14:	40015400 	.word	0x40015400
 8000f18:	080010cd 	.word	0x080010cd
 8000f1c:	08001039 	.word	0x08001039
 8000f20:	080010e5 	.word	0x080010e5
 8000f24:	0800115b 	.word	0x0800115b
 8000f28:	080011a3 	.word	0x080011a3
 8000f2c:	0800121b 	.word	0x0800121b

08000f30 <Dummy_Transmit>:
  return msg;
}


LoRa_Packet Dummy_Transmit()
{
 8000f30:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000f34:	b08e      	sub	sp, #56	@ 0x38
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	466b      	mov	r3, sp
 8000f3c:	461e      	mov	r6, r3
	LoRa_Packet msg;
	uint8_t id = 0x06;
 8000f3e:	2306      	movs	r3, #6
 8000f40:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t SIZE = 32;
 8000f44:	2320      	movs	r3, #32
 8000f46:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t data[SIZE];
 8000f4a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000f4e:	460b      	mov	r3, r1
 8000f50:	3b01      	subs	r3, #1
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f54:	b2cb      	uxtb	r3, r1
 8000f56:	2200      	movs	r2, #0
 8000f58:	4698      	mov	r8, r3
 8000f5a:	4691      	mov	r9, r2
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f70:	b2cb      	uxtb	r3, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	461c      	mov	r4, r3
 8000f76:	4615      	mov	r5, r2
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	00eb      	lsls	r3, r5, #3
 8000f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f86:	00e2      	lsls	r2, r4, #3
 8000f88:	460b      	mov	r3, r1
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	ebad 0d03 	sub.w	sp, sp, r3
 8000f94:	466b      	mov	r3, sp
 8000f96:	3300      	adds	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	msg.id = id;
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f9e:	733b      	strb	r3, [r7, #12]
	msg.data[0]=0x06;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 1; i <SIZE; i++)
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000faa:	e00c      	b.n	8000fc6 <Dummy_Transmit+0x96>
	{
		msg.data[i] = i;
 8000fac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fb0:	3338      	adds	r3, #56	@ 0x38
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000fb8:	f803 2c2b 	strb.w	r2, [r3, #-43]
	for(uint8_t i = 1; i <SIZE; i++)
 8000fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000fc6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000fca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d3ec      	bcc.n	8000fac <Dummy_Transmit+0x7c>
	}
	return msg;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	f107 040c 	add.w	r4, r7, #12
 8000fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fdc:	6028      	str	r0, [r5, #0]
 8000fde:	6069      	str	r1, [r5, #4]
 8000fe0:	60aa      	str	r2, [r5, #8]
 8000fe2:	60eb      	str	r3, [r5, #12]
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	6128      	str	r0, [r5, #16]
 8000fe8:	6169      	str	r1, [r5, #20]
 8000fea:	61aa      	str	r2, [r5, #24]
 8000fec:	61eb      	str	r3, [r5, #28]
 8000fee:	46b5      	mov	sp, r6
}
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	3738      	adds	r7, #56	@ 0x38
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000ffa:	4770      	bx	lr

08000ffc <_SX1272_setMode>:
 *
 * @param lora         Pointer to LoRa struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 8001008:	2101      	movs	r1, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f94a 	bl	80012a4 <SX1272_readRegister>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f023 0307 	bic.w	r3, r3, #7
 800101a:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	4313      	orrs	r3, r2
 8001022:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	461a      	mov	r2, r3
 8001028:	2101      	movs	r1, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f906 	bl	800123c <SX1272_writeRegister>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SX1272_enableBoost>:
 * @param  enable Boolean value for the enable toggle.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 8001044:	2109      	movs	r1, #9
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f92c 	bl	80012a4 <SX1272_readRegister>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]
  regPaConfig         |= SX1272_PA_SELECT;								//Set PA Boost Select
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001056:	73fb      	strb	r3, [r7, #15]
  regPaConfig 		  |= 0x0F;											//Set Gain to MAX
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	f043 030f 	orr.w	r3, r3, #15
 800105e:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	461a      	mov	r2, r3
 8001064:	2109      	movs	r1, #9
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8e8 	bl	800123c <SX1272_writeRegister>
  regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG);		 //DEBUGGING -  Read back in current config and ensure its as expected
 800106c:	2109      	movs	r1, #9
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f918 	bl	80012a4 <SX1272_readRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
  uint8_t regPaDac = SX1272_readRegister(lora, 0x5A);
 8001078:	215a      	movs	r1, #90	@ 0x5a
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f912 	bl	80012a4 <SX1272_readRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	73bb      	strb	r3, [r7, #14]
  regPaDac |= 0x07;														//Set PaDac to +20dbm mode
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	f043 0307 	orr.w	r3, r3, #7
 800108a:	73bb      	strb	r3, [r7, #14]
  SX1272_writeRegister(lora, 0x5A, regPaDac);
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	461a      	mov	r2, r3
 8001090:	215a      	movs	r1, #90	@ 0x5a
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f8d2 	bl	800123c <SX1272_writeRegister>
  uint8_t regOpC = SX1272_readRegister(lora, 0x0B);
 8001098:	210b      	movs	r1, #11
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f902 	bl	80012a4 <SX1272_readRegister>
 80010a0:	4603      	mov	r3, r0
 80010a2:	737b      	strb	r3, [r7, #13]
  regOpC |= 0b00100000;														//Disable Overcurrent protection
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	737b      	strb	r3, [r7, #13]
  SX1272_writeRegister(lora, 0x0B, regOpC);
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	461a      	mov	r2, r3
 80010b0:	210b      	movs	r1, #11
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f8c2 	bl	800123c <SX1272_writeRegister>
  regPaDac = SX1272_readRegister(lora, 0x0B);							//DEBUGGING - Read back in current config and ensure its as expected
 80010b8:	210b      	movs	r1, #11
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f8f2 	bl	80012a4 <SX1272_readRegister>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73bb      	strb	r3, [r7, #14]
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80010d4:	2101      	movs	r1, #1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff90 	bl	8000ffc <_SX1272_setMode>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80010ee:	2101      	movs	r1, #1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff83 	bl	8000ffc <_SX1272_setMode>
  SX1272_enableBoost(lora, true);
 80010f6:	2101      	movs	r1, #1
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff9d 	bl	8001038 <SX1272_enableBoost>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 80010fe:	2240      	movs	r2, #64	@ 0x40
 8001100:	2140      	movs	r1, #64	@ 0x40
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f89a 	bl	800123c <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 8001108:	2208      	movs	r2, #8
 800110a:	2112      	movs	r1, #18
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f895 	bl	800123c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 8001112:	2200      	movs	r2, #0
 8001114:	210d      	movs	r1, #13
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f890 	bl	800123c <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e00b      	b.n	800113a <SX1272_transmit+0x56>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f884 	bl	800123c <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b1f      	cmp	r3, #31
 800113e:	ddf0      	ble.n	8001122 <SX1272_transmit+0x3e>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff55 	bl	8000ffc <_SX1272_setMode>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8001162:	2101      	movs	r1, #1
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff49 	bl	8000ffc <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 800116a:	2200      	movs	r2, #0
 800116c:	2140      	movs	r1, #64	@ 0x40
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f864 	bl	800123c <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 8001174:	2240      	movs	r2, #64	@ 0x40
 8001176:	2112      	movs	r1, #18
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f85f 	bl	800123c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 800117e:	2200      	movs	r2, #0
 8001180:	210d      	movs	r1, #13
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f85a 	bl	800123c <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2205      	movs	r2, #5
 800118c:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff31 	bl	8000ffc <_SX1272_setMode>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 80011a2:	b590      	push	{r4, r7, lr}
 80011a4:	b087      	sub	sp, #28
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	4613      	mov	r3, r2
 80011ae:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 80011b0:	2240      	movs	r2, #64	@ 0x40
 80011b2:	2112      	movs	r1, #18
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f841 	bl	800123c <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 80011ba:	2113      	movs	r1, #19
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f871 	bl	80012a4 <SX1272_readRegister>
 80011c2:	4603      	mov	r3, r0
 80011c4:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 80011c6:	2110      	movs	r1, #16
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f000 f86b 	bl	80012a4 <SX1272_readRegister>
 80011ce:	4603      	mov	r3, r0
 80011d0:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 80011d2:	7cfa      	ldrb	r2, [r7, #19]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d901      	bls.n	80011de <SX1272_readReceive+0x3c>
    return false;
 80011da:	2300      	movs	r3, #0
 80011dc:	e019      	b.n	8001212 <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 80011de:	7cbb      	ldrb	r3, [r7, #18]
 80011e0:	461a      	mov	r2, r3
 80011e2:	210d      	movs	r1, #13
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f829 	bl	800123c <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	e00b      	b.n	8001208 <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	18d4      	adds	r4, r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f853 	bl	80012a4 <SX1272_readRegister>
 80011fe:	4603      	mov	r3, r0
 8001200:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	7cfb      	ldrb	r3, [r7, #19]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbef      	blt.n	80011f0 <SX1272_readReceive+0x4e>
  }

  return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}

0800121a <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	461a      	mov	r2, r3
 800122a:	2112      	movs	r1, #18
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f805 	bl	800123c <SX1272_writeRegister>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
 8001248:	4613      	mov	r3, r2
 800124a:	70bb      	strb	r3, [r7, #2]
  SPI_t *spi   = lora->base;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]

  //Pull CS Low
  LORA_CS_GPIO.port->ODR &= ~(LORA_CS);
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <SX1272_writeRegister+0x64>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	695a      	ldr	r2, [r3, #20]
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <SX1272_writeRegister+0x64>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001260:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001268:	72fb      	strb	r3, [r7, #11]
  spi->transmit(spi, payload);      // Transmit payload
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	7afa      	ldrb	r2, [r7, #11]
 8001270:	b292      	uxth	r2, r2
 8001272:	4611      	mov	r1, r2
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	4798      	blx	r3
  spi->transmit(spi, data);         // Transmit write data
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	78ba      	ldrb	r2, [r7, #2]
 800127e:	b292      	uxth	r2, r2
 8001280:	4611      	mov	r1, r2
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	4798      	blx	r3

  //Set CS High
  LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <SX1272_writeRegister+0x64>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <SX1272_writeRegister+0x64>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001294:	615a      	str	r2, [r3, #20]

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000500 	.word	0x20000500

080012a4 <SX1272_readRegister>:

uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	75fb      	strb	r3, [r7, #23]
  SPI_t *spi       = lora->base;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	613b      	str	r3, [r7, #16]

  //Pull CS Low
   LORA_CS_GPIO.port->ODR &= ~(LORA_CS);
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <SX1272_readRegister+0x68>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <SX1272_readRegister+0x68>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012c8:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d0:	73fb      	strb	r3, [r7, #15]
  response        = spi->transmit(spi, payload); // Transmit payload
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	b292      	uxth	r2, r2
 80012da:	4611      	mov	r1, r2
 80012dc:	6938      	ldr	r0, [r7, #16]
 80012de:	4798      	blx	r3
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
  response        = spi->transmit(spi, 0xFF);    // Transmit dummy data and reasd response
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	21ff      	movs	r1, #255	@ 0xff
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	4798      	blx	r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	75fb      	strb	r3, [r7, #23]

  //Set CS High
  LORA_CS_GPIO.port->ODR |= (LORA_CS);
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <SX1272_readRegister+0x68>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SX1272_readRegister+0x68>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001300:	615a      	str	r2, [r3, #20]

  return response;
 8001302:	7dfb      	ldrb	r3, [r7, #23]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000500 	.word	0x20000500

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db12      	blt.n	8001384 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	490a      	ldr	r1, [pc, #40]	@ (8001390 <__NVIC_DisableIRQ+0x44>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	3320      	adds	r3, #32
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001378:	f3bf 8f4f 	dsb	sy
}
 800137c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800137e:	f3bf 8f6f 	isb	sy
}
 8001382:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b096      	sub	sp, #88	@ 0x58
 80013ec:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80013ee:	f002 ff81 	bl	80042f4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 80013f2:	f002 f87d 	bl	80034f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	configureRCC_APB1();
 80013f6:	f7ff fbdf 	bl	8000bb8 <configureRCC_APB1>
	configureRCC_APB2();
 80013fa:	f7ff fc09 	bl	8000c10 <configureRCC_APB2>
	configureRCC_AHB1();
 80013fe:	f7ff fc33 	bl	8000c68 <configureRCC_AHB1>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	HAL_Delay(100); //important!!
 8001402:	2064      	movs	r0, #100	@ 0x64
 8001404:	f002 ffe8 	bl	80043d8 <HAL_Delay>

	MX_GPIO_Init();
 8001408:	f002 f8e2 	bl	80035d0 <MX_GPIO_Init>
	MX_I2C2_Init();
 800140c:	f002 f948 	bl	80036a0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	configureSPIBus1();
 8001410:	f7ff fa90 	bl	8000934 <configureSPIBus1>
	configureSPIBus5();
 8001414:	f7ff faca 	bl	80009ac <configureSPIBus5>
	configureSPIBus6();
 8001418:	f7ff fb14 	bl	8000a44 <configureSPIBus6>

	GPIO_init(&LOADCELL_CS, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x02);
 800141c:	2302      	movs	r3, #2
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2300      	movs	r3, #0
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	2301      	movs	r3, #1
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	2201      	movs	r2, #1
 800142c:	49ac      	ldr	r1, [pc, #688]	@ (80016e0 <main+0x2f8>)
 800142e:	48ad      	ldr	r0, [pc, #692]	@ (80016e4 <main+0x2fc>)
 8001430:	f7ff fc38 	bl	8000ca4 <GPIO_init>
	LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 8001434:	4bab      	ldr	r3, [pc, #684]	@ (80016e4 <main+0x2fc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	4baa      	ldr	r3, [pc, #680]	@ (80016e4 <main+0x2fc>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f042 0204 	orr.w	r2, r2, #4
 8001442:	615a      	str	r2, [r3, #20]

	GPIO_init(&ADDITIONAL_ADC_CS, GPIOF, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x06);
 8001444:	2306      	movs	r3, #6
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2300      	movs	r3, #0
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	2201      	movs	r2, #1
 8001454:	49a4      	ldr	r1, [pc, #656]	@ (80016e8 <main+0x300>)
 8001456:	48a5      	ldr	r0, [pc, #660]	@ (80016ec <main+0x304>)
 8001458:	f7ff fc24 	bl	8000ca4 <GPIO_init>
	ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 800145c:	4ba3      	ldr	r3, [pc, #652]	@ (80016ec <main+0x304>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	4ba2      	ldr	r3, [pc, #648]	@ (80016ec <main+0x304>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800146a:	615a      	str	r2, [r3, #20]

	 SPI_Config 	ADC_SPICONFIG = SPI_CONFIG_DEFAULT; // Using default settings as base
 800146c:	2300      	movs	r3, #0
 800146e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001470:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800147c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8001488:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8001494:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001498:	2202      	movs	r2, #2
 800149a:	f362 03c5 	bfi	r3, r2, #3, #3
 800149e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80014a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80014ae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	 ADC_SPICONFIG.CPHA        = SPI_CPHA_SECOND;     // Begin on first clock edge
 80014ba:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	 ADC_SPICONFIG.CPOL        = SPI_CPOL1;          // Idle clock low
 80014c6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	 ADC_SPICONFIG.BR 		  = SPI_BR_PCLK16;
 80014d2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014d6:	2203      	movs	r2, #3
 80014d8:	f362 03c5 	bfi	r3, r2, #3, #3
 80014dc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	 ADC_SPICONFIG.DFF		  = SPI_DFF16;
 80014e0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

	 static SPI_t ADDTIONAL_ADC;
	 static SPI_t LOADCELL_ADC;
	 ADDTIONAL_ADC = SPI_init(SPI5, &ADC_SPICONFIG);
 80014ec:	4c80      	ldr	r4, [pc, #512]	@ (80016f0 <main+0x308>)
 80014ee:	463b      	mov	r3, r7
 80014f0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80014f4:	497f      	ldr	r1, [pc, #508]	@ (80016f4 <main+0x30c>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fce8 	bl	8003ecc <SPI_init>
 80014fc:	4625      	mov	r5, r4
 80014fe:	463c      	mov	r4, r7
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001508:	e885 0003 	stmia.w	r5, {r0, r1}
	 LOADCELL_ADC = SPI_init(SPI1, &ADC_SPICONFIG);
 800150c:	4c7a      	ldr	r4, [pc, #488]	@ (80016f8 <main+0x310>)
 800150e:	463b      	mov	r3, r7
 8001510:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001514:	4979      	ldr	r1, [pc, #484]	@ (80016fc <main+0x314>)
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fcd8 	bl	8003ecc <SPI_init>
 800151c:	4625      	mov	r5, r4
 800151e:	463c      	mov	r4, r7
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001528:	e885 0003 	stmia.w	r5, {r0, r1}

	 uint16_t SPI_rec = 0x0000;
 800152c:	2300      	movs	r3, #0
 800152e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001532:	4b6e      	ldr	r3, [pc, #440]	@ (80016ec <main+0x304>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	4b6c      	ldr	r3, [pc, #432]	@ (80016ec <main+0x304>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001540:	615a      	str	r2, [r3, #20]
	 SPI_rec = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH1);
 8001542:	4b6b      	ldr	r3, [pc, #428]	@ (80016f0 <main+0x308>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2200      	movs	r2, #0
 8001548:	4611      	mov	r1, r2
 800154a:	4869      	ldr	r0, [pc, #420]	@ (80016f0 <main+0x308>)
 800154c:	4798      	blx	r3
 800154e:	4603      	mov	r3, r0
 8001550:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001554:	4b65      	ldr	r3, [pc, #404]	@ (80016ec <main+0x304>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	4b64      	ldr	r3, [pc, #400]	@ (80016ec <main+0x304>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001562:	615a      	str	r2, [r3, #20]
	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001564:	4b61      	ldr	r3, [pc, #388]	@ (80016ec <main+0x304>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <main+0x304>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001572:	615a      	str	r2, [r3, #20]
	 SPI_rec = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH1);
 8001574:	4b5e      	ldr	r3, [pc, #376]	@ (80016f0 <main+0x308>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2200      	movs	r2, #0
 800157a:	4611      	mov	r1, r2
 800157c:	485c      	ldr	r0, [pc, #368]	@ (80016f0 <main+0x308>)
 800157e:	4798      	blx	r3
 8001580:	4603      	mov	r3, r0
 8001582:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001586:	4b59      	ldr	r3, [pc, #356]	@ (80016ec <main+0x304>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	4b57      	ldr	r3, [pc, #348]	@ (80016ec <main+0x304>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001594:	615a      	str	r2, [r3, #20]

	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001596:	4b55      	ldr	r3, [pc, #340]	@ (80016ec <main+0x304>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	4b53      	ldr	r3, [pc, #332]	@ (80016ec <main+0x304>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015a4:	615a      	str	r2, [r3, #20]
	 SPI_rec = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH2);
 80015a6:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <main+0x308>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015ae:	4611      	mov	r1, r2
 80015b0:	484f      	ldr	r0, [pc, #316]	@ (80016f0 <main+0x308>)
 80015b2:	4798      	blx	r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 80015ba:	4b4c      	ldr	r3, [pc, #304]	@ (80016ec <main+0x304>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <main+0x304>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015c8:	615a      	str	r2, [r3, #20]
	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 80015ca:	4b48      	ldr	r3, [pc, #288]	@ (80016ec <main+0x304>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	4b46      	ldr	r3, [pc, #280]	@ (80016ec <main+0x304>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015d8:	615a      	str	r2, [r3, #20]
	 SPI_rec = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH2);
 80015da:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <main+0x308>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015e2:	4611      	mov	r1, r2
 80015e4:	4842      	ldr	r0, [pc, #264]	@ (80016f0 <main+0x308>)
 80015e6:	4798      	blx	r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <main+0x304>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <main+0x304>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015fc:	615a      	str	r2, [r3, #20]

	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <main+0x304>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <main+0x304>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800160c:	615a      	str	r2, [r3, #20]
	 SPI_rec = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH3);
 800160e:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <main+0x308>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001616:	4611      	mov	r1, r2
 8001618:	4835      	ldr	r0, [pc, #212]	@ (80016f0 <main+0x308>)
 800161a:	4798      	blx	r3
 800161c:	4603      	mov	r3, r0
 800161e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001622:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <main+0x304>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <main+0x304>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001630:	615a      	str	r2, [r3, #20]
	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <main+0x304>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <main+0x304>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001640:	615a      	str	r2, [r3, #20]
	 SPI_rec = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH3);
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <main+0x308>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800164a:	4611      	mov	r1, r2
 800164c:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <main+0x308>)
 800164e:	4798      	blx	r3
 8001650:	4603      	mov	r3, r0
 8001652:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001656:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <main+0x304>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <main+0x304>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001664:	615a      	str	r2, [r3, #20]

	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <main+0x304>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <main+0x304>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001674:	615a      	str	r2, [r3, #20]
	 SPI_rec = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH4);
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <main+0x310>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800167e:	4611      	mov	r1, r2
 8001680:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <main+0x310>)
 8001682:	4798      	blx	r3
 8001684:	4603      	mov	r3, r0
 8001686:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <main+0x304>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <main+0x304>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001698:	615a      	str	r2, [r3, #20]
	 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <main+0x304>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <main+0x304>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016a8:	615a      	str	r2, [r3, #20]
	 SPI_rec = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH4);
 80016aa:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <main+0x310>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80016b2:	4611      	mov	r1, r2
 80016b4:	4810      	ldr	r0, [pc, #64]	@ (80016f8 <main+0x310>)
 80016b6:	4798      	blx	r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <main+0x304>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <main+0x304>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016cc:	615a      	str	r2, [r3, #20]

	//-------------------- SMD LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION
	//PG0 -> Power LED
	GPIO_init(&LED_1, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0C);
 80016ce:	230c      	movs	r3, #12
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2301      	movs	r3, #1
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	2201      	movs	r2, #1
 80016de:	e00f      	b.n	8001700 <main+0x318>
 80016e0:	40020000 	.word	0x40020000
 80016e4:	20000530 	.word	0x20000530
 80016e8:	40021400 	.word	0x40021400
 80016ec:	20000518 	.word	0x20000518
 80016f0:	200005a8 	.word	0x200005a8
 80016f4:	40015000 	.word	0x40015000
 80016f8:	200005c0 	.word	0x200005c0
 80016fc:	40013000 	.word	0x40013000
 8001700:	49b0      	ldr	r1, [pc, #704]	@ (80019c4 <main+0x5dc>)
 8001702:	48b1      	ldr	r0, [pc, #708]	@ (80019c8 <main+0x5e0>)
 8001704:	f7ff face 	bl	8000ca4 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&LED_2, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0B);
 8001708:	230b      	movs	r3, #11
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2301      	movs	r3, #1
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	2201      	movs	r2, #1
 8001718:	49aa      	ldr	r1, [pc, #680]	@ (80019c4 <main+0x5dc>)
 800171a:	48ac      	ldr	r0, [pc, #688]	@ (80019cc <main+0x5e4>)
 800171c:	f7ff fac2 	bl	8000ca4 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&LED_3, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0A);
 8001720:	230a      	movs	r3, #10
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2301      	movs	r3, #1
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	2201      	movs	r2, #1
 8001730:	49a4      	ldr	r1, [pc, #656]	@ (80019c4 <main+0x5dc>)
 8001732:	48a7      	ldr	r0, [pc, #668]	@ (80019d0 <main+0x5e8>)
 8001734:	f7ff fab6 	bl	8000ca4 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&LED_4, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 8001738:	2309      	movs	r3, #9
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2301      	movs	r3, #1
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2301      	movs	r3, #1
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	2201      	movs	r2, #1
 8001748:	499e      	ldr	r1, [pc, #632]	@ (80019c4 <main+0x5dc>)
 800174a:	48a2      	ldr	r0, [pc, #648]	@ (80019d4 <main+0x5ec>)
 800174c:	f7ff faaa 	bl	8000ca4 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&LED_5, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x08);
 8001750:	2308      	movs	r3, #8
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2301      	movs	r3, #1
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	2201      	movs	r2, #1
 8001760:	4998      	ldr	r1, [pc, #608]	@ (80019c4 <main+0x5dc>)
 8001762:	489d      	ldr	r0, [pc, #628]	@ (80019d8 <main+0x5f0>)
 8001764:	f7ff fa9e 	bl	8000ca4 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&LED_6, GPIOC, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 8001768:	2309      	movs	r3, #9
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	2301      	movs	r3, #1
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	2301      	movs	r3, #1
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	2201      	movs	r2, #1
 8001778:	4998      	ldr	r1, [pc, #608]	@ (80019dc <main+0x5f4>)
 800177a:	4899      	ldr	r0, [pc, #612]	@ (80019e0 <main+0x5f8>)
 800177c:	f7ff fa92 	bl	8000ca4 <GPIO_init>
	//-------------------- LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION

	//PG0 -> Power LED
	GPIO_init(&led_power, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001780:	2300      	movs	r3, #0
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2302      	movs	r3, #2
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2301      	movs	r3, #1
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	2201      	movs	r2, #1
 8001790:	4994      	ldr	r1, [pc, #592]	@ (80019e4 <main+0x5fc>)
 8001792:	4895      	ldr	r0, [pc, #596]	@ (80019e8 <main+0x600>)
 8001794:	f7ff fa86 	bl	8000ca4 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&led_local, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8001798:	2301      	movs	r3, #1
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2302      	movs	r3, #2
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	2301      	movs	r3, #1
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	2201      	movs	r2, #1
 80017a8:	498e      	ldr	r1, [pc, #568]	@ (80019e4 <main+0x5fc>)
 80017aa:	4890      	ldr	r0, [pc, #576]	@ (80019ec <main+0x604>)
 80017ac:	f7ff fa7a 	bl	8000ca4 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&led_remote, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x07);
 80017b0:	2307      	movs	r3, #7
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2300      	movs	r3, #0
 80017be:	2201      	movs	r2, #1
 80017c0:	498b      	ldr	r1, [pc, #556]	@ (80019f0 <main+0x608>)
 80017c2:	488c      	ldr	r0, [pc, #560]	@ (80019f4 <main+0x60c>)
 80017c4:	f7ff fa6e 	bl	8000ca4 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&led_transducer, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 80017c8:	2308      	movs	r3, #8
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	2301      	movs	r3, #1
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2201      	movs	r2, #1
 80017d8:	4985      	ldr	r1, [pc, #532]	@ (80019f0 <main+0x608>)
 80017da:	4887      	ldr	r0, [pc, #540]	@ (80019f8 <main+0x610>)
 80017dc:	f7ff fa62 	bl	8000ca4 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&led_n2o, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 80017e0:	2305      	movs	r3, #5
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	2201      	movs	r2, #1
 80017f0:	497c      	ldr	r1, [pc, #496]	@ (80019e4 <main+0x5fc>)
 80017f2:	4882      	ldr	r0, [pc, #520]	@ (80019fc <main+0x614>)
 80017f4:	f7ff fa56 	bl	8000ca4 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&led_o2, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x06);
 80017f8:	2306      	movs	r3, #6
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	2301      	movs	r3, #1
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	2201      	movs	r2, #1
 8001808:	4976      	ldr	r1, [pc, #472]	@ (80019e4 <main+0x5fc>)
 800180a:	487d      	ldr	r0, [pc, #500]	@ (8001a00 <main+0x618>)
 800180c:	f7ff fa4a 	bl	8000ca4 <GPIO_init>

	//-------------------- Control GPIO --------------------------

	//PF15-> Activate_sys SW
	GPIO_init(&activate_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001810:	230f      	movs	r3, #15
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	2302      	movs	r3, #2
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	2301      	movs	r3, #1
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2300      	movs	r3, #0
 800181e:	2200      	movs	r2, #0
 8001820:	4978      	ldr	r1, [pc, #480]	@ (8001a04 <main+0x61c>)
 8001822:	4879      	ldr	r0, [pc, #484]	@ (8001a08 <main+0x620>)
 8001824:	f7ff fa3e 	bl	8000ca4 <GPIO_init>
	//PF14-> Local_control SW
	GPIO_init(&local_control_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8001828:	230e      	movs	r3, #14
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2302      	movs	r3, #2
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2301      	movs	r3, #1
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	2200      	movs	r2, #0
 8001838:	4972      	ldr	r1, [pc, #456]	@ (8001a04 <main+0x61c>)
 800183a:	4874      	ldr	r0, [pc, #464]	@ (8001a0c <main+0x624>)
 800183c:	f7ff fa32 	bl	8000ca4 <GPIO_init>
	//PF13-> N20_ISO SW
	GPIO_init(&N2O_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001840:	230d      	movs	r3, #13
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	2302      	movs	r3, #2
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	2301      	movs	r3, #1
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	2200      	movs	r2, #0
 8001850:	496c      	ldr	r1, [pc, #432]	@ (8001a04 <main+0x61c>)
 8001852:	486f      	ldr	r0, [pc, #444]	@ (8001a10 <main+0x628>)
 8001854:	f7ff fa26 	bl	8000ca4 <GPIO_init>
	//PF12-> O2_ISO SW
	GPIO_init(&O2_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001858:	230c      	movs	r3, #12
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2302      	movs	r3, #2
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	2301      	movs	r3, #1
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	4966      	ldr	r1, [pc, #408]	@ (8001a04 <main+0x61c>)
 800186a:	486a      	ldr	r0, [pc, #424]	@ (8001a14 <main+0x62c>)
 800186c:	f7ff fa1a 	bl	8000ca4 <GPIO_init>
	//PF11-> IGNITION_ISO SW
	GPIO_init(&IGNITION_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001870:	230b      	movs	r3, #11
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2302      	movs	r3, #2
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	2301      	movs	r3, #1
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2300      	movs	r3, #0
 800187e:	2200      	movs	r2, #0
 8001880:	4960      	ldr	r1, [pc, #384]	@ (8001a04 <main+0x61c>)
 8001882:	4865      	ldr	r0, [pc, #404]	@ (8001a18 <main+0x630>)
 8001884:	f7ff fa0e 	bl	8000ca4 <GPIO_init>
	//PB0-> N2O_DEADMAN_SW
	GPIO_init(&N2O_DEAD_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001888:	2300      	movs	r3, #0
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	2302      	movs	r3, #2
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2300      	movs	r3, #0
 8001896:	2200      	movs	r2, #0
 8001898:	4960      	ldr	r1, [pc, #384]	@ (8001a1c <main+0x634>)
 800189a:	4861      	ldr	r0, [pc, #388]	@ (8001a20 <main+0x638>)
 800189c:	f7ff fa02 	bl	8000ca4 <GPIO_init>
	//PC5-> O2_DEADMAN_SW
	GPIO_init(&O2_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 80018a0:	2305      	movs	r3, #5
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2301      	movs	r3, #1
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	494a      	ldr	r1, [pc, #296]	@ (80019dc <main+0x5f4>)
 80018b2:	485c      	ldr	r0, [pc, #368]	@ (8001a24 <main+0x63c>)
 80018b4:	f7ff f9f6 	bl	8000ca4 <GPIO_init>
	//PC4-> IGNITE_DEADMAN_SW
	GPIO_init(&IGNITE_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x04);
 80018b8:	2304      	movs	r3, #4
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2302      	movs	r3, #2
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	2301      	movs	r3, #1
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	4944      	ldr	r1, [pc, #272]	@ (80019dc <main+0x5f4>)
 80018ca:	4857      	ldr	r0, [pc, #348]	@ (8001a28 <main+0x640>)
 80018cc:	f7ff f9ea 	bl	8000ca4 <GPIO_init>

	//-------------------- IGNITE ACTUATION GPIO --------------------------
	GPIO_init(&Ignition1_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 80018d0:	230f      	movs	r3, #15
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	2301      	movs	r3, #1
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	2201      	movs	r2, #1
 80018e0:	4952      	ldr	r1, [pc, #328]	@ (8001a2c <main+0x644>)
 80018e2:	4853      	ldr	r0, [pc, #332]	@ (8001a30 <main+0x648>)
 80018e4:	f7ff f9de 	bl	8000ca4 <GPIO_init>
	GPIO_init(&Ignition1_OP ,GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 80018e8:	230e      	movs	r3, #14
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2301      	movs	r3, #1
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	2201      	movs	r2, #1
 80018f8:	494c      	ldr	r1, [pc, #304]	@ (8001a2c <main+0x644>)
 80018fa:	484e      	ldr	r0, [pc, #312]	@ (8001a34 <main+0x64c>)
 80018fc:	f7ff f9d2 	bl	8000ca4 <GPIO_init>



	GPIO_init(&Ignition2_ARM, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x03);
 8001900:	2303      	movs	r3, #3
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2302      	movs	r3, #2
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2301      	movs	r3, #1
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2300      	movs	r3, #0
 800190e:	2201      	movs	r2, #1
 8001910:	4934      	ldr	r1, [pc, #208]	@ (80019e4 <main+0x5fc>)
 8001912:	4849      	ldr	r0, [pc, #292]	@ (8001a38 <main+0x650>)
 8001914:	f7ff f9c6 	bl	8000ca4 <GPIO_init>
	GPIO_init(&Ignition2_OP ,GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x02);
 8001918:	2302      	movs	r3, #2
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2302      	movs	r3, #2
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2301      	movs	r3, #1
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	2201      	movs	r2, #1
 8001928:	492e      	ldr	r1, [pc, #184]	@ (80019e4 <main+0x5fc>)
 800192a:	4844      	ldr	r0, [pc, #272]	@ (8001a3c <main+0x654>)
 800192c:	f7ff f9ba 	bl	8000ca4 <GPIO_init>
	//Disarm Ignition circuit
	Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8001930:	4b41      	ldr	r3, [pc, #260]	@ (8001a38 <main+0x650>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <main+0x650>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f042 0208 	orr.w	r2, r2, #8
 800193e:	615a      	str	r2, [r3, #20]
	Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8001940:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <main+0x654>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <main+0x654>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f042 0204 	orr.w	r2, r2, #4
 800194e:	615a      	str	r2, [r3, #20]


	//-------------------- RELAY ACTUATION GPIO --------------------------
	//Relay 1 ->PURGE Relay
	GPIO_init(&CH1_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001950:	230d      	movs	r3, #13
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2302      	movs	r3, #2
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2301      	movs	r3, #1
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	2201      	movs	r2, #1
 8001960:	492e      	ldr	r1, [pc, #184]	@ (8001a1c <main+0x634>)
 8001962:	4837      	ldr	r0, [pc, #220]	@ (8001a40 <main+0x658>)
 8001964:	f7ff f99e 	bl	8000ca4 <GPIO_init>
	GPIO_init(&CH1_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0E);
 8001968:	230e      	movs	r3, #14
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2302      	movs	r3, #2
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2301      	movs	r3, #1
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	2201      	movs	r2, #1
 8001978:	4928      	ldr	r1, [pc, #160]	@ (8001a1c <main+0x634>)
 800197a:	4832      	ldr	r0, [pc, #200]	@ (8001a44 <main+0x65c>)
 800197c:	f7ff f992 	bl	8000ca4 <GPIO_init>
	GPIO_init(&CH1_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0B);
 8001980:	230b      	movs	r3, #11
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	2302      	movs	r3, #2
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2301      	movs	r3, #1
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	2200      	movs	r2, #0
 8001990:	4922      	ldr	r1, [pc, #136]	@ (8001a1c <main+0x634>)
 8001992:	482d      	ldr	r0, [pc, #180]	@ (8001a48 <main+0x660>)
 8001994:	f7ff f986 	bl	8000ca4 <GPIO_init>

	//Relay 2 -> O2 Relay
	GPIO_init(&CH2_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001998:	230a      	movs	r3, #10
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2302      	movs	r3, #2
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	2201      	movs	r2, #1
 80019a8:	491c      	ldr	r1, [pc, #112]	@ (8001a1c <main+0x634>)
 80019aa:	4828      	ldr	r0, [pc, #160]	@ (8001a4c <main+0x664>)
 80019ac:	f7ff f97a 	bl	8000ca4 <GPIO_init>
	GPIO_init(&CH2_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80019b0:	230c      	movs	r3, #12
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2302      	movs	r3, #2
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2301      	movs	r3, #1
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	2201      	movs	r2, #1
 80019c0:	e046      	b.n	8001a50 <main+0x668>
 80019c2:	bf00      	nop
 80019c4:	40020000 	.word	0x40020000
 80019c8:	20000380 	.word	0x20000380
 80019cc:	20000398 	.word	0x20000398
 80019d0:	200003b0 	.word	0x200003b0
 80019d4:	200003c8 	.word	0x200003c8
 80019d8:	200003e0 	.word	0x200003e0
 80019dc:	40020800 	.word	0x40020800
 80019e0:	200003f8 	.word	0x200003f8
 80019e4:	40021800 	.word	0x40021800
 80019e8:	200002f0 	.word	0x200002f0
 80019ec:	20000308 	.word	0x20000308
 80019f0:	40021000 	.word	0x40021000
 80019f4:	20000320 	.word	0x20000320
 80019f8:	20000338 	.word	0x20000338
 80019fc:	20000350 	.word	0x20000350
 8001a00:	20000368 	.word	0x20000368
 8001a04:	40021400 	.word	0x40021400
 8001a08:	20000410 	.word	0x20000410
 8001a0c:	20000428 	.word	0x20000428
 8001a10:	20000458 	.word	0x20000458
 8001a14:	20000470 	.word	0x20000470
 8001a18:	20000488 	.word	0x20000488
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	200004a0 	.word	0x200004a0
 8001a24:	200004b8 	.word	0x200004b8
 8001a28:	200004d0 	.word	0x200004d0
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	20000290 	.word	0x20000290
 8001a34:	200002a8 	.word	0x200002a8
 8001a38:	200002c0 	.word	0x200002c0
 8001a3c:	200002d8 	.word	0x200002d8
 8001a40:	20000170 	.word	0x20000170
 8001a44:	20000188 	.word	0x20000188
 8001a48:	200001a0 	.word	0x200001a0
 8001a4c:	200001b8 	.word	0x200001b8
 8001a50:	49a0      	ldr	r1, [pc, #640]	@ (8001cd4 <main+0x8ec>)
 8001a52:	48a1      	ldr	r0, [pc, #644]	@ (8001cd8 <main+0x8f0>)
 8001a54:	f7ff f926 	bl	8000ca4 <GPIO_init>
	GPIO_init(&CH2_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001a58:	230f      	movs	r3, #15
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	2301      	movs	r3, #1
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2300      	movs	r3, #0
 8001a66:	2200      	movs	r2, #0
 8001a68:	499a      	ldr	r1, [pc, #616]	@ (8001cd4 <main+0x8ec>)
 8001a6a:	489c      	ldr	r0, [pc, #624]	@ (8001cdc <main+0x8f4>)
 8001a6c:	f7ff f91a 	bl	8000ca4 <GPIO_init>

	//Relay 3 -> N20 Relay
	GPIO_init(&CH3_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001a70:	230b      	movs	r3, #11
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2302      	movs	r3, #2
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4997      	ldr	r1, [pc, #604]	@ (8001ce0 <main+0x8f8>)
 8001a82:	4898      	ldr	r0, [pc, #608]	@ (8001ce4 <main+0x8fc>)
 8001a84:	f7ff f90e 	bl	8000ca4 <GPIO_init>
	GPIO_init(&CH3_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001a88:	230c      	movs	r3, #12
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2301      	movs	r3, #1
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2300      	movs	r3, #0
 8001a96:	2201      	movs	r2, #1
 8001a98:	4991      	ldr	r1, [pc, #580]	@ (8001ce0 <main+0x8f8>)
 8001a9a:	4893      	ldr	r0, [pc, #588]	@ (8001ce8 <main+0x900>)
 8001a9c:	f7ff f902 	bl	8000ca4 <GPIO_init>
	GPIO_init(&CH3_MON, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2300      	movs	r3, #0
 8001aae:	2201      	movs	r2, #1
 8001ab0:	498b      	ldr	r1, [pc, #556]	@ (8001ce0 <main+0x8f8>)
 8001ab2:	488e      	ldr	r0, [pc, #568]	@ (8001cec <main+0x904>)
 8001ab4:	f7ff f8f6 	bl	8000ca4 <GPIO_init>

	//Relay 4 //for future expansion
	 GPIO_init(&CH4_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 8001ab8:	2309      	movs	r3, #9
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	2302      	movs	r3, #2
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4985      	ldr	r1, [pc, #532]	@ (8001ce0 <main+0x8f8>)
 8001aca:	4889      	ldr	r0, [pc, #548]	@ (8001cf0 <main+0x908>)
 8001acc:	f7ff f8ea 	bl	8000ca4 <GPIO_init>
	 GPIO_init(&CH4_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2201      	movs	r2, #1
 8001ae0:	497f      	ldr	r1, [pc, #508]	@ (8001ce0 <main+0x8f8>)
 8001ae2:	4884      	ldr	r0, [pc, #528]	@ (8001cf4 <main+0x90c>)
 8001ae4:	f7ff f8de 	bl	8000ca4 <GPIO_init>
	 GPIO_init(&CH4_MON, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001ae8:	230d      	movs	r3, #13
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2302      	movs	r3, #2
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2301      	movs	r3, #1
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	2200      	movs	r2, #0
 8001af8:	4979      	ldr	r1, [pc, #484]	@ (8001ce0 <main+0x8f8>)
 8001afa:	487f      	ldr	r0, [pc, #508]	@ (8001cf8 <main+0x910>)
 8001afc:	f7ff f8d2 	bl	8000ca4 <GPIO_init>



	 GPIO_init(&RF_SW, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0A);
 8001b00:	230a      	movs	r3, #10
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2201      	movs	r2, #1
 8001b10:	497a      	ldr	r1, [pc, #488]	@ (8001cfc <main+0x914>)
 8001b12:	487b      	ldr	r0, [pc, #492]	@ (8001d00 <main+0x918>)
 8001b14:	f7ff f8c6 	bl	8000ca4 <GPIO_init>

	 GPIO_init(&LORA_CS_GPIO, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0B);
 8001b18:	230b      	movs	r3, #11
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	2201      	movs	r2, #1
 8001b28:	4974      	ldr	r1, [pc, #464]	@ (8001cfc <main+0x914>)
 8001b2a:	4876      	ldr	r0, [pc, #472]	@ (8001d04 <main+0x91c>)
 8001b2c:	f7ff f8ba 	bl	8000ca4 <GPIO_init>

	 RF_SW.port->ODR |= (GPIO_ODR_OD10);
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <main+0x918>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <main+0x918>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b3e:	615a      	str	r2, [r3, #20]
	 LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8001b40:	4b70      	ldr	r3, [pc, #448]	@ (8001d04 <main+0x91c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	4b6f      	ldr	r3, [pc, #444]	@ (8001d04 <main+0x91c>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b4e:	615a      	str	r2, [r3, #20]

	 //Ensure CH1-4 is turned off, as its currently unused
	 CH1_ARM.port->ODR &= ~(CH1_Arm);
 8001b50:	4b6d      	ldr	r3, [pc, #436]	@ (8001d08 <main+0x920>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <main+0x920>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b5e:	615a      	str	r2, [r3, #20]
	 CH1_OP.port->ODR &= ~(CH1_Operate);
 8001b60:	4b6a      	ldr	r3, [pc, #424]	@ (8001d0c <main+0x924>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	4b69      	ldr	r3, [pc, #420]	@ (8001d0c <main+0x924>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b6e:	615a      	str	r2, [r3, #20]
	 CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <main+0x8f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	4b58      	ldr	r3, [pc, #352]	@ (8001cd8 <main+0x8f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b7e:	615a      	str	r2, [r3, #20]
	 CH2_OP.port->ODR &= ~(CH2_Operate);
 8001b80:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <main+0x928>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	4b62      	ldr	r3, [pc, #392]	@ (8001d10 <main+0x928>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b8e:	615a      	str	r2, [r3, #20]
	 CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001b90:	4b55      	ldr	r3, [pc, #340]	@ (8001ce8 <main+0x900>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	4b54      	ldr	r3, [pc, #336]	@ (8001ce8 <main+0x900>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b9e:	615a      	str	r2, [r3, #20]
	 CH3_OP.port->ODR &= ~(CH3_Operate);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <main+0x8fc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce4 <main+0x8fc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bae:	615a      	str	r2, [r3, #20]
	 CH4_ARM.port->ODR &= ~(CH4_Arm);
 8001bb0:	4b50      	ldr	r3, [pc, #320]	@ (8001cf4 <main+0x90c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf4 <main+0x90c>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bbe:	615a      	str	r2, [r3, #20]
	 CH4_OP.port->ODR &= ~(CH4_Operate);
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <main+0x908>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <main+0x908>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bce:	615a      	str	r2, [r3, #20]




	//Make sure interrupts are configured BEFORE interupts
	GPIO_init(&LoRa_Rx_int, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x07);
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2200      	movs	r2, #0
 8001be0:	493f      	ldr	r1, [pc, #252]	@ (8001ce0 <main+0x8f8>)
 8001be2:	484c      	ldr	r0, [pc, #304]	@ (8001d14 <main+0x92c>)
 8001be4:	f7ff f85e 	bl	8000ca4 <GPIO_init>
	//NVIC_DisableIRQ(EXTI9_5_IRQn); //easier than changing the function GPIO_init_interrupt
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 8001be8:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <main+0x930>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a4a      	ldr	r2, [pc, #296]	@ (8001d18 <main+0x930>)
 8001bee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bf2:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PD;
 8001bf4:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <main+0x930>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a47      	ldr	r2, [pc, #284]	@ (8001d18 <main+0x930>)
 8001bfa:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8001bfe:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR &= ~EXTI_FTSR_TR7_Msk;
 8001c00:	4b46      	ldr	r3, [pc, #280]	@ (8001d1c <main+0x934>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a45      	ldr	r2, [pc, #276]	@ (8001d1c <main+0x934>)
 8001c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c0a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_TR7;
 8001c0c:	4b43      	ldr	r3, [pc, #268]	@ (8001d1c <main+0x934>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a42      	ldr	r2, [pc, #264]	@ (8001d1c <main+0x934>)
 8001c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c16:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8001c18:	4b40      	ldr	r3, [pc, #256]	@ (8001d1c <main+0x934>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d1c <main+0x934>)
 8001c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c22:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR7;
 8001c24:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <main+0x934>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a3c      	ldr	r2, [pc, #240]	@ (8001d1c <main+0x934>)
 8001c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2e:	6093      	str	r3, [r2, #8]
	EXTI->IMR &= ~EXTI_IMR_IM7;
 8001c30:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <main+0x934>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a39      	ldr	r2, [pc, #228]	@ (8001d1c <main+0x934>)
 8001c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c3a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM7;
 8001c3c:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <main+0x934>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a36      	ldr	r2, [pc, #216]	@ (8001d1c <main+0x934>)
 8001c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c46:	6013      	str	r3, [r2, #0]

	//here is channel for loRa PD7
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c48:	2017      	movs	r0, #23
 8001c4a:	f7ff fb61 	bl	8001310 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn,9);
 8001c4e:	2109      	movs	r1, #9
 8001c50:	2017      	movs	r0, #23
 8001c52:	f7ff fb9f 	bl	8001394 <__NVIC_SetPriority>
	//re-enable to turn on LoRa RX interrupt!

	SX1272_init(&lora,"GSE_LORA", LORA_PORT, LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 8001c56:	2301      	movs	r3, #1
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	2309      	movs	r3, #9
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce0 <main+0x8f8>)
 8001c68:	492d      	ldr	r1, [pc, #180]	@ (8001d20 <main+0x938>)
 8001c6a:	482e      	ldr	r0, [pc, #184]	@ (8001d24 <main+0x93c>)
 8001c6c:	f7ff f8b0 	bl	8000dd0 <SX1272_init>
	SX1272_startReceive(&lora);
 8001c70:	482c      	ldr	r0, [pc, #176]	@ (8001d24 <main+0x93c>)
 8001c72:	f7ff fa72 	bl	800115a <SX1272_startReceive>
	SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
 8001c76:	2140      	movs	r1, #64	@ 0x40
 8001c78:	482a      	ldr	r0, [pc, #168]	@ (8001d24 <main+0x93c>)
 8001c7a:	f7ff face 	bl	800121a <SX1272_clearIRQ>

	//Ensure SMD LEDs are turned OFF on bootup
	LED_1.port -> ODR &= ~LED_1_PWR;
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <main+0x940>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <main+0x940>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c8c:	615a      	str	r2, [r3, #20]
	LED_2.port -> ODR &= ~LED_2_PWR;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <main+0x944>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <main+0x944>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c9c:	615a      	str	r2, [r3, #20]
	LED_3.port -> ODR &= ~LED_3_PWR;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <main+0x948>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <main+0x948>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cac:	615a      	str	r2, [r3, #20]
	LED_4.port -> ODR &= ~LED_4_PWR;
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <main+0x94c>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <main+0x94c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cbc:	615a      	str	r2, [r3, #20]
	LED_5.port -> ODR &= ~LED_5_PWR;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <main+0x950>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <main+0x950>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ccc:	615a      	str	r2, [r3, #20]
	LED_6.port -> ODR &= ~LED_6_PWR;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <main+0x954>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	e035      	b.n	8001d40 <main+0x958>
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	200001d0 	.word	0x200001d0
 8001cdc:	200001e8 	.word	0x200001e8
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	20000200 	.word	0x20000200
 8001ce8:	20000218 	.word	0x20000218
 8001cec:	20000230 	.word	0x20000230
 8001cf0:	20000248 	.word	0x20000248
 8001cf4:	20000260 	.word	0x20000260
 8001cf8:	20000278 	.word	0x20000278
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	200004e8 	.word	0x200004e8
 8001d04:	20000500 	.word	0x20000500
 8001d08:	20000188 	.word	0x20000188
 8001d0c:	20000170 	.word	0x20000170
 8001d10:	200001b8 	.word	0x200001b8
 8001d14:	20000158 	.word	0x20000158
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	40013c00 	.word	0x40013c00
 8001d20:	080063fc 	.word	0x080063fc
 8001d24:	200000f8 	.word	0x200000f8
 8001d28:	20000380 	.word	0x20000380
 8001d2c:	20000398 	.word	0x20000398
 8001d30:	200003b0 	.word	0x200003b0
 8001d34:	200003c8 	.word	0x200003c8
 8001d38:	200003e0 	.word	0x200003e0
 8001d3c:	200003f8 	.word	0x200003f8
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <main+0xb28>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d4a:	615a      	str	r2, [r3, #20]

	CH1_ARM.port->ODR &= ~(CH1_Arm);
 8001d4c:	4b71      	ldr	r3, [pc, #452]	@ (8001f14 <main+0xb2c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	4b70      	ldr	r3, [pc, #448]	@ (8001f14 <main+0xb2c>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d5a:	615a      	str	r2, [r3, #20]
	CH1_OP.port->ODR &= ~(CH1_Operate);
 8001d5c:	4b6e      	ldr	r3, [pc, #440]	@ (8001f18 <main+0xb30>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	4b6d      	ldr	r3, [pc, #436]	@ (8001f18 <main+0xb30>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d6a:	615a      	str	r2, [r3, #20]


	CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f1c <main+0xb34>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <main+0xb34>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d7a:	615a      	str	r2, [r3, #20]
	CH2_OP.port->ODR &= ~(CH2_Operate);
 8001d7c:	4b68      	ldr	r3, [pc, #416]	@ (8001f20 <main+0xb38>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	4b67      	ldr	r3, [pc, #412]	@ (8001f20 <main+0xb38>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d8a:	615a      	str	r2, [r3, #20]

	CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001d8c:	4b65      	ldr	r3, [pc, #404]	@ (8001f24 <main+0xb3c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	4b64      	ldr	r3, [pc, #400]	@ (8001f24 <main+0xb3c>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d9a:	615a      	str	r2, [r3, #20]
	CH3_OP.port->ODR &= ~(CH3_Operate);
 8001d9c:	4b62      	ldr	r3, [pc, #392]	@ (8001f28 <main+0xb40>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <main+0xb40>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001daa:	615a      	str	r2, [r3, #20]

	CH4_ARM.port->ODR &= ~(CH4_Arm);
 8001dac:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <main+0xb44>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <main+0xb44>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dba:	615a      	str	r2, [r3, #20]
	CH4_OP.port->ODR &= ~(CH4_Operate);
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <main+0xb48>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f30 <main+0xb48>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dca:	615a      	str	r2, [r3, #20]

	state = 0x00;
 8001dcc:	4b59      	ldr	r3, [pc, #356]	@ (8001f34 <main+0xb4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
	}
	*/



	switch_case_state = 0x0;
 8001dd2:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <main+0xb50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
//Resetting Indentation from the start, cos I CBF changing the entire code - JC 0503025
while (1) {

	switch(switch_case_state){
 8001dd8:	4b57      	ldr	r3, [pc, #348]	@ (8001f38 <main+0xb50>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	dc27      	bgt.n	8001e30 <main+0xa48>
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	dbf9      	blt.n	8001dd8 <main+0x9f0>
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d8f7      	bhi.n	8001dd8 <main+0x9f0>
 8001de8:	a201      	add	r2, pc, #4	@ (adr r2, 8001df0 <main+0xa08>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e39 	.word	0x08001e39
 8001df4:	080026b7 	.word	0x080026b7
 8001df8:	08002789 	.word	0x08002789
 8001dfc:	080027f7 	.word	0x080027f7
 8001e00:	0800288f 	.word	0x0800288f
 8001e04:	08001dd9 	.word	0x08001dd9
 8001e08:	08001dd9 	.word	0x08001dd9
 8001e0c:	08002ce5 	.word	0x08002ce5
 8001e10:	08002df3 	.word	0x08002df3
 8001e14:	08002f29 	.word	0x08002f29
 8001e18:	08003051 	.word	0x08003051
 8001e1c:	08001dd9 	.word	0x08001dd9
 8001e20:	08001dd9 	.word	0x08001dd9
 8001e24:	08001dd9 	.word	0x08001dd9
 8001e28:	08001dd9 	.word	0x08001dd9
 8001e2c:	08002a23 	.word	0x08002a23
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	f001 81b7 	beq.w	80031a4 <main+0x1dbc>
 8001e36:	e7cf      	b.n	8001dd8 <main+0x9f0>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001e38:	b662      	cpsie	i
}
 8001e3a:	bf00      	nop
	case 0:

		__enable_irq();


		LED_1.port -> ODR |= LED_1_PWR;
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f3c <main+0xb54>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	4b3e      	ldr	r3, [pc, #248]	@ (8001f3c <main+0xb54>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e4a:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f40 <main+0xb58>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <main+0xb58>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e5a:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8001e5c:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <main+0xb5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	@ (8001f44 <main+0xb5c>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e6a:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8001e6c:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <main+0xb60>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <main+0xb60>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e7a:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8001e7c:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <main+0xb64>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <main+0xb64>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e8a:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <main+0xb28>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <main+0xb28>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <main+0xb68>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <main+0xac2>
 8001ea4:	f001 fd16 	bl	80038d4 <RX_Receive>
 8001ea8:	e000      	b.n	8001eac <main+0xac4>
 8001eaa:	bf00      	nop

//Extract Thermocouple Temp
		//To Do - Issues with Thermocouples ATM with accurate readings

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <main+0xb68>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <main+0xad2>
 8001eb4:	f001 fd0e 	bl	80038d4 <RX_Receive>
 8001eb8:	e000      	b.n	8001ebc <main+0xad4>
 8001eba:	bf00      	nop
		}

		*/

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001ebc:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <main+0xb68>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <main+0xae2>
 8001ec4:	f001 fd06 	bl	80038d4 <RX_Receive>
 8001ec8:	e000      	b.n	8001ecc <main+0xae4>
 8001eca:	bf00      	nop
//Get Pressure Readings from Transducers

		//Done with HAL libs atm - JC 29/04/2025

		uint8_t spi_buf[2];
		spi_buf[0] = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		spi_buf[1] = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2140      	movs	r1, #64	@ 0x40
 8001edc:	481d      	ldr	r0, [pc, #116]	@ (8001f54 <main+0xb6c>)
 8001ede:	f002 fd31 	bl	8004944 <HAL_GPIO_WritePin>
		//ret = HAL_SPI_TransmitReceive(&hspi5,(uint8_t *)&ADC_CH1,  (uint8_t *)spi_buf, 1, 100);
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2140      	movs	r1, #64	@ 0x40
 8001ee6:	481b      	ldr	r0, [pc, #108]	@ (8001f54 <main+0xb6c>)
 8001ee8:	f002 fd2c 	bl	8004944 <HAL_GPIO_WritePin>
		if (ret != HAL_OK){
 8001eec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d039      	beq.n	8001f68 <main+0xb80>
			TRANSDUCER_1.comms_ok = false;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <main+0xb70>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_2.comms_ok = false;
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <main+0xb74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_3.comms_ok = false;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <main+0xb78>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_4.comms_ok = false;
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <main+0xb7c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e076      	b.n	8001ffc <main+0xc14>
 8001f0e:	bf00      	nop
 8001f10:	200003f8 	.word	0x200003f8
 8001f14:	20000188 	.word	0x20000188
 8001f18:	20000170 	.word	0x20000170
 8001f1c:	200001d0 	.word	0x200001d0
 8001f20:	200001b8 	.word	0x200001b8
 8001f24:	20000218 	.word	0x20000218
 8001f28:	20000200 	.word	0x20000200
 8001f2c:	20000260 	.word	0x20000260
 8001f30:	20000248 	.word	0x20000248
 8001f34:	200000c9 	.word	0x200000c9
 8001f38:	200000c8 	.word	0x200000c8
 8001f3c:	20000380 	.word	0x20000380
 8001f40:	20000398 	.word	0x20000398
 8001f44:	200003b0 	.word	0x200003b0
 8001f48:	200003c8 	.word	0x200003c8
 8001f4c:	200003e0 	.word	0x200003e0
 8001f50:	200000d2 	.word	0x200000d2
 8001f54:	40021400 	.word	0x40021400
 8001f58:	20000548 	.word	0x20000548
 8001f5c:	20000554 	.word	0x20000554
 8001f60:	20000560 	.word	0x20000560
 8001f64:	2000056c 	.word	0x2000056c
		}
		else {
			TRANSDUCER_1.comms_ok = true;
 8001f68:	4bbb      	ldr	r3, [pc, #748]	@ (8002258 <main+0xe70>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_2.comms_ok = true;
 8001f6e:	4bbb      	ldr	r3, [pc, #748]	@ (800225c <main+0xe74>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_3.comms_ok = true;
 8001f74:	4bba      	ldr	r3, [pc, #744]	@ (8002260 <main+0xe78>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_4.comms_ok = true;
 8001f7a:	4bba      	ldr	r3, [pc, #744]	@ (8002264 <main+0xe7c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]


			TRANSDUCER_1.raw_data[0] = spi_buf[0];
 8001f80:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f84:	4bb4      	ldr	r3, [pc, #720]	@ (8002258 <main+0xe70>)
 8001f86:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_1.raw_data[1] = spi_buf[1];
 8001f88:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001f8c:	4bb2      	ldr	r3, [pc, #712]	@ (8002258 <main+0xe70>)
 8001f8e:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2140      	movs	r1, #64	@ 0x40
 8001f94:	48b4      	ldr	r0, [pc, #720]	@ (8002268 <main+0xe80>)
 8001f96:	f002 fcd5 	bl	8004944 <HAL_GPIO_WritePin>
			//HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH2, (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2140      	movs	r1, #64	@ 0x40
 8001f9e:	48b2      	ldr	r0, [pc, #712]	@ (8002268 <main+0xe80>)
 8001fa0:	f002 fcd0 	bl	8004944 <HAL_GPIO_WritePin>

			TRANSDUCER_2.raw_data[0] = spi_buf[0];
 8001fa4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001fa8:	4bac      	ldr	r3, [pc, #688]	@ (800225c <main+0xe74>)
 8001faa:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_2.raw_data[1] = spi_buf[1];
 8001fac:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001fb0:	4baa      	ldr	r3, [pc, #680]	@ (800225c <main+0xe74>)
 8001fb2:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2140      	movs	r1, #64	@ 0x40
 8001fb8:	48ab      	ldr	r0, [pc, #684]	@ (8002268 <main+0xe80>)
 8001fba:	f002 fcc3 	bl	8004944 <HAL_GPIO_WritePin>
			//HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH3, (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2140      	movs	r1, #64	@ 0x40
 8001fc2:	48a9      	ldr	r0, [pc, #676]	@ (8002268 <main+0xe80>)
 8001fc4:	f002 fcbe 	bl	8004944 <HAL_GPIO_WritePin>

			TRANSDUCER_3.raw_data[0] = spi_buf[0];
 8001fc8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001fcc:	4ba4      	ldr	r3, [pc, #656]	@ (8002260 <main+0xe78>)
 8001fce:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_3.raw_data[1] = spi_buf[1];
 8001fd0:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001fd4:	4ba2      	ldr	r3, [pc, #648]	@ (8002260 <main+0xe78>)
 8001fd6:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2140      	movs	r1, #64	@ 0x40
 8001fdc:	48a2      	ldr	r0, [pc, #648]	@ (8002268 <main+0xe80>)
 8001fde:	f002 fcb1 	bl	8004944 <HAL_GPIO_WritePin>
			//HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH4, (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2140      	movs	r1, #64	@ 0x40
 8001fe6:	48a0      	ldr	r0, [pc, #640]	@ (8002268 <main+0xe80>)
 8001fe8:	f002 fcac 	bl	8004944 <HAL_GPIO_WritePin>

			TRANSDUCER_4.raw_data[0] = spi_buf[0];
 8001fec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ff0:	4b9c      	ldr	r3, [pc, #624]	@ (8002264 <main+0xe7c>)
 8001ff2:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_4.raw_data[1] = spi_buf[1];
 8001ff4:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8002264 <main+0xe7c>)
 8001ffa:	709a      	strb	r2, [r3, #2]

		}

		//Translate 12bit value into relative voltage (given Vref is 5V)

		TRANSDUCER_1.read_value_voltage = ((float)(TRANSDUCER_1.raw_data[1] << 8 |  TRANSDUCER_1.raw_data[0] )/ 4095) * 5 + 0.00394; //Offset as per dataset found
 8001ffc:	4b96      	ldr	r3, [pc, #600]	@ (8002258 <main+0xe70>)
 8001ffe:	789b      	ldrb	r3, [r3, #2]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4a95      	ldr	r2, [pc, #596]	@ (8002258 <main+0xe70>)
 8002004:	7852      	ldrb	r2, [r2, #1]
 8002006:	4313      	orrs	r3, r2
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002010:	eddf 6a96 	vldr	s13, [pc, #600]	@ 800226c <main+0xe84>
 8002014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002018:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800201c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002020:	ee17 0a90 	vmov	r0, s15
 8002024:	f7fe fa48 	bl	80004b8 <__aeabi_f2d>
 8002028:	a389      	add	r3, pc, #548	@ (adr r3, 8002250 <main+0xe68>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f8e5 	bl	80001fc <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fa95 	bl	8000568 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a85      	ldr	r2, [pc, #532]	@ (8002258 <main+0xe70>)
 8002042:	6053      	str	r3, [r2, #4]
		TRANSDUCER_1.read_value_voltage = TRANSDUCER_1.read_value_voltage *2; //Multiplied by 2 cos, idk, first time through correct sample is taken, every sample after that is half what it should be - find the problem? No, find a workaround? absolutely
 8002044:	4b84      	ldr	r3, [pc, #528]	@ (8002258 <main+0xe70>)
 8002046:	edd3 7a01 	vldr	s15, [r3, #4]
 800204a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800204e:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <main+0xe70>)
 8002050:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_2.read_value_voltage = ((float)(TRANSDUCER_2.raw_data[1] << 8 |  TRANSDUCER_2.raw_data[0] )/ 4095) * 5 + 0.00394;
 8002054:	4b81      	ldr	r3, [pc, #516]	@ (800225c <main+0xe74>)
 8002056:	789b      	ldrb	r3, [r3, #2]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	4a80      	ldr	r2, [pc, #512]	@ (800225c <main+0xe74>)
 800205c:	7852      	ldrb	r2, [r2, #1]
 800205e:	4313      	orrs	r3, r2
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002068:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800226c <main+0xe84>
 800206c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002070:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002078:	ee17 0a90 	vmov	r0, s15
 800207c:	f7fe fa1c 	bl	80004b8 <__aeabi_f2d>
 8002080:	a373      	add	r3, pc, #460	@ (adr r3, 8002250 <main+0xe68>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe f8b9 	bl	80001fc <__adddf3>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fa69 	bl	8000568 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	4a70      	ldr	r2, [pc, #448]	@ (800225c <main+0xe74>)
 800209a:	6053      	str	r3, [r2, #4]
		TRANSDUCER_2.read_value_voltage = TRANSDUCER_2.read_value_voltage *2;
 800209c:	4b6f      	ldr	r3, [pc, #444]	@ (800225c <main+0xe74>)
 800209e:	edd3 7a01 	vldr	s15, [r3, #4]
 80020a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020a6:	4b6d      	ldr	r3, [pc, #436]	@ (800225c <main+0xe74>)
 80020a8:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_3.read_value_voltage = ((float)(TRANSDUCER_3.raw_data[1] << 8 |  TRANSDUCER_3.raw_data[0] )/ 4095) * 5 + 0.00394;
 80020ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002260 <main+0xe78>)
 80020ae:	789b      	ldrb	r3, [r3, #2]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002260 <main+0xe78>)
 80020b4:	7852      	ldrb	r2, [r2, #1]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c0:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 800226c <main+0xe84>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d0:	ee17 0a90 	vmov	r0, s15
 80020d4:	f7fe f9f0 	bl	80004b8 <__aeabi_f2d>
 80020d8:	a35d      	add	r3, pc, #372	@ (adr r3, 8002250 <main+0xe68>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe f88d 	bl	80001fc <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fa3d 	bl	8000568 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a5b      	ldr	r2, [pc, #364]	@ (8002260 <main+0xe78>)
 80020f2:	6053      	str	r3, [r2, #4]
		TRANSDUCER_3.read_value_voltage = TRANSDUCER_3.read_value_voltage *2;
 80020f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002260 <main+0xe78>)
 80020f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020fe:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <main+0xe78>)
 8002100:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_4.read_value_voltage = ((float)(TRANSDUCER_4.raw_data[1] << 8 |  TRANSDUCER_4.raw_data[0] )/ 4095) * 5 + 0.00394;
 8002104:	4b57      	ldr	r3, [pc, #348]	@ (8002264 <main+0xe7c>)
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	4a56      	ldr	r2, [pc, #344]	@ (8002264 <main+0xe7c>)
 800210c:	7852      	ldrb	r2, [r2, #1]
 800210e:	4313      	orrs	r3, r2
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002118:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800226c <main+0xe84>
 800211c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002120:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002128:	ee17 0a90 	vmov	r0, s15
 800212c:	f7fe f9c4 	bl	80004b8 <__aeabi_f2d>
 8002130:	a347      	add	r3, pc, #284	@ (adr r3, 8002250 <main+0xe68>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe f861 	bl	80001fc <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fa11 	bl	8000568 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <main+0xe7c>)
 800214a:	6053      	str	r3, [r2, #4]
		TRANSDUCER_4.read_value_voltage = TRANSDUCER_4.read_value_voltage *2;
 800214c:	4b45      	ldr	r3, [pc, #276]	@ (8002264 <main+0xe7c>)
 800214e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002152:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <main+0xe7c>)
 8002158:	edc3 7a01 	vstr	s15, [r3, #4]

		TRANSDUCER_1.read_value_bar = TRANSDUCER_1.read_value_voltage * 60; //(voltage_read / 5) * 300 (bar) = pressure, 300/5 is 60, therefore (voltage_read) * 60 = pressure (for a 0-300bar range)
 800215c:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <main+0xe70>)
 800215e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002162:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002270 <main+0xe88>
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <main+0xe70>)
 800216c:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_2.read_value_bar = TRANSDUCER_2.read_value_voltage * 60;
 8002170:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <main+0xe74>)
 8002172:	edd3 7a01 	vldr	s15, [r3, #4]
 8002176:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002270 <main+0xe88>
 800217a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217e:	4b37      	ldr	r3, [pc, #220]	@ (800225c <main+0xe74>)
 8002180:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_3.read_value_bar = TRANSDUCER_3.read_value_voltage * 60;
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <main+0xe78>)
 8002186:	edd3 7a01 	vldr	s15, [r3, #4]
 800218a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002270 <main+0xe88>
 800218e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002192:	4b33      	ldr	r3, [pc, #204]	@ (8002260 <main+0xe78>)
 8002194:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_4.read_value_bar = TRANSDUCER_4.read_value_voltage * 60;
 8002198:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <main+0xe7c>)
 800219a:	edd3 7a01 	vldr	s15, [r3, #4]
 800219e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002270 <main+0xe88>
 80021a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <main+0xe7c>)
 80021a8:	edc3 7a02 	vstr	s15, [r3, #8]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{}
 80021ac:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <main+0xe8c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <main+0xdd0>
 80021b4:	f001 fb8e 	bl	80038d4 <RX_Receive>

		//Check Transducer pressures, if pressures too high go directly to PURGE state
		//Error flags are specifc per Transducer
		if(TRANSDUCER_1.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<7);}
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <main+0xe70>)
 80021ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80021be:	4b2e      	ldr	r3, [pc, #184]	@ (8002278 <main+0xe90>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	db0a      	blt.n	80021ea <main+0xe02>
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <main+0xe94>)
 80021d6:	220a      	movs	r2, #10
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <main+0xe98>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <main+0xe98>)
 80021e6:	801a      	strh	r2, [r3, #0]
 80021e8:	e0bc      	b.n	8002364 <main+0xf7c>
		else if(TRANSDUCER_2.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<6); }
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <main+0xe74>)
 80021ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80021f0:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <main+0xe90>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	db0a      	blt.n	800221c <main+0xe34>
 8002206:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <main+0xe94>)
 8002208:	220a      	movs	r2, #10
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <main+0xe98>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <main+0xe98>)
 8002218:	801a      	strh	r2, [r3, #0]
 800221a:	e0a3      	b.n	8002364 <main+0xf7c>
		else if(TRANSDUCER_3.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<5);}
 800221c:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <main+0xe78>)
 800221e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <main+0xe90>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	db25      	blt.n	8002284 <main+0xe9c>
 8002238:	4b10      	ldr	r3, [pc, #64]	@ (800227c <main+0xe94>)
 800223a:	220a      	movs	r2, #10
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <main+0xe98>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <main+0xe98>)
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	e08a      	b.n	8002364 <main+0xf7c>
 800224e:	bf00      	nop
 8002250:	b256ffc1 	.word	0xb256ffc1
 8002254:	3f702363 	.word	0x3f702363
 8002258:	20000548 	.word	0x20000548
 800225c:	20000554 	.word	0x20000554
 8002260:	20000560 	.word	0x20000560
 8002264:	2000056c 	.word	0x2000056c
 8002268:	40021400 	.word	0x40021400
 800226c:	457ff000 	.word	0x457ff000
 8002270:	42700000 	.word	0x42700000
 8002274:	200000d2 	.word	0x200000d2
 8002278:	20000000 	.word	0x20000000
 800227c:	200000c8 	.word	0x200000c8
 8002280:	200000cc 	.word	0x200000cc
		else if(TRANSDUCER_4.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<4);}
 8002284:	4bb2      	ldr	r3, [pc, #712]	@ (8002550 <main+0x1168>)
 8002286:	ed93 7a02 	vldr	s14, [r3, #8]
 800228a:	4bb2      	ldr	r3, [pc, #712]	@ (8002554 <main+0x116c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	db0a      	blt.n	80022b6 <main+0xece>
 80022a0:	4bad      	ldr	r3, [pc, #692]	@ (8002558 <main+0x1170>)
 80022a2:	220a      	movs	r2, #10
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	4bad      	ldr	r3, [pc, #692]	@ (800255c <main+0x1174>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4baa      	ldr	r3, [pc, #680]	@ (800255c <main+0x1174>)
 80022b2:	801a      	strh	r2, [r3, #0]
 80022b4:	e056      	b.n	8002364 <main+0xf7c>
		//If Error state but not direct to PURGE
		else{
			if(TRANSDUCER_1.read_value_bar >=max_pressure_error_mode){error |=(0x01<<3);}
 80022b6:	4baa      	ldr	r3, [pc, #680]	@ (8002560 <main+0x1178>)
 80022b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80022bc:	4ba9      	ldr	r3, [pc, #676]	@ (8002564 <main+0x117c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	db07      	blt.n	80022e2 <main+0xefa>
 80022d2:	4ba2      	ldr	r3, [pc, #648]	@ (800255c <main+0x1174>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	f043 0308 	orr.w	r3, r3, #8
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b9f      	ldr	r3, [pc, #636]	@ (800255c <main+0x1174>)
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	e040      	b.n	8002364 <main+0xf7c>
			else if(TRANSDUCER_2.read_value_bar >=max_pressure_error_mode){error |=(0x01<<2);}
 80022e2:	4ba1      	ldr	r3, [pc, #644]	@ (8002568 <main+0x1180>)
 80022e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80022e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002564 <main+0x117c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	db07      	blt.n	800230e <main+0xf26>
 80022fe:	4b97      	ldr	r3, [pc, #604]	@ (800255c <main+0x1174>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b94      	ldr	r3, [pc, #592]	@ (800255c <main+0x1174>)
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	e02a      	b.n	8002364 <main+0xf7c>
			else if(TRANSDUCER_3.read_value_bar >=max_pressure_error_mode){error |=(0x01<<1);}
 800230e:	4b97      	ldr	r3, [pc, #604]	@ (800256c <main+0x1184>)
 8002310:	ed93 7a02 	vldr	s14, [r3, #8]
 8002314:	4b93      	ldr	r3, [pc, #588]	@ (8002564 <main+0x117c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	db07      	blt.n	800233a <main+0xf52>
 800232a:	4b8c      	ldr	r3, [pc, #560]	@ (800255c <main+0x1174>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b89      	ldr	r3, [pc, #548]	@ (800255c <main+0x1174>)
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	e014      	b.n	8002364 <main+0xf7c>
			else if(TRANSDUCER_4.read_value_bar >=max_pressure_error_mode){error |=0x01;}
 800233a:	4b85      	ldr	r3, [pc, #532]	@ (8002550 <main+0x1168>)
 800233c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002340:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <main+0x117c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800234c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	db06      	blt.n	8002364 <main+0xf7c>
 8002356:	4b81      	ldr	r3, [pc, #516]	@ (800255c <main+0x1174>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b7e      	ldr	r3, [pc, #504]	@ (800255c <main+0x1174>)
 8002362:	801a      	strh	r2, [r3, #0]
		//Pressures are A-OK, so carry on without doing anything
			else{} //make it so nothing happens here -> proceed
		}

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002364:	4b82      	ldr	r3, [pc, #520]	@ (8002570 <main+0x1188>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <main+0xf8a>
 800236c:	f001 fab2 	bl	80038d4 <RX_Receive>
 8002370:	e000      	b.n	8002374 <main+0xf8c>
 8002372:	bf00      	nop

//Get Loadcell Readings

		//Done with HALD libs atm - JC 29/04/2025
		spi_buf[0] = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		spi_buf[1] = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	2104      	movs	r1, #4
 8002384:	487b      	ldr	r0, [pc, #492]	@ (8002574 <main+0x118c>)
 8002386:	f002 fadd 	bl	8004944 <HAL_GPIO_WritePin>
		//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH1,  (uint8_t *)spi_buf, 1, 100);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800238a:	2201      	movs	r2, #1
 800238c:	2104      	movs	r1, #4
 800238e:	4879      	ldr	r0, [pc, #484]	@ (8002574 <main+0x118c>)
 8002390:	f002 fad8 	bl	8004944 <HAL_GPIO_WritePin>
		if (ret != HAL_OK){
 8002394:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <main+0xfce>
			LOADCELL_1.comms_ok = false;
 800239c:	4b76      	ldr	r3, [pc, #472]	@ (8002578 <main+0x1190>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			LOADCELL_2.comms_ok = false;
 80023a2:	4b76      	ldr	r3, [pc, #472]	@ (800257c <main+0x1194>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
			LOADCELL_3.comms_ok = false;
 80023a8:	4b75      	ldr	r3, [pc, #468]	@ (8002580 <main+0x1198>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
			LOADCELL_4.comms_ok = false;
 80023ae:	4b75      	ldr	r3, [pc, #468]	@ (8002584 <main+0x119c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e049      	b.n	800244a <main+0x1062>
		}
		else {
			LOADCELL_1.comms_ok = true;
 80023b6:	4b70      	ldr	r3, [pc, #448]	@ (8002578 <main+0x1190>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
			LOADCELL_2.comms_ok = true;
 80023bc:	4b6f      	ldr	r3, [pc, #444]	@ (800257c <main+0x1194>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
			LOADCELL_3.comms_ok = true;
 80023c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002580 <main+0x1198>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
			LOADCELL_4.comms_ok = true;
 80023c8:	4b6e      	ldr	r3, [pc, #440]	@ (8002584 <main+0x119c>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]


			LOADCELL_1.raw_data[0] = spi_buf[0];
 80023ce:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80023d2:	4b69      	ldr	r3, [pc, #420]	@ (8002578 <main+0x1190>)
 80023d4:	705a      	strb	r2, [r3, #1]
			LOADCELL_1.raw_data[1] = spi_buf[1];
 80023d6:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80023da:	4b67      	ldr	r3, [pc, #412]	@ (8002578 <main+0x1190>)
 80023dc:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	2110      	movs	r1, #16
 80023e2:	4869      	ldr	r0, [pc, #420]	@ (8002588 <main+0x11a0>)
 80023e4:	f002 faae 	bl	8004944 <HAL_GPIO_WritePin>
			//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH2,  (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2110      	movs	r1, #16
 80023ec:	4866      	ldr	r0, [pc, #408]	@ (8002588 <main+0x11a0>)
 80023ee:	f002 faa9 	bl	8004944 <HAL_GPIO_WritePin>

			LOADCELL_2.raw_data[0] = spi_buf[0];
 80023f2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80023f6:	4b61      	ldr	r3, [pc, #388]	@ (800257c <main+0x1194>)
 80023f8:	705a      	strb	r2, [r3, #1]
			LOADCELL_2.raw_data[1] = spi_buf[1];
 80023fa:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80023fe:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <main+0x1194>)
 8002400:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	4860      	ldr	r0, [pc, #384]	@ (8002588 <main+0x11a0>)
 8002408:	f002 fa9c 	bl	8004944 <HAL_GPIO_WritePin>
			//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH3,  (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	2110      	movs	r1, #16
 8002410:	485d      	ldr	r0, [pc, #372]	@ (8002588 <main+0x11a0>)
 8002412:	f002 fa97 	bl	8004944 <HAL_GPIO_WritePin>

			LOADCELL_3.raw_data[0] = spi_buf[0];
 8002416:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800241a:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <main+0x1198>)
 800241c:	705a      	strb	r2, [r3, #1]
			LOADCELL_3.raw_data[1] = spi_buf[1];
 800241e:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8002422:	4b57      	ldr	r3, [pc, #348]	@ (8002580 <main+0x1198>)
 8002424:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	2110      	movs	r1, #16
 800242a:	4857      	ldr	r0, [pc, #348]	@ (8002588 <main+0x11a0>)
 800242c:	f002 fa8a 	bl	8004944 <HAL_GPIO_WritePin>
			//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH4,  (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	2110      	movs	r1, #16
 8002434:	4854      	ldr	r0, [pc, #336]	@ (8002588 <main+0x11a0>)
 8002436:	f002 fa85 	bl	8004944 <HAL_GPIO_WritePin>

			LOADCELL_4.raw_data[0] = spi_buf[0];
 800243a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800243e:	4b51      	ldr	r3, [pc, #324]	@ (8002584 <main+0x119c>)
 8002440:	705a      	strb	r2, [r3, #1]
			LOADCELL_4.raw_data[1] = spi_buf[1];
 8002442:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8002446:	4b4f      	ldr	r3, [pc, #316]	@ (8002584 <main+0x119c>)
 8002448:	709a      	strb	r2, [r3, #2]

		}

		//Translate 12bit value into relative voltage (given Vref is 5V)

		LOADCELL_1.read_value_voltage = ((float)(LOADCELL_1.raw_data[1] << 8 |  LOADCELL_1.raw_data[0] )/ 4095) * 5;
 800244a:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <main+0x1190>)
 800244c:	789b      	ldrb	r3, [r3, #2]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	4a49      	ldr	r2, [pc, #292]	@ (8002578 <main+0x1190>)
 8002452:	7852      	ldrb	r2, [r2, #1]
 8002454:	4313      	orrs	r3, r2
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 800258c <main+0x11a4>
 8002462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002466:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800246a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246e:	4b42      	ldr	r3, [pc, #264]	@ (8002578 <main+0x1190>)
 8002470:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_2.read_value_voltage = ((float)(LOADCELL_2.raw_data[1] << 8 |  LOADCELL_2.raw_data[0] )/ 4095) * 5;
 8002474:	4b41      	ldr	r3, [pc, #260]	@ (800257c <main+0x1194>)
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	4a40      	ldr	r2, [pc, #256]	@ (800257c <main+0x1194>)
 800247c:	7852      	ldrb	r2, [r2, #1]
 800247e:	4313      	orrs	r3, r2
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eddf 6a40 	vldr	s13, [pc, #256]	@ 800258c <main+0x11a4>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	4b38      	ldr	r3, [pc, #224]	@ (800257c <main+0x1194>)
 800249a:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_3.read_value_voltage = ((float)(LOADCELL_3.raw_data[1] << 8 |  LOADCELL_3.raw_data[0] )/ 4095) * 5;
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <main+0x1198>)
 80024a0:	789b      	ldrb	r3, [r3, #2]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	4a36      	ldr	r2, [pc, #216]	@ (8002580 <main+0x1198>)
 80024a6:	7852      	ldrb	r2, [r2, #1]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b2:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800258c <main+0x11a4>
 80024b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ba:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <main+0x1198>)
 80024c4:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_4.read_value_voltage = ((float)(LOADCELL_4.raw_data[1] << 8 |  LOADCELL_4.raw_data[0] )/ 4095) * 5;
 80024c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002584 <main+0x119c>)
 80024ca:	789b      	ldrb	r3, [r3, #2]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <main+0x119c>)
 80024d0:	7852      	ldrb	r2, [r2, #1]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024dc:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800258c <main+0x11a4>
 80024e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80024e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <main+0x119c>)
 80024ee:	edc3 7a01 	vstr	s15, [r3, #4]



		LOADCELL_1.read_value_weight = LOADCELL_1.read_value_voltage * 10; //(voltage_read / 5) * 50 (kg) = pressure, 50/5 is 10, therefore (voltage_read) * 10 = weight (for a 0-50kg range)
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <main+0x1190>)
 80024f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <main+0x1190>)
 8002502:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_2.read_value_weight = LOADCELL_2.read_value_voltage * 10;
 8002506:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <main+0x1194>)
 8002508:	edd3 7a01 	vldr	s15, [r3, #4]
 800250c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <main+0x1194>)
 8002516:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_3.read_value_weight = LOADCELL_3.read_value_voltage * 10;
 800251a:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <main+0x1198>)
 800251c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002520:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <main+0x1198>)
 800252a:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_4.read_value_weight = LOADCELL_4.read_value_voltage * 10;
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <main+0x119c>)
 8002530:	edd3 7a01 	vldr	s15, [r3, #4]
 8002534:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <main+0x119c>)
 800253e:	edc3 7a02 	vstr	s15, [r3, #8]


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <main+0x1188>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d022      	beq.n	8002590 <main+0x11a8>
 800254a:	f001 f9c3 	bl	80038d4 <RX_Receive>
 800254e:	e020      	b.n	8002592 <main+0x11aa>
 8002550:	2000056c 	.word	0x2000056c
 8002554:	20000000 	.word	0x20000000
 8002558:	200000c8 	.word	0x200000c8
 800255c:	200000cc 	.word	0x200000cc
 8002560:	20000548 	.word	0x20000548
 8002564:	20000004 	.word	0x20000004
 8002568:	20000554 	.word	0x20000554
 800256c:	20000560 	.word	0x20000560
 8002570:	200000d2 	.word	0x200000d2
 8002574:	40020000 	.word	0x40020000
 8002578:	20000578 	.word	0x20000578
 800257c:	20000584 	.word	0x20000584
 8002580:	20000590 	.word	0x20000590
 8002584:	2000059c 	.word	0x2000059c
 8002588:	40021800 	.word	0x40021800
 800258c:	457ff000 	.word	0x457ff000
 8002590:	bf00      	nop


		//Check Loadcell weights, if too low, trigger error flag
		//Error Flags specific to loadcell
		if(LOADCELL_1.read_value_weight <min_weight_error_mode){error |=(0x01<<7);}
 8002592:	4b9c      	ldr	r3, [pc, #624]	@ (8002804 <main+0x141c>)
 8002594:	ed93 7a02 	vldr	s14, [r3, #8]
 8002598:	4b9b      	ldr	r3, [pc, #620]	@ (8002808 <main+0x1420>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	d507      	bpl.n	80025be <main+0x11d6>
 80025ae:	4b97      	ldr	r3, [pc, #604]	@ (800280c <main+0x1424>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b94      	ldr	r3, [pc, #592]	@ (800280c <main+0x1424>)
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e040      	b.n	8002640 <main+0x1258>
		else if(LOADCELL_2.read_value_weight <min_weight_error_mode){error |=(0x01<<6);}
 80025be:	4b94      	ldr	r3, [pc, #592]	@ (8002810 <main+0x1428>)
 80025c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80025c4:	4b90      	ldr	r3, [pc, #576]	@ (8002808 <main+0x1420>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	d507      	bpl.n	80025ea <main+0x1202>
 80025da:	4b8c      	ldr	r3, [pc, #560]	@ (800280c <main+0x1424>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b89      	ldr	r3, [pc, #548]	@ (800280c <main+0x1424>)
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e02a      	b.n	8002640 <main+0x1258>
		else if(LOADCELL_3.read_value_weight <min_weight_error_mode){error |=(0x01<<5);}
 80025ea:	4b8a      	ldr	r3, [pc, #552]	@ (8002814 <main+0x142c>)
 80025ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80025f0:	4b85      	ldr	r3, [pc, #532]	@ (8002808 <main+0x1420>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	d507      	bpl.n	8002616 <main+0x122e>
 8002606:	4b81      	ldr	r3, [pc, #516]	@ (800280c <main+0x1424>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b7e      	ldr	r3, [pc, #504]	@ (800280c <main+0x1424>)
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e014      	b.n	8002640 <main+0x1258>
		else if(LOADCELL_4.read_value_weight <min_weight_error_mode){error |=(0x01<<4);}
 8002616:	4b80      	ldr	r3, [pc, #512]	@ (8002818 <main+0x1430>)
 8002618:	ed93 7a02 	vldr	s14, [r3, #8]
 800261c:	4b7a      	ldr	r3, [pc, #488]	@ (8002808 <main+0x1420>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d506      	bpl.n	8002640 <main+0x1258>
 8002632:	4b76      	ldr	r3, [pc, #472]	@ (800280c <main+0x1424>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	b29a      	uxth	r2, r3
 800263c:	4b73      	ldr	r3, [pc, #460]	@ (800280c <main+0x1424>)
 800263e:	801a      	strh	r2, [r3, #0]
		//Weights are A-OK, so carry on without doing anything
		else{}

//Extract surface mount temp sensor temp
		i2c_comms_result result = get_temp(&SMD_TEMP_SENSE);
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	4975      	ldr	r1, [pc, #468]	@ (800281c <main+0x1434>)
 8002646:	4618      	mov	r0, r3
 8002648:	f001 fb6e 	bl	8003d28 <get_temp>
		if (result.comms_ok){
 800264c:	7f3b      	ldrb	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01b      	beq.n	800268a <main+0x12a2>
			for (uint8_t i = 0; i <= result.return_length; i++) {
 8002652:	2300      	movs	r3, #0
 8002654:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002658:	e011      	b.n	800267e <main+0x1296>
				uint8_t * floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 800265a:	4b71      	ldr	r3, [pc, #452]	@ (8002820 <main+0x1438>)
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				floatPtr[i] = result.return_value[i];
 800265e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002662:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002668:	440b      	add	r3, r1
 800266a:	3248      	adds	r2, #72	@ 0x48
 800266c:	443a      	add	r2, r7
 800266e:	f812 2c2a 	ldrb.w	r2, [r2, #-42]
 8002672:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i <= result.return_length; i++) {
 8002674:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002678:	3301      	adds	r3, #1
 800267a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800267e:	7f7b      	ldrb	r3, [r7, #29]
 8002680:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002684:	429a      	cmp	r2, r3
 8002686:	d9e8      	bls.n	800265a <main+0x1272>
 8002688:	e003      	b.n	8002692 <main+0x12aa>
			}
		}
		else {
			SMD_TEMP_SENSE.temp = 0x00;
 800268a:	4b64      	ldr	r3, [pc, #400]	@ (800281c <main+0x1434>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
		}


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002692:	4b64      	ldr	r3, [pc, #400]	@ (8002824 <main+0x143c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <main+0x12b8>
 800269a:	f001 f91b 	bl	80038d4 <RX_Receive>
 800269e:	e000      	b.n	80026a2 <main+0x12ba>
 80026a0:	bf00      	nop

		//Check if we need to go directly to PURGE
		if(switch_case_state == 10)
 80026a2:	4b61      	ldr	r3, [pc, #388]	@ (8002828 <main+0x1440>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b0a      	cmp	r3, #10
 80026a8:	f000 8705 	beq.w	80034b6 <main+0x20ce>
		{
			break; //enter PURGE state
		}
		else
		{
			switch_case_state = 1; //input selector state
 80026ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002828 <main+0x1440>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
			break;
 80026b2:	f000 bf03 	b.w	80034bc <main+0x20d4>
//								Checks switch input and sets LED outputs

	case 1:

		//Set SMD LEDs as per current case/state
		LED_1.port->ODR &= ~LED_1_PWR;
 80026b6:	4b5d      	ldr	r3, [pc, #372]	@ (800282c <main+0x1444>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	4b5b      	ldr	r3, [pc, #364]	@ (800282c <main+0x1444>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026c4:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 80026c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002830 <main+0x1448>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	4b58      	ldr	r3, [pc, #352]	@ (8002830 <main+0x1448>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d4:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 80026d6:	4b57      	ldr	r3, [pc, #348]	@ (8002834 <main+0x144c>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	4b55      	ldr	r3, [pc, #340]	@ (8002834 <main+0x144c>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e4:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 80026e6:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <main+0x1450>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	4b52      	ldr	r3, [pc, #328]	@ (8002838 <main+0x1450>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026f4:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 80026f6:	4b51      	ldr	r3, [pc, #324]	@ (800283c <main+0x1454>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <main+0x1454>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002704:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002706:	4b4e      	ldr	r3, [pc, #312]	@ (8002840 <main+0x1458>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <main+0x1458>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002714:	615a      	str	r2, [r3, #20]

			//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002716:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <main+0x143c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <main+0x133c>
 800271e:	f001 f8d9 	bl	80038d4 <RX_Receive>
 8002722:	e000      	b.n	8002726 <main+0x133e>
 8002724:	bf00      	nop

			//check for either remote control (== 0) or local control (== 1)
		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == 0)
 8002726:	4b47      	ldr	r3, [pc, #284]	@ (8002844 <main+0x145c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d114      	bne.n	800275e <main+0x1376>
		{
				//Change LED State
			led_remote.port->ODR |= LOCAL_CONTROL_SW;			//Set Remote CTRL LED
 8002734:	4b44      	ldr	r3, [pc, #272]	@ (8002848 <main+0x1460>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <main+0x1460>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002742:	615a      	str	r2, [r3, #20]
			led_local.port->ODR &= ~(LOCAL_CONTROL_SW);			//Off Local CTRL LED
 8002744:	4b41      	ldr	r3, [pc, #260]	@ (800284c <main+0x1464>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	4b40      	ldr	r3, [pc, #256]	@ (800284c <main+0x1464>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002752:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 3; //remote control
 8002754:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <main+0x1440>)
 8002756:	2203      	movs	r2, #3
 8002758:	701a      	strb	r2, [r3, #0]
			break;
 800275a:	f000 beaf 	b.w	80034bc <main+0x20d4>
		}
		else //Local Control (==1)
		{
			//Change LED State
			led_remote.port->ODR &= ~(LOCAL_CONTROL_SW);		//Off Remote CTRL LED
 800275e:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <main+0x1460>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <main+0x1460>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800276c:	615a      	str	r2, [r3, #20]
			led_local.port->ODR |= LOCAL_CONTROL_SW;			//Set Local CTRL LED
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <main+0x1464>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <main+0x1464>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800277c:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 2; //local control
 800277e:	4b2a      	ldr	r3, [pc, #168]	@ (8002828 <main+0x1440>)
 8002780:	2202      	movs	r2, #2
 8002782:	701a      	strb	r2, [r3, #0]
			break;
 8002784:	f000 be9a 	b.w	80034bc <main+0x20d4>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	bf00      	nop

		__disable_irq();

		//Read in switch inputs to state_local var
		state_local =
		((DUM_SW.port->IDR & DUMP_SW) << 7) +
 800278c:	4b30      	ldr	r3, [pc, #192]	@ (8002850 <main+0x1468>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	691b      	ldr	r3, [r3, #16]
		((N2O_SW.port->IDR & N2O_ISO_SW) << 6) +
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <main+0x146c>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	691b      	ldr	r3, [r3, #16]
		((O2_IS_SW.port->IDR & O2_ISO_SW) << 5) +
 8002798:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <main+0x1470>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	691b      	ldr	r3, [r3, #16]
		((IGNITION_IS_SW.port->IDR & IGNITION_SW) << 4) +
 800279e:	4b2f      	ldr	r3, [pc, #188]	@ (800285c <main+0x1474>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
		(activate_SW.port->IDR & ACTIVATE_SW);
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <main+0x1478>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 80027aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002864 <main+0x147c>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	b2da      	uxtb	r2, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 80027bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <main+0x1480>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80027cc:	b2db      	uxtb	r3, r3
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 80027ce:	4413      	add	r3, r2
 80027d0:	b2da      	uxtb	r2, r3
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
 80027d2:	4b26      	ldr	r3, [pc, #152]	@ (800286c <main+0x1484>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	b2db      	uxtb	r3, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 80027e4:	4413      	add	r3, r2
 80027e6:	b2da      	uxtb	r2, r3
		state_local =
 80027e8:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <main+0x1488>)
 80027ea:	701a      	strb	r2, [r3, #0]

		//Move to local control output setting state
		switch_case_state = 0x0F;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <main+0x1440>)
 80027ee:	220f      	movs	r2, #15
 80027f0:	701a      	strb	r2, [r3, #0]
		break;
 80027f2:	f000 be63 	b.w	80034bc <main+0x20d4>
//*******************************REMOTE ACCESS - TIMER UPDATES*************************************************************
//								Enable Interrupts
	case 3:

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <main+0x143c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d03a      	beq.n	8002874 <main+0x148c>
 80027fe:	f001 f869 	bl	80038d4 <RX_Receive>
 8002802:	e038      	b.n	8002876 <main+0x148e>
 8002804:	20000578 	.word	0x20000578
 8002808:	20000008 	.word	0x20000008
 800280c:	200000cc 	.word	0x200000cc
 8002810:	20000584 	.word	0x20000584
 8002814:	20000590 	.word	0x20000590
 8002818:	2000059c 	.word	0x2000059c
 800281c:	2000000c 	.word	0x2000000c
 8002820:	20000010 	.word	0x20000010
 8002824:	200000d2 	.word	0x200000d2
 8002828:	200000c8 	.word	0x200000c8
 800282c:	20000380 	.word	0x20000380
 8002830:	20000398 	.word	0x20000398
 8002834:	200003b0 	.word	0x200003b0
 8002838:	200003c8 	.word	0x200003c8
 800283c:	200003e0 	.word	0x200003e0
 8002840:	200003f8 	.word	0x200003f8
 8002844:	20000428 	.word	0x20000428
 8002848:	20000320 	.word	0x20000320
 800284c:	20000308 	.word	0x20000308
 8002850:	20000440 	.word	0x20000440
 8002854:	20000458 	.word	0x20000458
 8002858:	20000470 	.word	0x20000470
 800285c:	20000488 	.word	0x20000488
 8002860:	20000410 	.word	0x20000410
 8002864:	200004a0 	.word	0x200004a0
 8002868:	200004b8 	.word	0x200004b8
 800286c:	200004d0 	.word	0x200004d0
 8002870:	200000ca 	.word	0x200000ca
 8002874:	bf00      	nop

		//Enable interrupts for LoRa
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002876:	2017      	movs	r0, #23
 8002878:	f7fe fd4a 	bl	8001310 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI9_5_IRQn,9);
 800287c:	2109      	movs	r1, #9
 800287e:	2017      	movs	r0, #23
 8002880:	f7fe fd88 	bl	8001394 <__NVIC_SetPriority>
		//NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
		//NVIC_SetPriority(TIM1_UP_TIM10_IRQn,10);

		//Move to remote access output setting state
		switch_case_state = 4;
 8002884:	4b9b      	ldr	r3, [pc, #620]	@ (8002af4 <main+0x170c>)
 8002886:	2204      	movs	r2, #4
 8002888:	701a      	strb	r2, [r3, #0]
		 * B2: Ignition Selected
		 * B1: Gas Filled selected
		 * B0: System Activated
		 */

		break;
 800288a:	f000 be17 	b.w	80034bc <main+0x20d4>
//**************************REMOTE ACCESS - OUTPUT ACTUATION*************************************************************
//							Actuates outputs depended on state flags within last received LoRa packet
	case 4:

		LED_1.port -> ODR &= ~LED_1_PWR;
 800288e:	4b9a      	ldr	r3, [pc, #616]	@ (8002af8 <main+0x1710>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	4b98      	ldr	r3, [pc, #608]	@ (8002af8 <main+0x1710>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800289c:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 800289e:	4b97      	ldr	r3, [pc, #604]	@ (8002afc <main+0x1714>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	4b95      	ldr	r3, [pc, #596]	@ (8002afc <main+0x1714>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ac:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 80028ae:	4b94      	ldr	r3, [pc, #592]	@ (8002b00 <main+0x1718>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	4b92      	ldr	r3, [pc, #584]	@ (8002b00 <main+0x1718>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028bc:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 80028be:	4b91      	ldr	r3, [pc, #580]	@ (8002b04 <main+0x171c>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002b04 <main+0x171c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028cc:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 80028ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002b08 <main+0x1720>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002b08 <main+0x1720>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028dc:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 80028de:	4b8b      	ldr	r3, [pc, #556]	@ (8002b0c <main+0x1724>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	4b89      	ldr	r3, [pc, #548]	@ (8002b0c <main+0x1724>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028ec:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 80028ee:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <main+0x1728>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <main+0x1514>
 80028f6:	f000 ffed 	bl	80038d4 <RX_Receive>
 80028fa:	e000      	b.n	80028fe <main+0x1516>
 80028fc:	bf00      	nop

		//Check if System activated bit was set in last received packet
		if((state & SYSTEM_ACTIVATED) != SYSTEM_ACTIVATED)
 80028fe:	4b85      	ldr	r3, [pc, #532]	@ (8002b14 <main+0x172c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <main+0x152c>
		{
			//If system is not active, should go straight to PURGE state
			switch_case_state = 10;
 800290a:	4b7a      	ldr	r3, [pc, #488]	@ (8002af4 <main+0x170c>)
 800290c:	220a      	movs	r2, #10
 800290e:	701a      	strb	r2, [r3, #0]
			break;
 8002910:	f000 bdd4 	b.w	80034bc <main+0x20d4>
		//	CH1_ARM.port->ODR |= (CH1_Arm);
		//	CH1_OP.port->ODR |= (CH1_Operate);
		//}

		//Check if manual purge bit was set in last received packet
		else if( ((state & MANUAL_PURGE) == MANUAL_PURGE) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED) )
 8002914:	4b7f      	ldr	r3, [pc, #508]	@ (8002b14 <main+0x172c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b25b      	sxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	da0a      	bge.n	8002934 <main+0x154c>
 800291e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b14 <main+0x172c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <main+0x154c>
		{
			//If manual purge was set, should go straight to PURGE state
			switch_case_state = 10;
 800292a:	4b72      	ldr	r3, [pc, #456]	@ (8002af4 <main+0x170c>)
 800292c:	220a      	movs	r2, #10
 800292e:	701a      	strb	r2, [r3, #0]
			break;
 8002930:	f000 bdc4 	b.w	80034bc <main+0x20d4>
		}
// ------------------- Pass this point, the system is active, and manual purge has not been selected! -------------------

		//If neither Gas or Ignition selected, go to neutral state
		else if( ((state & GAS_FILLED_SELECTED) == 0) && ((state & IGNITION_SELECTED) == 0) ) //0 to indicate neither are selected
 8002934:	4b77      	ldr	r3, [pc, #476]	@ (8002b14 <main+0x172c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <main+0x156e>
 8002940:	4b74      	ldr	r3, [pc, #464]	@ (8002b14 <main+0x172c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <main+0x156e>
		{
			switch_case_state = 9; //go into neutral state!
 800294c:	4b69      	ldr	r3, [pc, #420]	@ (8002af4 <main+0x170c>)
 800294e:	2209      	movs	r2, #9
 8002950:	701a      	strb	r2, [r3, #0]
			break;
 8002952:	f000 bdb3 	b.w	80034bc <main+0x20d4>
		}

		//If Ignition is selected
		else if ( ((state & IGNITION_SELECTED) == IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) != GAS_FILLED_SELECTED))
 8002956:	4b6f      	ldr	r3, [pc, #444]	@ (8002b14 <main+0x172c>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d038      	beq.n	80029d4 <main+0x15ec>
 8002962:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <main+0x172c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d132      	bne.n	80029d4 <main+0x15ec>
		{
			//Ensure N2O Solenoid is closed, and turn off LED
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 800296e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b18 <main+0x1730>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	4b68      	ldr	r3, [pc, #416]	@ (8002b18 <main+0x1730>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800297c:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 800297e:	4b67      	ldr	r3, [pc, #412]	@ (8002b1c <main+0x1734>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <main+0x1734>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298c:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 800298e:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <main+0x1738>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	4b62      	ldr	r3, [pc, #392]	@ (8002b20 <main+0x1738>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f022 0220 	bic.w	r2, r2, #32
 800299c:	615a      	str	r2, [r3, #20]


			//If Ignition FIRE bit is set, time to light this puppy
			if((state & IGNITION_FIRE) == IGNITION_FIRE)
 800299e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b14 <main+0x172c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <main+0x15cc>
			{
				switch_case_state = 0x80;
 80029aa:	4b52      	ldr	r3, [pc, #328]	@ (8002af4 <main+0x170c>)
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	701a      	strb	r2, [r3, #0]
				break;
 80029b0:	f000 bd84 	b.w	80034bc <main+0x20d4>
			}
			//If O2 Fill bit is set, enable the O2 Solenoids
			else if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 80029b4:	4b57      	ldr	r3, [pc, #348]	@ (8002b14 <main+0x172c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <main+0x15e2>
				switch_case_state = 8;
 80029c0:	4b4c      	ldr	r3, [pc, #304]	@ (8002af4 <main+0x170c>)
 80029c2:	2208      	movs	r2, #8
 80029c4:	701a      	strb	r2, [r3, #0]
				break;
 80029c6:	f000 bd79 	b.w	80034bc <main+0x20d4>
			}
			//Otherwise go to neutral
			else{
				switch_case_state = 9;
 80029ca:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <main+0x170c>)
 80029cc:	2209      	movs	r2, #9
 80029ce:	701a      	strb	r2, [r3, #0]
				break;
 80029d0:	f000 bd74 	b.w	80034bc <main+0x20d4>
			}
		}

// ------------------- Pass this point, ignite is NOT selected, and gas fill state has been selected -------------------

		else if ( ((state & IGNITION_SELECTED) != IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED))
 80029d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b14 <main+0x172c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d120      	bne.n	8002a22 <main+0x163a>
 80029e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b14 <main+0x172c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01a      	beq.n	8002a22 <main+0x163a>
		{
//N2O and PURGE have not been selected, go to neutral state
			if((state & SWITCH_SELECTOR) == SWITCH_SELECTOR)
 80029ec:	4b49      	ldr	r3, [pc, #292]	@ (8002b14 <main+0x172c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <main+0x161a>
			{
				switch_case_state = 9;
 80029f8:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <main+0x170c>)
 80029fa:	2209      	movs	r2, #9
 80029fc:	701a      	strb	r2, [r3, #0]
				break;
 80029fe:	f000 bd5d 	b.w	80034bc <main+0x20d4>
			}
//N20 Fill is selected, move to N2O actuation state
			else if( (state & N2O_FILL_ACTIVATE) == N2O_FILL_ACTIVATE)
 8002a02:	4b44      	ldr	r3, [pc, #272]	@ (8002b14 <main+0x172c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <main+0x1630>
			{
				switch_case_state = 7;
 8002a0e:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <main+0x170c>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	701a      	strb	r2, [r3, #0]
				break;
 8002a14:	f000 bd52 	b.w	80034bc <main+0x20d4>
			}
//If neither are selected, some error... Go to neutral state for safety, and set error flag
			else
			{
				//get error flag in here as well!
				switch_case_state = 9; //Something has gone wrong and weird - go to neutral state and stop gas flow
 8002a18:	4b36      	ldr	r3, [pc, #216]	@ (8002af4 <main+0x170c>)
 8002a1a:	2209      	movs	r2, #9
 8002a1c:	701a      	strb	r2, [r3, #0]
				break;
 8002a1e:	f000 bd4d 	b.w	80034bc <main+0x20d4>

//*******************************LOCAL ACCESS*************************************************************
	case 0x0F:


		LED_1.port -> ODR |= LED_1_PWR;
 8002a22:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <main+0x1710>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	4b33      	ldr	r3, [pc, #204]	@ (8002af8 <main+0x1710>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a30:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002a32:	4b32      	ldr	r3, [pc, #200]	@ (8002afc <main+0x1714>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <main+0x1714>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a40:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002a42:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <main+0x1718>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <main+0x1718>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a50:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002a52:	4b2c      	ldr	r3, [pc, #176]	@ (8002b04 <main+0x171c>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <main+0x171c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a60:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002a62:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <main+0x1720>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <main+0x1720>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a70:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002a72:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <main+0x1724>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <main+0x1724>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a80:	615a      	str	r2, [r3, #20]


		if((state_local & ACTIVATE_SW) != ACTIVATE_SW) //if the system is not active
 8002a82:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <main+0x173c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <main+0x16b0>
		{
			switch_case_state = 10;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <main+0x170c>)
 8002a90:	220a      	movs	r2, #10
 8002a92:	701a      	strb	r2, [r3, #0]
			break;
 8002a94:	f000 bd12 	b.w	80034bc <main+0x20d4>
		}

//Ignition Key Swtich Selected
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <main+0x173c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8094 	beq.w	8002bce <main+0x17e6>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <main+0x173c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 808d 	bne.w	8002bce <main+0x17e6>
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <main+0x173c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8086 	bne.w	8002bce <main+0x17e6>
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <main+0x173c>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d17f      	bne.n	8002bce <main+0x17e6>
				(state_local & O2_DEADMAN_SW) != O2_DEADMAN_SW) //is O2 deadman off
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <main+0x173c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d179      	bne.n	8002bce <main+0x17e6>
		{

			//Adding 'dump' flag to detect the change in interrupt state in key areas!
			//periodic 'dump' flag checks are needed along certain areas as to ensure state is checked regardless
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002ada:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <main+0x1740>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d124      	bne.n	8002b2c <main+0x1744>
 8002ae2:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <main+0x170c>)
 8002ae4:	220a      	movs	r2, #10
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <main+0x1740>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	f000 bce5 	b.w	80034bc <main+0x20d4>
 8002af2:	bf00      	nop
 8002af4:	200000c8 	.word	0x200000c8
 8002af8:	20000380 	.word	0x20000380
 8002afc:	20000398 	.word	0x20000398
 8002b00:	200003b0 	.word	0x200003b0
 8002b04:	200003c8 	.word	0x200003c8
 8002b08:	200003e0 	.word	0x200003e0
 8002b0c:	200003f8 	.word	0x200003f8
 8002b10:	200000d2 	.word	0x200000d2
 8002b14:	200000c9 	.word	0x200000c9
 8002b18:	20000218 	.word	0x20000218
 8002b1c:	20000200 	.word	0x20000200
 8002b20:	20000350 	.word	0x20000350
 8002b24:	200000ca 	.word	0x200000ca
 8002b28:	200000cf 	.word	0x200000cf
			else{__asm("NOP");}
 8002b2c:	bf00      	nop
			//does nothing when false condition is set - ie when dump button has not been pressed!
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002b2e:	4b62      	ldr	r3, [pc, #392]	@ (8002cb8 <main+0x18d0>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	4b60      	ldr	r3, [pc, #384]	@ (8002cb8 <main+0x18d0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3c:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cbc <main+0x18d4>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <main+0x18d4>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4c:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc0 <main+0x18d8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc0 <main+0x18d8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f022 0220 	bic.w	r2, r2, #32
 8002b5c:	615a      	str	r2, [r3, #20]
			led_o2.port->ODR &= ~(O2_LED);
 8002b5e:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <main+0x18dc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	4b57      	ldr	r3, [pc, #348]	@ (8002cc4 <main+0x18dc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b6c:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002b6e:	4b56      	ldr	r3, [pc, #344]	@ (8002cc8 <main+0x18e0>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	4b54      	ldr	r3, [pc, #336]	@ (8002cc8 <main+0x18e0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b7c:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 8002b7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <main+0x18e4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <main+0x18e4>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b8c:	615a      	str	r2, [r3, #20]


			Ignition1_ARM.port->ODR |= IGNITION1_ARM;
 8002b8e:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <main+0x18e8>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd0 <main+0x18e8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b9c:	615a      	str	r2, [r3, #20]
			Ignition2_ARM.port->ODR |= IGNITION2_ARM;
 8002b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd4 <main+0x18ec>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd4 <main+0x18ec>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f042 0208 	orr.w	r2, r2, #8
 8002bac:	615a      	str	r2, [r3, #20]
//Ignition Rotary Switch Selected
			if((state_local & IGNITE_DEADMAN_SW) == IGNITE_DEADMAN_SW) //is IGNITE button pressed!
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <main+0x18f0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <main+0x17dc>
			{
				switch_case_state = 0x80;  //IGNITE state
 8002bba:	4b48      	ldr	r3, [pc, #288]	@ (8002cdc <main+0x18f4>)
 8002bbc:	2280      	movs	r2, #128	@ 0x80
 8002bbe:	701a      	strb	r2, [r3, #0]
				break;
 8002bc0:	f000 bc7c 	b.w	80034bc <main+0x20d4>
			}
//Ignition Key Switch but NO Ignition Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <main+0x18f4>)
 8002bc6:	2209      	movs	r2, #9
 8002bc8:	701a      	strb	r2, [r3, #0]
				break;
 8002bca:	f000 bc77 	b.w	80034bc <main+0x20d4>
			}
		}


//Both Keyswitches for N2O and O2 are triggered
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002bce:	4b42      	ldr	r3, [pc, #264]	@ (8002cd8 <main+0x18f0>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <main+0x1822>
				(state_local & O2_ISO_SW) == O2_ISO_SW) //error check if both ISO switches are triggered for N20 and O2
 8002bda:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd8 <main+0x18f0>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d011      	beq.n	8002c0a <main+0x1822>
		{
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002be6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce0 <main+0x18f8>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <main+0x1816>
 8002bee:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <main+0x18f4>)
 8002bf0:	220a      	movs	r2, #10
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <main+0x18f8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	f000 bc5f 	b.w	80034bc <main+0x20d4>
			else{__asm("NOP");}
 8002bfe:	bf00      	nop

			//if local dump flag has been triggered REGARDLESS of input control state!
			switch_case_state = 10;
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <main+0x18f4>)
 8002c02:	220a      	movs	r2, #10
 8002c04:	701a      	strb	r2, [r3, #0]
			break;
 8002c06:	f000 bc59 	b.w	80034bc <main+0x20d4>
		}


//N2O Keyswitch
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002c0a:	4b33      	ldr	r3, [pc, #204]	@ (8002cd8 <main+0x18f0>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d022      	beq.n	8002c5c <main+0x1874>
				(state_local & O2_ISO_SW) != O2_ISO_SW)
 8002c16:	4b30      	ldr	r3, [pc, #192]	@ (8002cd8 <main+0x18f0>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11c      	bne.n	8002c5c <main+0x1874>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002c22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <main+0x18f8>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <main+0x1852>
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <main+0x18f4>)
 8002c2c:	220a      	movs	r2, #10
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <main+0x18f8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	f000 bc41 	b.w	80034bc <main+0x20d4>
			else{__asm("NOP");}
 8002c3a:	bf00      	nop

//N2O Rotary Switch
			if((state_local& N2O_DEADMAN_SW) == N2O_DEADMAN_SW)
 8002c3c:	4b26      	ldr	r3, [pc, #152]	@ (8002cd8 <main+0x18f0>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <main+0x186a>
			{
				switch_case_state = 7; // N2O Fill State
 8002c48:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <main+0x18f4>)
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	701a      	strb	r2, [r3, #0]
				break;
 8002c4e:	f000 bc35 	b.w	80034bc <main+0x20d4>
			}
//N2O Keyswitch but NO N2O Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <main+0x18f4>)
 8002c54:	2209      	movs	r2, #9
 8002c56:	701a      	strb	r2, [r3, #0]
				break;
 8002c58:	f000 bc30 	b.w	80034bc <main+0x20d4>
			}
		}


//O2 Keyswitch
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <main+0x18f0>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d022      	beq.n	8002cae <main+0x18c6>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW)
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <main+0x18f0>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11c      	bne.n	8002cae <main+0x18c6>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002c74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <main+0x18f8>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <main+0x18a4>
 8002c7c:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <main+0x18f4>)
 8002c7e:	220a      	movs	r2, #10
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <main+0x18f8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	f000 bc18 	b.w	80034bc <main+0x20d4>
			else{__asm("NOP");}
 8002c8c:	bf00      	nop

//O2 Rotary Switch
			if((state_local & O2_DEADMAN_SW) == O2_DEADMAN_SW)
 8002c8e:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <main+0x18f0>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <main+0x18bc>
			{
				switch_case_state = 8;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <main+0x18f4>)
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	701a      	strb	r2, [r3, #0]
				break;
 8002ca0:	f000 bc0c 	b.w	80034bc <main+0x20d4>
			}
//O2 Keyswitch but NO O2 Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <main+0x18f4>)
 8002ca6:	2209      	movs	r2, #9
 8002ca8:	701a      	strb	r2, [r3, #0]
				break;
 8002caa:	f000 bc07 	b.w	80034bc <main+0x20d4>
		}

//If power is ON but other bits are off
		else
		{
			switch_case_state = 9; // Neutral state
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <main+0x18f4>)
 8002cb0:	2209      	movs	r2, #9
 8002cb2:	701a      	strb	r2, [r3, #0]
			break;
 8002cb4:	f000 bc02 	b.w	80034bc <main+0x20d4>
 8002cb8:	20000218 	.word	0x20000218
 8002cbc:	20000200 	.word	0x20000200
 8002cc0:	20000350 	.word	0x20000350
 8002cc4:	20000368 	.word	0x20000368
 8002cc8:	200001d0 	.word	0x200001d0
 8002ccc:	200001b8 	.word	0x200001b8
 8002cd0:	20000290 	.word	0x20000290
 8002cd4:	200002c0 	.word	0x200002c0
 8002cd8:	200000ca 	.word	0x200000ca
 8002cdc:	200000c8 	.word	0x200000c8
 8002ce0:	200000cf 	.word	0x200000cf

//**************************N2O FILL *************************************************************
	case 7:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee0 <main+0x1af8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	4b7d      	ldr	r3, [pc, #500]	@ (8002ee0 <main+0x1af8>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cf2:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee4 <main+0x1afc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ee4 <main+0x1afc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d02:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002d04:	4b78      	ldr	r3, [pc, #480]	@ (8002ee8 <main+0x1b00>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	4b77      	ldr	r3, [pc, #476]	@ (8002ee8 <main+0x1b00>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d12:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002d14:	4b75      	ldr	r3, [pc, #468]	@ (8002eec <main+0x1b04>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	4b74      	ldr	r3, [pc, #464]	@ (8002eec <main+0x1b04>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d22:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002d24:	4b72      	ldr	r3, [pc, #456]	@ (8002ef0 <main+0x1b08>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	4b71      	ldr	r3, [pc, #452]	@ (8002ef0 <main+0x1b08>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d32:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002d34:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef4 <main+0x1b0c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ef4 <main+0x1b0c>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d42:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 14;
 8002d44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <main+0x1b10>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8002efc <main+0x1b14>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <main+0x1b14>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d58:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002d5a:	4b69      	ldr	r3, [pc, #420]	@ (8002f00 <main+0x1b18>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	4b67      	ldr	r3, [pc, #412]	@ (8002f00 <main+0x1b18>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d68:	615a      	str	r2, [r3, #20]

		//Ensure O2 Fill is not filling
		led_o2.port->ODR &= ~(O2_LED);
 8002d6a:	4b66      	ldr	r3, [pc, #408]	@ (8002f04 <main+0x1b1c>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	4b64      	ldr	r3, [pc, #400]	@ (8002f04 <main+0x1b1c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d78:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002d7a:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <main+0x1b20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	4b61      	ldr	r3, [pc, #388]	@ (8002f08 <main+0x1b20>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d88:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8002d8a:	4b60      	ldr	r3, [pc, #384]	@ (8002f0c <main+0x1b24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <main+0x1b24>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d98:	615a      	str	r2, [r3, #20]

		//Ensure igntion is not igniting
		Ignition1_ARM.port->ODR &= ~(IGNITION1_ARM);
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f10 <main+0x1b28>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <main+0x1b28>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da8:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION1_OP);
 8002daa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f14 <main+0x1b2c>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <main+0x1b2c>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002db8:	615a      	str	r2, [r3, #20]

		//Enable N2O Fill
		led_n2o.port->ODR|=N2O_LED;
 8002dba:	4b57      	ldr	r3, [pc, #348]	@ (8002f18 <main+0x1b30>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	4b55      	ldr	r3, [pc, #340]	@ (8002f18 <main+0x1b30>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f042 0220 	orr.w	r2, r2, #32
 8002dc8:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR |= CH3_Arm;
 8002dca:	4b54      	ldr	r3, [pc, #336]	@ (8002f1c <main+0x1b34>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	4b52      	ldr	r3, [pc, #328]	@ (8002f1c <main+0x1b34>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dd8:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR |= CH3_Operate;
 8002dda:	4b51      	ldr	r3, [pc, #324]	@ (8002f20 <main+0x1b38>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f20 <main+0x1b38>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002de8:	615a      	str	r2, [r3, #20]
		switch_case_state = 0;
 8002dea:	4b4e      	ldr	r3, [pc, #312]	@ (8002f24 <main+0x1b3c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
		break;
 8002df0:	e364      	b.n	80034bc <main+0x20d4>

//**************************O2 FILL*************************************************************
	case 8:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002df2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <main+0x1af8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <main+0x1af8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e00:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002e02:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <main+0x1afc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <main+0x1afc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e10:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002e12:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <main+0x1b00>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	4b33      	ldr	r3, [pc, #204]	@ (8002ee8 <main+0x1b00>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e20:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002e22:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <main+0x1b04>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <main+0x1b04>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e30:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002e32:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef0 <main+0x1b08>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <main+0x1b08>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e40:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002e42:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef4 <main+0x1b0c>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <main+0x1b0c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e50:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 13;
 8002e52:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <main+0x1b10>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <main+0x1b14>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <main+0x1b14>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e66:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002e68:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <main+0x1b18>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <main+0x1b18>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e76:	615a      	str	r2, [r3, #20]

		//Ensure N2O Fill is not filling
		led_n2o.port->ODR &= ~(N2O_LED);
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <main+0x1b30>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	4b26      	ldr	r3, [pc, #152]	@ (8002f18 <main+0x1b30>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f022 0220 	bic.w	r2, r2, #32
 8002e86:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <main+0x1b34>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <main+0x1b34>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e96:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002e98:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <main+0x1b38>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <main+0x1b38>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea6:	615a      	str	r2, [r3, #20]

		//Enable O2 to flow
		led_o2.port->ODR|=O2_LED;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <main+0x1b1c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <main+0x1b1c>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb6:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR |= CH2_Arm;
 8002eb8:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <main+0x1b20>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <main+0x1b20>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ec6:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR |= CH2_Operate;
 8002ec8:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <main+0x1b24>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <main+0x1b24>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ed6:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8002ed8:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <main+0x1b3c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
		break;
 8002ede:	e2ed      	b.n	80034bc <main+0x20d4>
 8002ee0:	20000380 	.word	0x20000380
 8002ee4:	20000398 	.word	0x20000398
 8002ee8:	200003b0 	.word	0x200003b0
 8002eec:	200003c8 	.word	0x200003c8
 8002ef0:	200003e0 	.word	0x200003e0
 8002ef4:	200003f8 	.word	0x200003f8
 8002ef8:	200000cc 	.word	0x200000cc
 8002efc:	20000188 	.word	0x20000188
 8002f00:	20000170 	.word	0x20000170
 8002f04:	20000368 	.word	0x20000368
 8002f08:	200001d0 	.word	0x200001d0
 8002f0c:	200001b8 	.word	0x200001b8
 8002f10:	20000290 	.word	0x20000290
 8002f14:	200002a8 	.word	0x200002a8
 8002f18:	20000350 	.word	0x20000350
 8002f1c:	20000218 	.word	0x20000218
 8002f20:	20000200 	.word	0x20000200
 8002f24:	200000c8 	.word	0x200000c8

//**************************NEUTRAL STATE*************************************************************
	case 9:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8002f28:	4b8b      	ldr	r3, [pc, #556]	@ (8003158 <main+0x1d70>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8003158 <main+0x1d70>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f36:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002f38:	4b88      	ldr	r3, [pc, #544]	@ (800315c <main+0x1d74>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	4b87      	ldr	r3, [pc, #540]	@ (800315c <main+0x1d74>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f46:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8002f48:	4b85      	ldr	r3, [pc, #532]	@ (8003160 <main+0x1d78>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	4b84      	ldr	r3, [pc, #528]	@ (8003160 <main+0x1d78>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f56:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002f58:	4b82      	ldr	r3, [pc, #520]	@ (8003164 <main+0x1d7c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	4b81      	ldr	r3, [pc, #516]	@ (8003164 <main+0x1d7c>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f66:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002f68:	4b7f      	ldr	r3, [pc, #508]	@ (8003168 <main+0x1d80>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <main+0x1d80>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f76:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002f78:	4b7c      	ldr	r3, [pc, #496]	@ (800316c <main+0x1d84>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800316c <main+0x1d84>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f86:	615a      	str	r2, [r3, #20]


		//Turn OFF ignition coil relays
		Ignition1_ARM.port->ODR &= ~(IGNITION1_ARM);
 8002f88:	4b79      	ldr	r3, [pc, #484]	@ (8003170 <main+0x1d88>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	4b78      	ldr	r3, [pc, #480]	@ (8003170 <main+0x1d88>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f96:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002f98:	4b76      	ldr	r3, [pc, #472]	@ (8003174 <main+0x1d8c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b75      	ldr	r3, [pc, #468]	@ (8003174 <main+0x1d8c>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f022 0208 	bic.w	r2, r2, #8
 8002fa6:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION1_OP);
 8002fa8:	4b73      	ldr	r3, [pc, #460]	@ (8003178 <main+0x1d90>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	4b72      	ldr	r3, [pc, #456]	@ (8003178 <main+0x1d90>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fb6:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002fb8:	4b70      	ldr	r3, [pc, #448]	@ (800317c <main+0x1d94>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800317c <main+0x1d94>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	615a      	str	r2, [r3, #20]


		//Ensure PURGE is not purging
		CH1_OP.port->ODR |= (CH1_Operate);
 8002fc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003180 <main+0x1d98>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	4b6c      	ldr	r3, [pc, #432]	@ (8003180 <main+0x1d98>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fd6:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <main+0x1d9c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	4b69      	ldr	r3, [pc, #420]	@ (8003184 <main+0x1d9c>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fe6:	615a      	str	r2, [r3, #20]

		//Ensure N2O is not filling
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002fe8:	4b67      	ldr	r3, [pc, #412]	@ (8003188 <main+0x1da0>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b66      	ldr	r3, [pc, #408]	@ (8003188 <main+0x1da0>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ff6:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002ff8:	4b64      	ldr	r3, [pc, #400]	@ (800318c <main+0x1da4>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b63      	ldr	r3, [pc, #396]	@ (800318c <main+0x1da4>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003006:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8003008:	4b61      	ldr	r3, [pc, #388]	@ (8003190 <main+0x1da8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	4b60      	ldr	r3, [pc, #384]	@ (8003190 <main+0x1da8>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f022 0220 	bic.w	r2, r2, #32
 8003016:	615a      	str	r2, [r3, #20]

		//Ensure O2 is not filling
		led_o2.port->ODR &= ~(O2_LED);
 8003018:	4b5e      	ldr	r3, [pc, #376]	@ (8003194 <main+0x1dac>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	4b5d      	ldr	r3, [pc, #372]	@ (8003194 <main+0x1dac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003026:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003028:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <main+0x1db0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	4b5a      	ldr	r3, [pc, #360]	@ (8003198 <main+0x1db0>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003036:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8003038:	4b58      	ldr	r3, [pc, #352]	@ (800319c <main+0x1db4>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b57      	ldr	r3, [pc, #348]	@ (800319c <main+0x1db4>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003046:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8003048:	4b55      	ldr	r3, [pc, #340]	@ (80031a0 <main+0x1db8>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
		break;
 800304e:	e235      	b.n	80034bc <main+0x20d4>

//**************************PURGE STATE*************************************************************
	case 10:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8003050:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <main+0x1d70>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	4b40      	ldr	r3, [pc, #256]	@ (8003158 <main+0x1d70>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800305e:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8003060:	4b3e      	ldr	r3, [pc, #248]	@ (800315c <main+0x1d74>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <main+0x1d74>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306e:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8003070:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <main+0x1d78>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	4b3a      	ldr	r3, [pc, #232]	@ (8003160 <main+0x1d78>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800307e:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8003080:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <main+0x1d7c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	4b37      	ldr	r3, [pc, #220]	@ (8003164 <main+0x1d7c>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308e:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8003090:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <main+0x1d80>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <main+0x1d80>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309e:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 80030a0:	4b32      	ldr	r3, [pc, #200]	@ (800316c <main+0x1d84>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b31      	ldr	r3, [pc, #196]	@ (800316c <main+0x1d84>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	615a      	str	r2, [r3, #20]
		//Presuming relay 1 is the DUMP relay!
		//PURGE is NO -> output a low to purge
		//output a high to stop purging!

		//Ensure Ignition is not igniting
		Ignition1_ARM.port->ODR &= ~(IGNITION2_ARM);
 80030b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003170 <main+0x1d88>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003170 <main+0x1d88>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f022 0208 	bic.w	r2, r2, #8
 80030be:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION2_OP);
 80030c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003178 <main+0x1d90>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003178 <main+0x1d90>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	615a      	str	r2, [r3, #20]

		//Turn off N2O Solenoid and turn off LED
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 80030d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003188 <main+0x1da0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003188 <main+0x1da0>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030de:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 80030e0:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <main+0x1da4>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <main+0x1da4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ee:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 80030f0:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <main+0x1da8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	4b26      	ldr	r3, [pc, #152]	@ (8003190 <main+0x1da8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	615a      	str	r2, [r3, #20]

		//Turn off O2 Solenoid and turn off LED
		led_o2.port->ODR &= ~(O2_LED);
 8003100:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <main+0x1dac>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	4b23      	ldr	r3, [pc, #140]	@ (8003194 <main+0x1dac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800310e:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003110:	4b21      	ldr	r3, [pc, #132]	@ (8003198 <main+0x1db0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	4b20      	ldr	r3, [pc, #128]	@ (8003198 <main+0x1db0>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800311e:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8003120:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <main+0x1db4>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	4b1d      	ldr	r3, [pc, #116]	@ (800319c <main+0x1db4>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312e:	615a      	str	r2, [r3, #20]

		//Power off PURGE solenoid therefore starting purge
		CH1_ARM.port->ODR &= ~(CH1_Arm);
 8003130:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <main+0x1d9c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <main+0x1d9c>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800313e:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR &= ~(CH1_Operate);
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <main+0x1d98>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <main+0x1d98>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800314e:	615a      	str	r2, [r3, #20]

		switch_case_state = 0;
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <main+0x1db8>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
		break;
 8003156:	e1b1      	b.n	80034bc <main+0x20d4>
 8003158:	20000380 	.word	0x20000380
 800315c:	20000398 	.word	0x20000398
 8003160:	200003b0 	.word	0x200003b0
 8003164:	200003c8 	.word	0x200003c8
 8003168:	200003e0 	.word	0x200003e0
 800316c:	200003f8 	.word	0x200003f8
 8003170:	20000290 	.word	0x20000290
 8003174:	200002c0 	.word	0x200002c0
 8003178:	200002a8 	.word	0x200002a8
 800317c:	200002d8 	.word	0x200002d8
 8003180:	20000170 	.word	0x20000170
 8003184:	20000188 	.word	0x20000188
 8003188:	20000218 	.word	0x20000218
 800318c:	20000200 	.word	0x20000200
 8003190:	20000350 	.word	0x20000350
 8003194:	20000368 	.word	0x20000368
 8003198:	200001d0 	.word	0x200001d0
 800319c:	200001b8 	.word	0x200001b8
 80031a0:	200000c8 	.word	0x200000c8
  __ASM volatile ("cpsid i" : : : "memory");
 80031a4:	b672      	cpsid	i
}
 80031a6:	bf00      	nop

		//Disable IRQs - we are igniting, nothing can stop this....
		__disable_irq();

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 80031a8:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <main+0x1e60>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <main+0x1e60>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031b6:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 80031b8:	4b24      	ldr	r3, [pc, #144]	@ (800324c <main+0x1e64>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	4b23      	ldr	r3, [pc, #140]	@ (800324c <main+0x1e64>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c6:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <main+0x1e68>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <main+0x1e68>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d6:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <main+0x1e6c>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <main+0x1e6c>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e6:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <main+0x1e70>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <main+0x1e70>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031f6:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <main+0x1e74>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <main+0x1e74>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003206:	615a      	str	r2, [r3, #20]

		//Check O2 Fill status - as we check for igniton first in case 4 - we need to check O2 again to ensure that we actuate correctly
		if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 8003208:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <main+0x1e78>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02d      	beq.n	8003270 <main+0x1e88>
			//Turn ON O2 Solenoid and turn on LED
			led_o2.port->ODR |= (O2_LED);
 8003214:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <main+0x1e7c>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <main+0x1e7c>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003222:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm);
 8003224:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <main+0x1e80>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <main+0x1e80>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003232:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate);
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <main+0x1e84>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <main+0x1e84>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	e02c      	b.n	80032a0 <main+0x1eb8>
 8003246:	bf00      	nop
 8003248:	20000380 	.word	0x20000380
 800324c:	20000398 	.word	0x20000398
 8003250:	200003b0 	.word	0x200003b0
 8003254:	200003c8 	.word	0x200003c8
 8003258:	200003e0 	.word	0x200003e0
 800325c:	200003f8 	.word	0x200003f8
 8003260:	200000c9 	.word	0x200000c9
 8003264:	20000368 	.word	0x20000368
 8003268:	200001d0 	.word	0x200001d0
 800326c:	200001b8 	.word	0x200001b8
		}
		else {
			//Turn off O2 Solenoid and turn off LED
			led_o2.port->ODR &= ~(O2_LED);
 8003270:	4b93      	ldr	r3, [pc, #588]	@ (80034c0 <main+0x20d8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	4b92      	ldr	r3, [pc, #584]	@ (80034c0 <main+0x20d8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327e:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003280:	4b90      	ldr	r3, [pc, #576]	@ (80034c4 <main+0x20dc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	4b8f      	ldr	r3, [pc, #572]	@ (80034c4 <main+0x20dc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800328e:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 8003290:	4b8d      	ldr	r3, [pc, #564]	@ (80034c8 <main+0x20e0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	4b8c      	ldr	r3, [pc, #560]	@ (80034c8 <main+0x20e0>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329e:	615a      	str	r2, [r3, #20]
		}

		//Ensure N2O LED are OFF
		led_n2o.port->ODR &= ~(N2O_LED);
 80032a0:	4b8a      	ldr	r3, [pc, #552]	@ (80034cc <main+0x20e4>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	4b89      	ldr	r3, [pc, #548]	@ (80034cc <main+0x20e4>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f022 0220 	bic.w	r2, r2, #32
 80032ae:	615a      	str	r2, [r3, #20]

		//Ensure N2O solenoid is OFF
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 80032b0:	4b87      	ldr	r3, [pc, #540]	@ (80034d0 <main+0x20e8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	4b86      	ldr	r3, [pc, #536]	@ (80034d0 <main+0x20e8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032be:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 80032c0:	4b84      	ldr	r3, [pc, #528]	@ (80034d4 <main+0x20ec>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	4b83      	ldr	r3, [pc, #524]	@ (80034d4 <main+0x20ec>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ce:	615a      	str	r2, [r3, #20]

		//Ensure the DUMP solenoid is not dumping
		CH1_ARM.port->ODR |= (CH1_Arm);
 80032d0:	4b81      	ldr	r3, [pc, #516]	@ (80034d8 <main+0x20f0>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	4b80      	ldr	r3, [pc, #512]	@ (80034d8 <main+0x20f0>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032de:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 80032e0:	4b7e      	ldr	r3, [pc, #504]	@ (80034dc <main+0x20f4>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	4b7d      	ldr	r3, [pc, #500]	@ (80034dc <main+0x20f4>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032ee:	615a      	str	r2, [r3, #20]


		//Spark Generation Sequence, 5 sparks total
	//	Ignition1_ARM.port->ODR |= IGNITION1_ARM;
		//Ignition1_OP.port->ODR |= IGNITION1_OP;
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 80032f0:	4b7b      	ldr	r3, [pc, #492]	@ (80034e0 <main+0x20f8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	4b7a      	ldr	r3, [pc, #488]	@ (80034e0 <main+0x20f8>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f042 0208 	orr.w	r2, r2, #8
 80032fe:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8003300:	4b78      	ldr	r3, [pc, #480]	@ (80034e4 <main+0x20fc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b77      	ldr	r3, [pc, #476]	@ (80034e4 <main+0x20fc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f042 0204 	orr.w	r2, r2, #4
 800330e:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8003310:	201e      	movs	r0, #30
 8003312:	f001 f861 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8003316:	4b73      	ldr	r3, [pc, #460]	@ (80034e4 <main+0x20fc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	4b71      	ldr	r3, [pc, #452]	@ (80034e4 <main+0x20fc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f022 0204 	bic.w	r2, r2, #4
 8003324:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8003326:	4b6e      	ldr	r3, [pc, #440]	@ (80034e0 <main+0x20f8>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	4b6c      	ldr	r3, [pc, #432]	@ (80034e0 <main+0x20f8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8003336:	201e      	movs	r0, #30
 8003338:	f001 f84e 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 800333c:	4b69      	ldr	r3, [pc, #420]	@ (80034e4 <main+0x20fc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <main+0x20fc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f042 0204 	orr.w	r2, r2, #4
 800334a:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 800334c:	4b64      	ldr	r3, [pc, #400]	@ (80034e0 <main+0x20f8>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	4b63      	ldr	r3, [pc, #396]	@ (80034e0 <main+0x20f8>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f042 0208 	orr.w	r2, r2, #8
 800335a:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 800335c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003360:	f001 f83a 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8003364:	4b5f      	ldr	r3, [pc, #380]	@ (80034e4 <main+0x20fc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	4b5e      	ldr	r3, [pc, #376]	@ (80034e4 <main+0x20fc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f022 0204 	bic.w	r2, r2, #4
 8003372:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8003374:	4b5a      	ldr	r3, [pc, #360]	@ (80034e0 <main+0x20f8>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <main+0x20f8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f022 0208 	bic.w	r2, r2, #8
 8003382:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8003384:	201e      	movs	r0, #30
 8003386:	f001 f827 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 800338a:	4b56      	ldr	r3, [pc, #344]	@ (80034e4 <main+0x20fc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	4b54      	ldr	r3, [pc, #336]	@ (80034e4 <main+0x20fc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f042 0204 	orr.w	r2, r2, #4
 8003398:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 800339a:	4b51      	ldr	r3, [pc, #324]	@ (80034e0 <main+0x20f8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <main+0x20f8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 80033aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033ae:	f001 f813 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 80033b2:	4b4c      	ldr	r3, [pc, #304]	@ (80034e4 <main+0x20fc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <main+0x20fc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f022 0204 	bic.w	r2, r2, #4
 80033c0:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <main+0x20f8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	4b45      	ldr	r3, [pc, #276]	@ (80034e0 <main+0x20f8>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f022 0208 	bic.w	r2, r2, #8
 80033d0:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 80033d2:	201e      	movs	r0, #30
 80033d4:	f001 f800 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 80033d8:	4b42      	ldr	r3, [pc, #264]	@ (80034e4 <main+0x20fc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	4b41      	ldr	r3, [pc, #260]	@ (80034e4 <main+0x20fc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f042 0204 	orr.w	r2, r2, #4
 80033e6:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 80033e8:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <main+0x20f8>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	4b3c      	ldr	r3, [pc, #240]	@ (80034e0 <main+0x20f8>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 80033f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033fc:	f000 ffec 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8003400:	4b38      	ldr	r3, [pc, #224]	@ (80034e4 <main+0x20fc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	4b37      	ldr	r3, [pc, #220]	@ (80034e4 <main+0x20fc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8003410:	4b33      	ldr	r3, [pc, #204]	@ (80034e0 <main+0x20f8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	4b32      	ldr	r3, [pc, #200]	@ (80034e0 <main+0x20f8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f022 0208 	bic.w	r2, r2, #8
 800341e:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8003420:	201e      	movs	r0, #30
 8003422:	f000 ffd9 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8003426:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <main+0x20fc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <main+0x20fc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f042 0204 	orr.w	r2, r2, #4
 8003434:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8003436:	4b2a      	ldr	r3, [pc, #168]	@ (80034e0 <main+0x20f8>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <main+0x20f8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f042 0208 	orr.w	r2, r2, #8
 8003444:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8003446:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800344a:	f000 ffc5 	bl	80043d8 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 800344e:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <main+0x20fc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <main+0x20fc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f022 0204 	bic.w	r2, r2, #4
 800345c:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <main+0x20f8>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <main+0x20f8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 800346e:	201e      	movs	r0, #30
 8003470:	f000 ffb2 	bl	80043d8 <HAL_Delay>

		//Disarm Ignition circuit
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8003474:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <main+0x20f8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <main+0x20f8>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8003484:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <main+0x20fc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <main+0x20fc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f042 0204 	orr.w	r2, r2, #4
 8003492:	615a      	str	r2, [r3, #20]

		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8003494:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003498:	f000 ff9e 	bl	80043d8 <HAL_Delay>

		//Manually removes "ignition" state bit from last read LoRa packet info
		state &= ~(0x02 <<2); //this if more so for remote control 0bxxxx11xx become 0
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <main+0x2100>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f023 0308 	bic.w	r3, r3, #8
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <main+0x2100>)
 80034a8:	701a      	strb	r2, [r3, #0]
		switch_case_state = 0;
 80034aa:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <main+0x2104>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034b0:	b662      	cpsie	i
}
 80034b2:	bf00      	nop
		//turns of the ignite state once done!
		//state cannot be triggered more than once sequentially!
		__enable_irq();
		break;
 80034b4:	e002      	b.n	80034bc <main+0x20d4>
			break; //enter PURGE state
 80034b6:	bf00      	nop
 80034b8:	f7fe bc8e 	b.w	8001dd8 <main+0x9f0>
	switch(switch_case_state){
 80034bc:	f7fe bc8c 	b.w	8001dd8 <main+0x9f0>
 80034c0:	20000368 	.word	0x20000368
 80034c4:	200001d0 	.word	0x200001d0
 80034c8:	200001b8 	.word	0x200001b8
 80034cc:	20000350 	.word	0x20000350
 80034d0:	20000218 	.word	0x20000218
 80034d4:	20000200 	.word	0x20000200
 80034d8:	20000188 	.word	0x20000188
 80034dc:	20000170 	.word	0x20000170
 80034e0:	200002c0 	.word	0x200002c0
 80034e4:	200002d8 	.word	0x200002d8
 80034e8:	200000c9 	.word	0x200000c9
 80034ec:	200000c8 	.word	0x200000c8

080034f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
 **/
void SystemClock_Config(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b094      	sub	sp, #80	@ 0x50
 80034f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034f6:	f107 0320 	add.w	r3, r7, #32
 80034fa:	2230      	movs	r2, #48	@ 0x30
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 ff44 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003504:	f107 030c 	add.w	r3, r7, #12
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	4b2b      	ldr	r3, [pc, #172]	@ (80035c8 <SystemClock_Config+0xd8>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <SystemClock_Config+0xd8>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003522:	6413      	str	r3, [r2, #64]	@ 0x40
 8003524:	4b28      	ldr	r3, [pc, #160]	@ (80035c8 <SystemClock_Config+0xd8>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <SystemClock_Config+0xdc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a24      	ldr	r2, [pc, #144]	@ (80035cc <SystemClock_Config+0xdc>)
 800353a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b22      	ldr	r3, [pc, #136]	@ (80035cc <SystemClock_Config+0xdc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800354c:	2302      	movs	r3, #2
 800354e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003550:	2301      	movs	r3, #1
 8003552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003554:	2310      	movs	r3, #16
 8003556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003558:	2302      	movs	r3, #2
 800355a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800355c:	2300      	movs	r3, #0
 800355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003560:	2308      	movs	r3, #8
 8003562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003564:	23b4      	movs	r3, #180	@ 0xb4
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003568:	2302      	movs	r3, #2
 800356a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800356c:	2304      	movs	r3, #4
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003570:	f107 0320 	add.w	r3, r7, #32
 8003574:	4618      	mov	r0, r3
 8003576:	f002 fac5 	bl	8005b04 <HAL_RCC_OscConfig>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003580:	f000 fbcc 	bl	8003d1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003584:	f002 fa6e 	bl	8005a64 <HAL_PWREx_EnableOverDrive>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800358e:	f000 fbc5 	bl	8003d1c <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003592:	230f      	movs	r3, #15
 8003594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003596:	2302      	movs	r3, #2
 8003598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800359e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	2105      	movs	r1, #5
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 fd1f 	bl	8005ff4 <HAL_RCC_ClockConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80035bc:	f000 fbae 	bl	8003d1c <Error_Handler>
  }
}
 80035c0:	bf00      	nop
 80035c2:	3750      	adds	r7, #80	@ 0x50
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000

080035d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b08d      	sub	sp, #52	@ 0x34
 80035d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d6:	f107 031c 	add.w	r3, r7, #28
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	4b2c      	ldr	r3, [pc, #176]	@ (800369c <MX_GPIO_Init+0xcc>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <MX_GPIO_Init+0xcc>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b29      	ldr	r3, [pc, #164]	@ (800369c <MX_GPIO_Init+0xcc>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	4b25      	ldr	r3, [pc, #148]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	4a24      	ldr	r2, [pc, #144]	@ (800369c <MX_GPIO_Init+0xcc>)
 800360c:	f043 0320 	orr.w	r3, r3, #32
 8003610:	6313      	str	r3, [r2, #48]	@ 0x30
 8003612:	4b22      	ldr	r3, [pc, #136]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b1e      	ldr	r3, [pc, #120]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362c:	6313      	str	r3, [r2, #48]	@ 0x30
 800362e:	4b1b      	ldr	r3, [pc, #108]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b17      	ldr	r3, [pc, #92]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a16      	ldr	r2, [pc, #88]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b14      	ldr	r3, [pc, #80]	@ (800369c <MX_GPIO_Init+0xcc>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	4b10      	ldr	r3, [pc, #64]	@ (800369c <MX_GPIO_Init+0xcc>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a0f      	ldr	r2, [pc, #60]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <MX_GPIO_Init+0xcc>)
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	6313      	str	r3, [r2, #48]	@ 0x30
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <MX_GPIO_Init+0xcc>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]

}
 800368e:	bf00      	nop
 8003690:	3734      	adds	r7, #52	@ 0x34
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <MX_I2C2_Init>:


/* USER CODE BEGIN 4 */

static void MX_I2C2_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <MX_I2C2_Init+0x78>)
 80036a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80036aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036ac:	4a1b      	ldr	r2, [pc, #108]	@ (800371c <MX_I2C2_Init+0x7c>)
 80036ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036b0:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80036b6:	4b17      	ldr	r3, [pc, #92]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036bc:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c4:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036d0:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80036dc:	480d      	ldr	r0, [pc, #52]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036de:	f001 f94b 	bl	8004978 <HAL_I2C_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80036e8:	f000 fb18 	bl	8003d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036ec:	2100      	movs	r1, #0
 80036ee:	4809      	ldr	r0, [pc, #36]	@ (8003714 <MX_I2C2_Init+0x74>)
 80036f0:	f002 f93c 	bl	800596c <HAL_I2CEx_ConfigAnalogFilter>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80036fa:	f000 fb0f 	bl	8003d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80036fe:	2100      	movs	r1, #0
 8003700:	4804      	ldr	r0, [pc, #16]	@ (8003714 <MX_I2C2_Init+0x74>)
 8003702:	f002 f96f 	bl	80059e4 <HAL_I2CEx_ConfigDigitalFilter>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800370c:	f000 fb06 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000074 	.word	0x20000074
 8003718:	40005800 	.word	0x40005800
 800371c:	000186a0 	.word	0x000186a0

08003720 <TIM1_UP_TIM10_IRQHandler>:
  /** Configure Digital filter
  */


void TIM1_UP_TIM10_IRQHandler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	hardware_timer_count++;
 8003724:	4b32      	ldr	r3, [pc, #200]	@ (80037f0 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4b30      	ldr	r3, [pc, #192]	@ (80037f0 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 800372e:	701a      	strb	r2, [r3, #0]
	if(hardware_timer_count<5)
 8003730:	4b2f      	ldr	r3, [pc, #188]	@ (80037f0 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d806      	bhi.n	8003746 <TIM1_UP_TIM10_IRQHandler+0x26>
	{
		   //Hardware Timer interrupt callback for LoRa RX
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6113      	str	r3, [r2, #16]

		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
		hardware_timer_count = 0;
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
	}
}
 8003744:	e04f      	b.n	80037e6 <TIM1_UP_TIM10_IRQHandler+0xc6>
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8003746:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	4b2a      	ldr	r3, [pc, #168]	@ (80037f8 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003754:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8003756:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <TIM1_UP_TIM10_IRQHandler+0xdc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003764:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8003766:	4b26      	ldr	r3, [pc, #152]	@ (8003800 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f022 0220 	bic.w	r2, r2, #32
 8003774:	615a      	str	r2, [r3, #20]
		led_o2.port->ODR &= ~(O2_LED);
 8003776:	4b23      	ldr	r3, [pc, #140]	@ (8003804 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003784:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003794:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8003796:	4b1d      	ldr	r3, [pc, #116]	@ (800380c <TIM1_UP_TIM10_IRQHandler+0xec>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <TIM1_UP_TIM10_IRQHandler+0xec>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a4:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= CH1_Arm;
 80037a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003810 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037b4:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= CH1_Operate;
 80037b6:	4b17      	ldr	r3, [pc, #92]	@ (8003814 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c4:	615a      	str	r2, [r3, #20]
		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
 80037c6:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 80037d2:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	4a05      	ldr	r2, [pc, #20]	@ (80037f4 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6113      	str	r3, [r2, #16]
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	200000ce 	.word	0x200000ce
 80037f4:	40010000 	.word	0x40010000
 80037f8:	20000218 	.word	0x20000218
 80037fc:	20000200 	.word	0x20000200
 8003800:	20000350 	.word	0x20000350
 8003804:	20000368 	.word	0x20000368
 8003808:	200001d0 	.word	0x200001d0
 800380c:	200001b8 	.word	0x200001b8
 8003810:	20000188 	.word	0x20000188
 8003814:	20000170 	.word	0x20000170
 8003818:	200000c9 	.word	0x200000c9

0800381c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	HAL_Delay(2); //200us delay to prevent debouncing
 8003820:	2002      	movs	r0, #2
 8003822:	f000 fdd9 	bl	80043d8 <HAL_Delay>
   	if(EXTI->PR & EXTI_PR_PR1) //if the rising edge has been detected by pin 2
 8003826:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01d      	beq.n	800386e <EXTI1_IRQHandler+0x52>
   	{
   		EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8003832:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4a0f      	ldr	r2, [pc, #60]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003838:	f023 0302 	bic.w	r3, r3, #2
 800383c:	6153      	str	r3, [r2, #20]
   		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == LOCAL_CONTROL_SW)
 800383e:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <EXTI1_IRQHandler+0x5c>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800384c:	d109      	bne.n	8003862 <EXTI1_IRQHandler+0x46>
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4a08      	ldr	r2, [pc, #32]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003854:	f023 0302 	bic.w	r3, r3, #2
 8003858:	6153      	str	r3, [r2, #20]
			dump_flag = 1; //tells program manual dump flag has been set!
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <EXTI1_IRQHandler+0x60>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
   		else
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
   		}
   	}
}
 8003860:	e005      	b.n	800386e <EXTI1_IRQHandler+0x52>
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8003862:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	4a03      	ldr	r2, [pc, #12]	@ (8003874 <EXTI1_IRQHandler+0x58>)
 8003868:	f023 0302 	bic.w	r3, r3, #2
 800386c:	6153      	str	r3, [r2, #20]
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40013c00 	.word	0x40013c00
 8003878:	20000428 	.word	0x20000428
 800387c:	200000cf 	.word	0x200000cf

08003880 <EXTI3_IRQHandler>:


//ambient temperature alert!
void EXTI3_IRQHandler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  	if(EXTI->PR & EXTI_PR_PR3) //if the rising edge has been detected by pin 2
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <EXTI3_IRQHandler+0x28>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <EXTI3_IRQHandler+0x1c>
  	{
  		EXTI->PR &= ~EXTI_PR_PR3; //resets the flag
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <EXTI3_IRQHandler+0x28>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <EXTI3_IRQHandler+0x28>)
 8003896:	f023 0308 	bic.w	r3, r3, #8
 800389a:	6153      	str	r3, [r2, #20]
  		//do something here
  	}
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40013c00 	.word	0x40013c00

080038ac <EXTI9_5_IRQHandler>:



// LoRa DIO Interrupt
void EXTI9_5_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	   *  5) Proceed
	   */
	//  test_rx_interrupt++;
	 // uint8_t transmit_state = 0;
 	// SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
	EXTI->PR &= ~0x1F0; //resets the flag
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <EXTI9_5_IRQHandler+0x20>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <EXTI9_5_IRQHandler+0x20>)
 80038b6:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 80038ba:	6153      	str	r3, [r2, #20]
	triggerRX= true;
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <EXTI9_5_IRQHandler+0x24>)
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 80038c2:	2017      	movs	r0, #23
 80038c4:	f7fd fd42 	bl	800134c <__NVIC_DisableIRQ>

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40013c00 	.word	0x40013c00
 80038d0:	200000d2 	.word	0x200000d2

080038d4 <RX_Receive>:

void RX_Receive(void)
{
 80038d4:	b5b0      	push	{r4, r5, r7, lr}
 80038d6:	b08a      	sub	sp, #40	@ 0x28
 80038d8:	af00      	add	r7, sp, #0
	//__disable_irq(); //uncomment after testing!!
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 80038da:	2017      	movs	r0, #23
 80038dc:	f7fd fd36 	bl	800134c <__NVIC_DisableIRQ>
	//__NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn); //Disable IQR for LoRa Hardware Timer

	HAL_Delay(1000); //important!!
 80038e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038e4:	f000 fd78 	bl	80043d8 <HAL_Delay>


	bool RX_result = SX1272_readReceive(&lora, pointerdata, LORA_MSG_LENGTH);
 80038e8:	2220      	movs	r2, #32
 80038ea:	497e      	ldr	r1, [pc, #504]	@ (8003ae4 <RX_Receive+0x210>)
 80038ec:	487e      	ldr	r0, [pc, #504]	@ (8003ae8 <RX_Receive+0x214>)
 80038ee:	f7fd fc58 	bl	80011a2 <SX1272_readReceive>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	triggerRX = false;
 80038f8:	4b7c      	ldr	r3, [pc, #496]	@ (8003aec <RX_Receive+0x218>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
	GSE_Command.id= pointerdata[0];
 80038fe:	4b79      	ldr	r3, [pc, #484]	@ (8003ae4 <RX_Receive+0x210>)
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	4b7b      	ldr	r3, [pc, #492]	@ (8003af0 <RX_Receive+0x21c>)
 8003904:	701a      	strb	r2, [r3, #0]
	GSE_Command.data[0]= pointerdata[1];
 8003906:	4b77      	ldr	r3, [pc, #476]	@ (8003ae4 <RX_Receive+0x210>)
 8003908:	785a      	ldrb	r2, [r3, #1]
 800390a:	4b79      	ldr	r3, [pc, #484]	@ (8003af0 <RX_Receive+0x21c>)
 800390c:	705a      	strb	r2, [r3, #1]
	GSE_Command.data[1]= pointerdata[2];
 800390e:	4b75      	ldr	r3, [pc, #468]	@ (8003ae4 <RX_Receive+0x210>)
 8003910:	789a      	ldrb	r2, [r3, #2]
 8003912:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <RX_Receive+0x21c>)
 8003914:	709a      	strb	r2, [r3, #2]


	if(GSE_Command.id != 0x02)
 8003916:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <RX_Receive+0x21c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d00a      	beq.n	8003934 <RX_Receive+0x60>
	{
		lora_error = ERROR_INVALID_PACKET_ID;
 800391e:	4b75      	ldr	r3, [pc, #468]	@ (8003af4 <RX_Receive+0x220>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 8003924:	4b74      	ldr	r3, [pc, #464]	@ (8003af8 <RX_Receive+0x224>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b72      	ldr	r3, [pc, #456]	@ (8003af8 <RX_Receive+0x224>)
 800392e:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8003930:	bf00      	nop
		__asm("NOP");
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
	}


}
 8003932:	e1d7      	b.n	8003ce4 <RX_Receive+0x410>
	else if ((GSE_Command.data[0] & GSE_Command.data[1]) == 0x00)
 8003934:	4b6e      	ldr	r3, [pc, #440]	@ (8003af0 <RX_Receive+0x21c>)
 8003936:	785a      	ldrb	r2, [r3, #1]
 8003938:	4b6d      	ldr	r3, [pc, #436]	@ (8003af0 <RX_Receive+0x21c>)
 800393a:	789b      	ldrb	r3, [r3, #2]
 800393c:	4013      	ands	r3, r2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	f040 81c2 	bne.w	8003cca <RX_Receive+0x3f6>
		led_power.port->ODR |= PWR_LED; //Turn ON LED
 8003946:	4b6d      	ldr	r3, [pc, #436]	@ (8003afc <RX_Receive+0x228>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	4b6b      	ldr	r3, [pc, #428]	@ (8003afc <RX_Receive+0x228>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	615a      	str	r2, [r3, #20]
		lora_error_test++;
 8003956:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <RX_Receive+0x22c>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b68      	ldr	r3, [pc, #416]	@ (8003b00 <RX_Receive+0x22c>)
 8003960:	701a      	strb	r2, [r3, #0]
		state = GSE_Command.data[0];
 8003962:	4b63      	ldr	r3, [pc, #396]	@ (8003af0 <RX_Receive+0x21c>)
 8003964:	785a      	ldrb	r2, [r3, #1]
 8003966:	4b67      	ldr	r3, [pc, #412]	@ (8003b04 <RX_Receive+0x230>)
 8003968:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 800396a:	4b63      	ldr	r3, [pc, #396]	@ (8003af8 <RX_Receive+0x224>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
		uint8_t transmit_state = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		switch(TX_Packet_Flag)
 8003976:	4b64      	ldr	r3, [pc, #400]	@ (8003b08 <RX_Receive+0x234>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <RX_Receive+0xb2>
 800397e:	2b01      	cmp	r3, #1
 8003980:	f000 80d4 	beq.w	8003b2c <RX_Receive+0x258>
 8003984:	e170      	b.n	8003c68 <RX_Receive+0x394>
				packet = Dummy_Transmit();
 8003986:	4c61      	ldr	r4, [pc, #388]	@ (8003b0c <RX_Receive+0x238>)
 8003988:	463b      	mov	r3, r7
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fad0 	bl	8000f30 <Dummy_Transmit>
 8003990:	4625      	mov	r5, r4
 8003992:	463c      	mov	r4, r7
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	6861      	ldr	r1, [r4, #4]
 8003998:	68a2      	ldr	r2, [r4, #8]
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399e:	6920      	ldr	r0, [r4, #16]
 80039a0:	6961      	ldr	r1, [r4, #20]
 80039a2:	69a2      	ldr	r2, [r4, #24]
 80039a4:	69e3      	ldr	r3, [r4, #28]
 80039a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x06;
 80039a8:	4b58      	ldr	r3, [pc, #352]	@ (8003b0c <RX_Receive+0x238>)
 80039aa:	2206      	movs	r2, #6
 80039ac:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 80039ae:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <RX_Receive+0x21c>)
 80039b0:	785a      	ldrb	r2, [r3, #1]
 80039b2:	4b56      	ldr	r3, [pc, #344]	@ (8003b0c <RX_Receive+0x238>)
 80039b4:	705a      	strb	r2, [r3, #1]
				* floatPtr = (uint8_t *) &TRANSDUCER_1.read_value_bar;
 80039b6:	4b56      	ldr	r3, [pc, #344]	@ (8003b10 <RX_Receive+0x23c>)
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	701a      	strb	r2, [r3, #0]
				packet.data[1] = floatPtr[3];
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	78da      	ldrb	r2, [r3, #3]
 80039c2:	4b52      	ldr	r3, [pc, #328]	@ (8003b0c <RX_Receive+0x238>)
 80039c4:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	789a      	ldrb	r2, [r3, #2]
 80039ca:	4b50      	ldr	r3, [pc, #320]	@ (8003b0c <RX_Receive+0x238>)
 80039cc:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	785a      	ldrb	r2, [r3, #1]
 80039d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b0c <RX_Receive+0x238>)
 80039d4:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	4b4c      	ldr	r3, [pc, #304]	@ (8003b0c <RX_Receive+0x238>)
 80039dc:	715a      	strb	r2, [r3, #5]
				* floatPtr = (uint8_t *) &TRANSDUCER_2.read_value_bar;
 80039de:	4b4d      	ldr	r3, [pc, #308]	@ (8003b14 <RX_Receive+0x240>)
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	701a      	strb	r2, [r3, #0]
				packet.data[5] = floatPtr[3];
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	78da      	ldrb	r2, [r3, #3]
 80039ea:	4b48      	ldr	r3, [pc, #288]	@ (8003b0c <RX_Receive+0x238>)
 80039ec:	719a      	strb	r2, [r3, #6]
				packet.data[6] = floatPtr[2];
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	789a      	ldrb	r2, [r3, #2]
 80039f2:	4b46      	ldr	r3, [pc, #280]	@ (8003b0c <RX_Receive+0x238>)
 80039f4:	71da      	strb	r2, [r3, #7]
				packet.data[7] = floatPtr[1];
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	785a      	ldrb	r2, [r3, #1]
 80039fa:	4b44      	ldr	r3, [pc, #272]	@ (8003b0c <RX_Receive+0x238>)
 80039fc:	721a      	strb	r2, [r3, #8]
				packet.data[8] = floatPtr[0];
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b42      	ldr	r3, [pc, #264]	@ (8003b0c <RX_Receive+0x238>)
 8003a04:	725a      	strb	r2, [r3, #9]
				* floatPtr = (uint8_t *) &TRANSDUCER_3.read_value_bar;
 8003a06:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <RX_Receive+0x244>)
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	701a      	strb	r2, [r3, #0]
				packet.data[9] = floatPtr[3];
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	78da      	ldrb	r2, [r3, #3]
 8003a12:	4b3e      	ldr	r3, [pc, #248]	@ (8003b0c <RX_Receive+0x238>)
 8003a14:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	789a      	ldrb	r2, [r3, #2]
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b0c <RX_Receive+0x238>)
 8003a1c:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	785a      	ldrb	r2, [r3, #1]
 8003a22:	4b3a      	ldr	r3, [pc, #232]	@ (8003b0c <RX_Receive+0x238>)
 8003a24:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <RX_Receive+0x238>)
 8003a2c:	735a      	strb	r2, [r3, #13]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_1.temp;
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b1c <RX_Receive+0x248>)
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	701a      	strb	r2, [r3, #0]
				packet.data[13] = floatPtr[3];
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	78da      	ldrb	r2, [r3, #3]
 8003a3a:	4b34      	ldr	r3, [pc, #208]	@ (8003b0c <RX_Receive+0x238>)
 8003a3c:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	789a      	ldrb	r2, [r3, #2]
 8003a42:	4b32      	ldr	r3, [pc, #200]	@ (8003b0c <RX_Receive+0x238>)
 8003a44:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	785a      	ldrb	r2, [r3, #1]
 8003a4a:	4b30      	ldr	r3, [pc, #192]	@ (8003b0c <RX_Receive+0x238>)
 8003a4c:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	4b2e      	ldr	r3, [pc, #184]	@ (8003b0c <RX_Receive+0x238>)
 8003a54:	745a      	strb	r2, [r3, #17]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_2.temp;
 8003a56:	4b32      	ldr	r3, [pc, #200]	@ (8003b20 <RX_Receive+0x24c>)
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	701a      	strb	r2, [r3, #0]
				packet.data[17] = floatPtr[3];
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	78da      	ldrb	r2, [r3, #3]
 8003a62:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <RX_Receive+0x238>)
 8003a64:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	789a      	ldrb	r2, [r3, #2]
 8003a6a:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <RX_Receive+0x238>)
 8003a6c:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	785a      	ldrb	r2, [r3, #1]
 8003a72:	4b26      	ldr	r3, [pc, #152]	@ (8003b0c <RX_Receive+0x238>)
 8003a74:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	4b24      	ldr	r3, [pc, #144]	@ (8003b0c <RX_Receive+0x238>)
 8003a7c:	755a      	strb	r2, [r3, #21]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_3.temp;
 8003a7e:	4b29      	ldr	r3, [pc, #164]	@ (8003b24 <RX_Receive+0x250>)
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	701a      	strb	r2, [r3, #0]
				packet.data[21] = floatPtr[3];
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	78da      	ldrb	r2, [r3, #3]
 8003a8a:	4b20      	ldr	r3, [pc, #128]	@ (8003b0c <RX_Receive+0x238>)
 8003a8c:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	789a      	ldrb	r2, [r3, #2]
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <RX_Receive+0x238>)
 8003a94:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	785a      	ldrb	r2, [r3, #1]
 8003a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <RX_Receive+0x238>)
 8003a9c:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <RX_Receive+0x238>)
 8003aa4:	765a      	strb	r2, [r3, #25]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_4.temp;
 8003aa6:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <RX_Receive+0x254>)
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	701a      	strb	r2, [r3, #0]
				packet.data[25] = floatPtr[3];
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	78da      	ldrb	r2, [r3, #3]
 8003ab2:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <RX_Receive+0x238>)
 8003ab4:	769a      	strb	r2, [r3, #26]
				packet.data[26] = floatPtr[2];
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	789a      	ldrb	r2, [r3, #2]
 8003aba:	4b14      	ldr	r3, [pc, #80]	@ (8003b0c <RX_Receive+0x238>)
 8003abc:	76da      	strb	r2, [r3, #27]
				packet.data[27] = floatPtr[1];
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	785a      	ldrb	r2, [r3, #1]
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <RX_Receive+0x238>)
 8003ac4:	771a      	strb	r2, [r3, #28]
				packet.data[28] = floatPtr[0];
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <RX_Receive+0x238>)
 8003acc:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <RX_Receive+0x238>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <RX_Receive+0x238>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 1;
 8003ada:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <RX_Receive+0x234>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
				break;
 8003ae0:	e0c5      	b.n	8003c6e <RX_Receive+0x39a>
 8003ae2:	bf00      	nop
 8003ae4:	200000d4 	.word	0x200000d4
 8003ae8:	200000f8 	.word	0x200000f8
 8003aec:	200000d2 	.word	0x200000d2
 8003af0:	20000138 	.word	0x20000138
 8003af4:	200000d1 	.word	0x200000d1
 8003af8:	200000ce 	.word	0x200000ce
 8003afc:	200002f0 	.word	0x200002f0
 8003b00:	200000f4 	.word	0x200000f4
 8003b04:	200000c9 	.word	0x200000c9
 8003b08:	200000d0 	.word	0x200000d0
 8003b0c:	20000118 	.word	0x20000118
 8003b10:	20000550 	.word	0x20000550
 8003b14:	2000055c 	.word	0x2000055c
 8003b18:	20000568 	.word	0x20000568
 8003b1c:	20000018 	.word	0x20000018
 8003b20:	20000020 	.word	0x20000020
 8003b24:	20000028 	.word	0x20000028
 8003b28:	20000030 	.word	0x20000030
				packet = Dummy_Transmit();
 8003b2c:	4c6f      	ldr	r4, [pc, #444]	@ (8003cec <RX_Receive+0x418>)
 8003b2e:	463b      	mov	r3, r7
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd f9fd 	bl	8000f30 <Dummy_Transmit>
 8003b36:	4625      	mov	r5, r4
 8003b38:	463c      	mov	r4, r7
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	6861      	ldr	r1, [r4, #4]
 8003b3e:	68a2      	ldr	r2, [r4, #8]
 8003b40:	68e3      	ldr	r3, [r4, #12]
 8003b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b44:	6920      	ldr	r0, [r4, #16]
 8003b46:	6961      	ldr	r1, [r4, #20]
 8003b48:	69a2      	ldr	r2, [r4, #24]
 8003b4a:	69e3      	ldr	r3, [r4, #28]
 8003b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x07;
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <RX_Receive+0x418>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 8003b54:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <RX_Receive+0x41c>)
 8003b56:	785a      	ldrb	r2, [r3, #1]
 8003b58:	4b64      	ldr	r3, [pc, #400]	@ (8003cec <RX_Receive+0x418>)
 8003b5a:	705a      	strb	r2, [r3, #1]
				* floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 8003b5c:	4b65      	ldr	r3, [pc, #404]	@ (8003cf4 <RX_Receive+0x420>)
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	701a      	strb	r2, [r3, #0]
				packet.data[1] = floatPtr[3];
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	78da      	ldrb	r2, [r3, #3]
 8003b68:	4b60      	ldr	r3, [pc, #384]	@ (8003cec <RX_Receive+0x418>)
 8003b6a:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	789a      	ldrb	r2, [r3, #2]
 8003b70:	4b5e      	ldr	r3, [pc, #376]	@ (8003cec <RX_Receive+0x418>)
 8003b72:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	785a      	ldrb	r2, [r3, #1]
 8003b78:	4b5c      	ldr	r3, [pc, #368]	@ (8003cec <RX_Receive+0x418>)
 8003b7a:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	4b5a      	ldr	r3, [pc, #360]	@ (8003cec <RX_Receive+0x418>)
 8003b82:	715a      	strb	r2, [r3, #5]
				packet.data[5] = 0x00;
 8003b84:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <RX_Receive+0x418>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	719a      	strb	r2, [r3, #6]
				packet.data[6] = 0x00;
 8003b8a:	4b58      	ldr	r3, [pc, #352]	@ (8003cec <RX_Receive+0x418>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	71da      	strb	r2, [r3, #7]
				packet.data[7] = 0x00;
 8003b90:	4b56      	ldr	r3, [pc, #344]	@ (8003cec <RX_Receive+0x418>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	721a      	strb	r2, [r3, #8]
				packet.data[8] = 0x00;
 8003b96:	4b55      	ldr	r3, [pc, #340]	@ (8003cec <RX_Receive+0x418>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	725a      	strb	r2, [r3, #9]
				* floatPtr = (uint8_t *) &LOADCELL_1.read_value_weight;
 8003b9c:	4b56      	ldr	r3, [pc, #344]	@ (8003cf8 <RX_Receive+0x424>)
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	701a      	strb	r2, [r3, #0]
				packet.data[9] = floatPtr[3];
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	78da      	ldrb	r2, [r3, #3]
 8003ba8:	4b50      	ldr	r3, [pc, #320]	@ (8003cec <RX_Receive+0x418>)
 8003baa:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	789a      	ldrb	r2, [r3, #2]
 8003bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8003cec <RX_Receive+0x418>)
 8003bb2:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	785a      	ldrb	r2, [r3, #1]
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cec <RX_Receive+0x418>)
 8003bba:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <RX_Receive+0x418>)
 8003bc2:	735a      	strb	r2, [r3, #13]
				* floatPtr = (uint8_t *) &LOADCELL_2.read_value_weight;
 8003bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <RX_Receive+0x428>)
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	701a      	strb	r2, [r3, #0]
				packet.data[13] = floatPtr[3];
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	78da      	ldrb	r2, [r3, #3]
 8003bd0:	4b46      	ldr	r3, [pc, #280]	@ (8003cec <RX_Receive+0x418>)
 8003bd2:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	789a      	ldrb	r2, [r3, #2]
 8003bd8:	4b44      	ldr	r3, [pc, #272]	@ (8003cec <RX_Receive+0x418>)
 8003bda:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	785a      	ldrb	r2, [r3, #1]
 8003be0:	4b42      	ldr	r3, [pc, #264]	@ (8003cec <RX_Receive+0x418>)
 8003be2:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	4b40      	ldr	r3, [pc, #256]	@ (8003cec <RX_Receive+0x418>)
 8003bea:	745a      	strb	r2, [r3, #17]
				* floatPtr = (uint8_t *) &LOADCELL_3.read_value_weight;
 8003bec:	4b44      	ldr	r3, [pc, #272]	@ (8003d00 <RX_Receive+0x42c>)
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	701a      	strb	r2, [r3, #0]
				packet.data[17] = floatPtr[3];
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	78da      	ldrb	r2, [r3, #3]
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cec <RX_Receive+0x418>)
 8003bfa:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	789a      	ldrb	r2, [r3, #2]
 8003c00:	4b3a      	ldr	r3, [pc, #232]	@ (8003cec <RX_Receive+0x418>)
 8003c02:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	785a      	ldrb	r2, [r3, #1]
 8003c08:	4b38      	ldr	r3, [pc, #224]	@ (8003cec <RX_Receive+0x418>)
 8003c0a:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <RX_Receive+0x418>)
 8003c12:	755a      	strb	r2, [r3, #21]
				* floatPtr = (uint8_t *) &LOADCELL_4.read_value_weight;
 8003c14:	4b3b      	ldr	r3, [pc, #236]	@ (8003d04 <RX_Receive+0x430>)
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	701a      	strb	r2, [r3, #0]
				packet.data[21] = floatPtr[3];
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	78da      	ldrb	r2, [r3, #3]
 8003c20:	4b32      	ldr	r3, [pc, #200]	@ (8003cec <RX_Receive+0x418>)
 8003c22:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	789a      	ldrb	r2, [r3, #2]
 8003c28:	4b30      	ldr	r3, [pc, #192]	@ (8003cec <RX_Receive+0x418>)
 8003c2a:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	785a      	ldrb	r2, [r3, #1]
 8003c30:	4b2e      	ldr	r3, [pc, #184]	@ (8003cec <RX_Receive+0x418>)
 8003c32:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <RX_Receive+0x418>)
 8003c3a:	765a      	strb	r2, [r3, #25]
				packet.data[25] = 0x00;
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <RX_Receive+0x418>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	769a      	strb	r2, [r3, #26]
				packet.data[26] = 0x00;
 8003c42:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <RX_Receive+0x418>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	76da      	strb	r2, [r3, #27]
				packet.data[27] = 0x00;
 8003c48:	4b28      	ldr	r3, [pc, #160]	@ (8003cec <RX_Receive+0x418>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	771a      	strb	r2, [r3, #28]
				packet.data[28] = 0x00;
 8003c4e:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <RX_Receive+0x418>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <RX_Receive+0x418>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 8003c5a:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <RX_Receive+0x418>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 0;
 8003c60:	4b29      	ldr	r3, [pc, #164]	@ (8003d08 <RX_Receive+0x434>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
				break;
 8003c66:	e002      	b.n	8003c6e <RX_Receive+0x39a>
				lora_error = ERROR_SYSTEM_STATE_FAILED;
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <RX_Receive+0x438>)
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	701a      	strb	r2, [r3, #0]
		RF_SW.port->ODR &= ~(GPIO_ODR_OD10);
 8003c6e:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <RX_Receive+0x43c>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	4b26      	ldr	r3, [pc, #152]	@ (8003d10 <RX_Receive+0x43c>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7c:	615a      	str	r2, [r3, #20]
		SX1272_transmit(&lora, (uint8_t*) &packet);
 8003c7e:	491b      	ldr	r1, [pc, #108]	@ (8003cec <RX_Receive+0x418>)
 8003c80:	4824      	ldr	r0, [pc, #144]	@ (8003d14 <RX_Receive+0x440>)
 8003c82:	f7fd fa2f 	bl	80010e4 <SX1272_transmit>
	  		transmit_state = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 8003c86:	2112      	movs	r1, #18
 8003c88:	4822      	ldr	r0, [pc, #136]	@ (8003d14 <RX_Receive+0x440>)
 8003c8a:	f7fd fb0b 	bl	80012a4 <SX1272_readRegister>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	  	}while((transmit_state & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 8003c94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f2      	beq.n	8003c86 <RX_Receive+0x3b2>
	  	RF_SW.port->ODR |= (GPIO_ODR_OD10);
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <RX_Receive+0x43c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <RX_Receive+0x43c>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cae:	615a      	str	r2, [r3, #20]
	  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	2112      	movs	r1, #18
 8003cb4:	4817      	ldr	r0, [pc, #92]	@ (8003d14 <RX_Receive+0x440>)
 8003cb6:	f7fd fac1 	bl	800123c <SX1272_writeRegister>
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 8003cba:	2105      	movs	r1, #5
 8003cbc:	4815      	ldr	r0, [pc, #84]	@ (8003d14 <RX_Receive+0x440>)
 8003cbe:	f7fd f99d 	bl	8000ffc <_SX1272_setMode>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cc2:	2017      	movs	r0, #23
 8003cc4:	f7fd fb24 	bl	8001310 <__NVIC_EnableIRQ>
}
 8003cc8:	e00c      	b.n	8003ce4 <RX_Receive+0x410>
		lora_error = ERROR_INVALID_PACKET_DATA;
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <RX_Receive+0x438>)
 8003ccc:	2202      	movs	r2, #2
 8003cce:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <RX_Receive+0x444>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <RX_Receive+0x444>)
 8003cda:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8003cdc:	bf00      	nop
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cde:	2017      	movs	r0, #23
 8003ce0:	f7fd fb16 	bl	8001310 <__NVIC_EnableIRQ>
}
 8003ce4:	bf00      	nop
 8003ce6:	3728      	adds	r7, #40	@ 0x28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bdb0      	pop	{r4, r5, r7, pc}
 8003cec:	20000118 	.word	0x20000118
 8003cf0:	20000138 	.word	0x20000138
 8003cf4:	20000010 	.word	0x20000010
 8003cf8:	20000580 	.word	0x20000580
 8003cfc:	2000058c 	.word	0x2000058c
 8003d00:	20000598 	.word	0x20000598
 8003d04:	200005a4 	.word	0x200005a4
 8003d08:	200000d0 	.word	0x200000d0
 8003d0c:	200000d1 	.word	0x200000d1
 8003d10:	200004e8 	.word	0x200004e8
 8003d14:	200000f8 	.word	0x200000f8
 8003d18:	200000ce 	.word	0x200000ce

08003d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
}
 8003d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {__asm("NOP");}
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <Error_Handler+0x8>

08003d28 <get_temp>:





i2c_comms_result get_temp(TEMP_SENSE *temp_sense){
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b090      	sub	sp, #64	@ 0x40
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]

	i2c_comms_result result;

	//If its not a thermocouple, its the SMD temp sense
	if(temp_sense -> thermocouple_type == 0x00){
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	78db      	ldrb	r3, [r3, #3]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d154      	bne.n	8003de4 <get_temp+0xbc>

		uint8_t buf[4];
		buf[0] = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	743b      	strb	r3, [r7, #16]
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, temp_sense -> ADDR, buf[0], 1, 100);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	4619      	mov	r1, r3
 8003d44:	7c3b      	ldrb	r3, [r7, #16]
 8003d46:	461a      	mov	r2, r3
 8003d48:	2364      	movs	r3, #100	@ 0x64
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	485d      	ldr	r0, [pc, #372]	@ (8003ec4 <get_temp+0x19c>)
 8003d50:	f000 ff56 	bl	8004c00 <HAL_I2C_Master_Transmit>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (ret != HAL_OK){
 8003d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <get_temp+0x40>
			  result.comms_ok = false;
 8003d62:	2300      	movs	r3, #0
 8003d64:	753b      	strb	r3, [r7, #20]
 8003d66:	e09e      	b.n	8003ea6 <get_temp+0x17e>
		}
		else {
			  ret = HAL_I2C_Master_Receive(&hi2c2, temp_sense -> ADDR, result.return_value, 2, 100);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	2364      	movs	r3, #100	@ 0x64
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2302      	movs	r3, #2
 8003d7a:	4852      	ldr	r0, [pc, #328]	@ (8003ec4 <get_temp+0x19c>)
 8003d7c:	f001 f83e 	bl	8004dfc <HAL_I2C_Master_Receive>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			  if (ret != HAL_OK){
 8003d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <get_temp+0x6c>
				  result.comms_ok = false;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	753b      	strb	r3, [r7, #20]
 8003d92:	e088      	b.n	8003ea6 <get_temp+0x17e>
			  }
			  else{

				  uint16_t val = ((int16_t)result.return_value[0]<<4) | (result.return_value[1] >> 4);
 8003d94:	7dbb      	ldrb	r3, [r7, #22]
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	b21a      	sxth	r2, r3
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				  float temp = val/16;
 8003daa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db8:	edc7 7a03 	vstr	s15, [r7, #12]
				  uint8_t * tempPointer = (uint8_t *) &temp;
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
				  result.return_value[0] = tempPointer[0];
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	75bb      	strb	r3, [r7, #22]
				  result.return_value[1] = tempPointer[1];
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	75fb      	strb	r3, [r7, #23]
				  result.return_value[2] = tempPointer[2];
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	763b      	strb	r3, [r7, #24]
				  result.return_value[3] = tempPointer[3];
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	78db      	ldrb	r3, [r3, #3]
 8003dd8:	767b      	strb	r3, [r7, #25]
				  result.return_length = 0x04;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	757b      	strb	r3, [r7, #21]

				  result.comms_ok = true;
 8003dde:	2301      	movs	r3, #1
 8003de0:	753b      	strb	r3, [r7, #20]
 8003de2:	e060      	b.n	8003ea6 <get_temp+0x17e>
	}

	//Its got a thermocouple type, therefore, lets get the thermocouple hot junc temp
	else{
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, (temp_sense -> ADDR | 0x00), 0x00, 1, 100); //Write to thermocouple IC, to move pointer to hot junc reg
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2364      	movs	r3, #100	@ 0x64
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	2301      	movs	r3, #1
 8003df0:	2200      	movs	r2, #0
 8003df2:	4834      	ldr	r0, [pc, #208]	@ (8003ec4 <get_temp+0x19c>)
 8003df4:	f000 ff04 	bl	8004c00 <HAL_I2C_Master_Transmit>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (ret != HAL_OK){
 8003dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <get_temp+0xe4>
			result.comms_ok = false;
 8003e06:	2300      	movs	r3, #0
 8003e08:	753b      	strb	r3, [r7, #20]
 8003e0a:	e04c      	b.n	8003ea6 <get_temp+0x17e>
		}
		else {
			ret = HAL_I2C_Master_Receive(&hi2c2, (temp_sense -> ADDR | 0x01), result.return_value, 2, 100);	//Read 2 bytes from the hot junc reg into return val
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	2364      	movs	r3, #100	@ 0x64
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2302      	movs	r3, #2
 8003e24:	4827      	ldr	r0, [pc, #156]	@ (8003ec4 <get_temp+0x19c>)
 8003e26:	f000 ffe9 	bl	8004dfc <HAL_I2C_Master_Receive>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (ret != HAL_OK){
 8003e30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <get_temp+0x116>
				result.comms_ok = false;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	753b      	strb	r3, [r7, #20]
 8003e3c:	e033      	b.n	8003ea6 <get_temp+0x17e>
			}
			else{

				uint16_t val = ((int16_t)result.return_value[0] * 16) | (result.return_value[1]);
 8003e3e:	7dbb      	ldrb	r3, [r7, #22]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	b21a      	sxth	r2, r3
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
				float temp = val/16;
 8003e50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5e:	edc7 7a02 	vstr	s15, [r7, #8]
				if ((result.return_value[0] & 0x80) == 0x80){ //If the temp is < 0deg
 8003e62:	7dbb      	ldrb	r3, [r7, #22]
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da08      	bge.n	8003e7c <get_temp+0x154>
					temp = temp - 4096;
 8003e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e6e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003ec8 <get_temp+0x1a0>
 8003e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e76:	edc7 7a02 	vstr	s15, [r7, #8]
 8003e7a:	e001      	b.n	8003e80 <get_temp+0x158>
				}
				else{
					temp = temp; //If temp is >= 0deg, dont need to do anything
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]
				}

				uint8_t * tempPointer = (uint8_t *) &temp;
 8003e80:	f107 0308 	add.w	r3, r7, #8
 8003e84:	633b      	str	r3, [r7, #48]	@ 0x30
				result.return_value[0] = tempPointer[0];
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	75bb      	strb	r3, [r7, #22]
				result.return_value[1] = tempPointer[1];
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	75fb      	strb	r3, [r7, #23]
				result.return_value[2] = tempPointer[2];
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	789b      	ldrb	r3, [r3, #2]
 8003e96:	763b      	strb	r3, [r7, #24]
				result.return_value[3] = tempPointer[3];
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	767b      	strb	r3, [r7, #25]
				result.return_length = 0x04;
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	757b      	strb	r3, [r7, #21]

				result.comms_ok = true;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	753b      	strb	r3, [r7, #20]
			}
		}
	}


	return result;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	461d      	mov	r5, r3
 8003eaa:	f107 0414 	add.w	r4, r7, #20
 8003eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb0:	6028      	str	r0, [r5, #0]
 8003eb2:	6069      	str	r1, [r5, #4]
 8003eb4:	60aa      	str	r2, [r5, #8]
 8003eb6:	60eb      	str	r3, [r5, #12]
 8003eb8:	8823      	ldrh	r3, [r4, #0]
 8003eba:	822b      	strh	r3, [r5, #16]

};
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	3738      	adds	r7, #56	@ 0x38
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec4:	20000074 	.word	0x20000074
 8003ec8:	45800000 	.word	0x45800000

08003ecc <SPI_init>:
 *                   configuration.
 *
 * @return spi       Initialised SPI_t struct.
 **
 * =============================================================================== */
SPI_t SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 8003ecc:	b5b0      	push	{r4, r5, r7, lr}
 8003ece:	b090      	sub	sp, #64	@ 0x40
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  // Early return error struct if peripheral is NULL
  if (interface == NULL)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <SPI_init+0x26>
    return (SPI_t){.interface = NULL};
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	6053      	str	r3, [r2, #4]
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
 8003eec:	6113      	str	r3, [r2, #16]
 8003eee:	6153      	str	r3, [r2, #20]
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
  spi.transmit     = SPI_transmit;
  spi.updateConfig = SPI_updateConfig;

  return spi;
}
 8003ef0:	e034      	b.n	8003f5c <SPI_init+0x90>
  SPI_t spi = {.interface = interface};
 8003ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	615a      	str	r2, [r3, #20]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_updateConfig(&spi, config);
 8003f08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f8df 	bl	80040d2 <SPI_updateConfig>
  spi.send         = (spi.config.DFF == SPI_DFF8) ? SPI_send8 : SPI_send16;
 8003f14:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <SPI_init+0x5a>
 8003f22:	4b10      	ldr	r3, [pc, #64]	@ (8003f64 <SPI_init+0x98>)
 8003f24:	e000      	b.n	8003f28 <SPI_init+0x5c>
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <SPI_init+0x9c>)
 8003f28:	633b      	str	r3, [r7, #48]	@ 0x30
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
 8003f2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <SPI_init+0x70>
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <SPI_init+0xa0>)
 8003f3a:	e000      	b.n	8003f3e <SPI_init+0x72>
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <SPI_init+0xa4>)
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  spi.transmit     = SPI_transmit;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <SPI_init+0xa8>)
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  spi.updateConfig = SPI_updateConfig;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <SPI_init+0xac>)
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return spi;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f58:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	3740      	adds	r7, #64	@ 0x40
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bdb0      	pop	{r4, r5, r7, pc}
 8003f64:	0800400b 	.word	0x0800400b
 8003f68:	0800403d 	.word	0x0800403d
 8003f6c:	0800406d 	.word	0x0800406d
 8003f70:	080040a1 	.word	0x080040a1
 8003f74:	08003fc9 	.word	0x08003fc9
 8003f78:	080040d3 	.word	0x080040d3

08003f7c <_SPI_init>:
 *                    configuration. @see SPI_Config
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
static void _SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  // Wait for any ongoing transactions to finish
  while (interface->SR & SPI_SR_BSY);
 8003f86:	bf00      	nop
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f9      	bne.n	8003f88 <_SPI_init+0xc>

  // Disable peripheral and update config
  config->SPE    = false;               // Make sure SPE is disabled in config
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	7813      	ldrb	r3, [r2, #0]
 8003f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f9c:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with configured values
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	601a      	str	r2, [r3, #0]

  // Re-enable peripheral
  config->SPE    = true;                // Set SPE back to true
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	7813      	ldrb	r3, [r2, #0]
 8003fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fb0:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with SPE enabled
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <SPI_transmit>:
 * @param  data 		Data payload to be sent to slave device.
 *
 * @retval response Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI_t *spi, uint16_t data) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response;
  spi->send(spi, data);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
  spi->receive(spi, &response);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f107 020e 	add.w	r2, r7, #14
 8003fe8:	4611      	mov	r1, r2
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 8003fee:	bf00      	nop
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f8      	bne.n	8003ff0 <SPI_transmit+0x28>
  return response;
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	b29b      	uxth	r3, r3
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <SPI_send8>:
 * @param  data The data to send.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI_t *spi, uint16_t data) {
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8004016:	bf00      	nop
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f8      	beq.n	8004018 <SPI_send8+0xe>
  spi->interface->DR = (uint8_t)data;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <SPI_send16>:

static void SPI_send16(SPI_t *spi, uint16_t data) {
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8004048:	bf00      	nop
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f8      	beq.n	800404a <SPI_send16+0xe>
  spi->interface->DR = data;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	60da      	str	r2, [r3, #12]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <SPI_receive8>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI_t *spi, volatile uint16_t *data) {
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8004076:	bf00      	nop
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f8      	beq.n	8004078 <SPI_receive8+0xc>
  *data = (uint8_t)spi->interface->DR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	801a      	strh	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <SPI_receive16>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive16(SPI_t *spi, volatile uint16_t *data) {
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 80040aa:	bf00      	nop
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f8      	beq.n	80040ac <SPI_receive16+0xc>
  *data = spi->interface->DR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	801a      	strh	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <SPI_updateConfig>:
 * @param   spi Pointer to SPI_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void SPI_updateConfig(SPI_t *spi, SPI_Config *config) {
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  // Initialise config with default values if passed NULL.
  if (config == NULL) {
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11d      	bne.n	800411e <SPI_updateConfig+0x4c>
    config = &SPI_CONFIG_DEFAULT;
 80040e2:	2300      	movs	r3, #0
 80040e4:	81bb      	strh	r3, [r7, #12]
 80040e6:	7b3b      	ldrb	r3, [r7, #12]
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	733b      	strb	r3, [r7, #12]
 80040ee:	7b3b      	ldrb	r3, [r7, #12]
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	733b      	strb	r3, [r7, #12]
 80040f6:	7b3b      	ldrb	r3, [r7, #12]
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	733b      	strb	r3, [r7, #12]
 80040fe:	7b3b      	ldrb	r3, [r7, #12]
 8004100:	2202      	movs	r2, #2
 8004102:	f362 03c5 	bfi	r3, r2, #3, #3
 8004106:	733b      	strb	r3, [r7, #12]
 8004108:	7b7b      	ldrb	r3, [r7, #13]
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	737b      	strb	r3, [r7, #13]
 8004110:	7b7b      	ldrb	r3, [r7, #13]
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	737b      	strb	r3, [r7, #13]
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	603b      	str	r3, [r7, #0]
  }

  // Update peripheral with new config
  spi->config = *config;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	3304      	adds	r3, #4
 8004124:	8812      	ldrh	r2, [r2, #0]
 8004126:	801a      	strh	r2, [r3, #0]

  // Initialise SPI registers and enable peripheral
  _SPI_init(spi->interface, config);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff24 	bl	8003f7c <_SPI_init>
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <HAL_MspInit+0x4c>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	4a0f      	ldr	r2, [pc, #60]	@ (8004188 <HAL_MspInit+0x4c>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <HAL_MspInit+0x4c>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <HAL_MspInit+0x4c>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <HAL_MspInit+0x4c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	@ 0x40
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_MspInit+0x4c>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	@ 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_I2C_MspInit+0x84>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d12b      	bne.n	8004206 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <HAL_I2C_MspInit+0x88>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	4a17      	ldr	r2, [pc, #92]	@ (8004214 <HAL_I2C_MspInit+0x88>)
 80041b8:	f043 0320 	orr.w	r3, r3, #32
 80041bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <HAL_I2C_MspInit+0x88>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041ca:	2303      	movs	r3, #3
 80041cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ce:	2312      	movs	r3, #18
 80041d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d6:	2303      	movs	r3, #3
 80041d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80041da:	2304      	movs	r3, #4
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	4619      	mov	r1, r3
 80041e4:	480c      	ldr	r0, [pc, #48]	@ (8004218 <HAL_I2C_MspInit+0x8c>)
 80041e6:	f000 fa01 	bl	80045ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_I2C_MspInit+0x88>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	4a08      	ldr	r2, [pc, #32]	@ (8004214 <HAL_I2C_MspInit+0x88>)
 80041f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fa:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <HAL_I2C_MspInit+0x88>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004206:	bf00      	nop
 8004208:	3728      	adds	r7, #40	@ 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40005800 	.word	0x40005800
 8004214:	40023800 	.word	0x40023800
 8004218:	40021400 	.word	0x40021400

0800421c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <NMI_Handler+0x4>

08004224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <HardFault_Handler+0x4>

0800422c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <MemManage_Handler+0x4>

08004234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <BusFault_Handler+0x4>

0800423c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <UsageFault_Handler+0x4>

08004244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004272:	f000 f891 	bl	8004398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004280:	4b06      	ldr	r3, [pc, #24]	@ (800429c <SystemInit+0x20>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	4a05      	ldr	r2, [pc, #20]	@ (800429c <SystemInit+0x20>)
 8004288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800428c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80042a4:	f7ff ffea 	bl	800427c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042a8:	480c      	ldr	r0, [pc, #48]	@ (80042dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042aa:	490d      	ldr	r1, [pc, #52]	@ (80042e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042ac:	4a0d      	ldr	r2, [pc, #52]	@ (80042e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042b0:	e002      	b.n	80042b8 <LoopCopyDataInit>

080042b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042b6:	3304      	adds	r3, #4

080042b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042bc:	d3f9      	bcc.n	80042b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042be:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042c0:	4c0a      	ldr	r4, [pc, #40]	@ (80042ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80042c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042c4:	e001      	b.n	80042ca <LoopFillZerobss>

080042c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c8:	3204      	adds	r2, #4

080042ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042cc:	d3fb      	bcc.n	80042c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042ce:	f002 f865 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042d2:	f7fd f889 	bl	80013e8 <main>
  bx  lr    
 80042d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80042dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80042e4:	08006450 	.word	0x08006450
  ldr r2, =_sbss
 80042e8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80042ec:	200005dc 	.word	0x200005dc

080042f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042f0:	e7fe      	b.n	80042f0 <ADC_IRQHandler>
	...

080042f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <HAL_Init+0x40>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004334 <HAL_Init+0x40>)
 80042fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004304:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <HAL_Init+0x40>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0a      	ldr	r2, [pc, #40]	@ (8004334 <HAL_Init+0x40>)
 800430a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800430e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_Init+0x40>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a07      	ldr	r2, [pc, #28]	@ (8004334 <HAL_Init+0x40>)
 8004316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800431a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800431c:	2003      	movs	r0, #3
 800431e:	f000 f931 	bl	8004584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004322:	200f      	movs	r0, #15
 8004324:	f000 f808 	bl	8004338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004328:	f7ff ff08 	bl	800413c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40023c00 	.word	0x40023c00

08004338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004340:	4b12      	ldr	r3, [pc, #72]	@ (800438c <HAL_InitTick+0x54>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <HAL_InitTick+0x58>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4619      	mov	r1, r3
 800434a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800434e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f93b 	bl	80045d2 <HAL_SYSTICK_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e00e      	b.n	8004384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d80a      	bhi.n	8004382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800436c:	2200      	movs	r2, #0
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	f000 f911 	bl	800459a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004378:	4a06      	ldr	r2, [pc, #24]	@ (8004394 <HAL_InitTick+0x5c>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000034 	.word	0x20000034
 8004390:	2000003c 	.word	0x2000003c
 8004394:	20000038 	.word	0x20000038

08004398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <HAL_IncTick+0x20>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_IncTick+0x24>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <HAL_IncTick+0x24>)
 80043aa:	6013      	str	r3, [r2, #0]
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000003c 	.word	0x2000003c
 80043bc:	200005d8 	.word	0x200005d8

080043c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return uwTick;
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <HAL_GetTick+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	200005d8 	.word	0x200005d8

080043d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7ff ffee 	bl	80043c0 <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d005      	beq.n	80043fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_Delay+0x44>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043fe:	bf00      	nop
 8004400:	f7ff ffde 	bl	80043c0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	d8f7      	bhi.n	8004400 <HAL_Delay+0x28>
  {
  }
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000003c 	.word	0x2000003c

08004420 <__NVIC_SetPriorityGrouping>:
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <__NVIC_SetPriorityGrouping+0x44>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800443c:	4013      	ands	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800444c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004452:	4a04      	ldr	r2, [pc, #16]	@ (8004464 <__NVIC_SetPriorityGrouping+0x44>)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	60d3      	str	r3, [r2, #12]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <__NVIC_GetPriorityGrouping>:
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <__NVIC_GetPriorityGrouping+0x18>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 0307 	and.w	r3, r3, #7
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <__NVIC_SetPriority>:
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	2b00      	cmp	r3, #0
 8004496:	db0a      	blt.n	80044ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	490c      	ldr	r1, [pc, #48]	@ (80044d0 <__NVIC_SetPriority+0x4c>)
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	440b      	add	r3, r1
 80044a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80044ac:	e00a      	b.n	80044c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4908      	ldr	r1, [pc, #32]	@ (80044d4 <__NVIC_SetPriority+0x50>)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3b04      	subs	r3, #4
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	440b      	add	r3, r1
 80044c2:	761a      	strb	r2, [r3, #24]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000e100 	.word	0xe000e100
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	@ 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f1c3 0307 	rsb	r3, r3, #7
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	bf28      	it	cs
 80044f6:	2304      	movcs	r3, #4
 80044f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2b06      	cmp	r3, #6
 8004500:	d902      	bls.n	8004508 <NVIC_EncodePriority+0x30>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3b03      	subs	r3, #3
 8004506:	e000      	b.n	800450a <NVIC_EncodePriority+0x32>
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	401a      	ands	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004520:	f04f 31ff 	mov.w	r1, #4294967295
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	43d9      	mvns	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004530:	4313      	orrs	r3, r2
         );
}
 8004532:	4618      	mov	r0, r3
 8004534:	3724      	adds	r7, #36	@ 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004550:	d301      	bcc.n	8004556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004552:	2301      	movs	r3, #1
 8004554:	e00f      	b.n	8004576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <SysTick_Config+0x40>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800455e:	210f      	movs	r1, #15
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	f7ff ff8e 	bl	8004484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004568:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <SysTick_Config+0x40>)
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800456e:	4b04      	ldr	r3, [pc, #16]	@ (8004580 <SysTick_Config+0x40>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010

08004584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff47 	bl	8004420 <__NVIC_SetPriorityGrouping>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045ac:	f7ff ff5c 	bl	8004468 <__NVIC_GetPriorityGrouping>
 80045b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f7ff ff8e 	bl	80044d8 <NVIC_EncodePriority>
 80045bc:	4602      	mov	r2, r0
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff5d 	bl	8004484 <__NVIC_SetPriority>
}
 80045ca:	bf00      	nop
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ffb0 	bl	8004540 <SysTick_Config>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	@ 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e177      	b.n	80048f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004608:	2201      	movs	r2, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	429a      	cmp	r2, r3
 8004622:	f040 8166 	bne.w	80048f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d005      	beq.n	800463e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463a:	2b02      	cmp	r3, #2
 800463c:	d130      	bne.n	80046a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	2203      	movs	r2, #3
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004674:	2201      	movs	r2, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 0201 	and.w	r2, r3, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d017      	beq.n	80046dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d123      	bne.n	8004730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	08da      	lsrs	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3208      	adds	r2, #8
 80046f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	220f      	movs	r2, #15
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	08da      	lsrs	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3208      	adds	r2, #8
 800472a:	69b9      	ldr	r1, [r7, #24]
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	2203      	movs	r2, #3
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80c0 	beq.w	80048f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b66      	ldr	r3, [pc, #408]	@ (8004910 <HAL_GPIO_Init+0x324>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	4a65      	ldr	r2, [pc, #404]	@ (8004910 <HAL_GPIO_Init+0x324>)
 800477c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004780:	6453      	str	r3, [r2, #68]	@ 0x44
 8004782:	4b63      	ldr	r3, [pc, #396]	@ (8004910 <HAL_GPIO_Init+0x324>)
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800478e:	4a61      	ldr	r2, [pc, #388]	@ (8004914 <HAL_GPIO_Init+0x328>)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a58      	ldr	r2, [pc, #352]	@ (8004918 <HAL_GPIO_Init+0x32c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d037      	beq.n	800482a <HAL_GPIO_Init+0x23e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a57      	ldr	r2, [pc, #348]	@ (800491c <HAL_GPIO_Init+0x330>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d031      	beq.n	8004826 <HAL_GPIO_Init+0x23a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a56      	ldr	r2, [pc, #344]	@ (8004920 <HAL_GPIO_Init+0x334>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d02b      	beq.n	8004822 <HAL_GPIO_Init+0x236>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a55      	ldr	r2, [pc, #340]	@ (8004924 <HAL_GPIO_Init+0x338>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d025      	beq.n	800481e <HAL_GPIO_Init+0x232>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a54      	ldr	r2, [pc, #336]	@ (8004928 <HAL_GPIO_Init+0x33c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01f      	beq.n	800481a <HAL_GPIO_Init+0x22e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a53      	ldr	r2, [pc, #332]	@ (800492c <HAL_GPIO_Init+0x340>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d019      	beq.n	8004816 <HAL_GPIO_Init+0x22a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_GPIO_Init+0x344>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_GPIO_Init+0x226>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a51      	ldr	r2, [pc, #324]	@ (8004934 <HAL_GPIO_Init+0x348>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00d      	beq.n	800480e <HAL_GPIO_Init+0x222>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a50      	ldr	r2, [pc, #320]	@ (8004938 <HAL_GPIO_Init+0x34c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <HAL_GPIO_Init+0x21e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a4f      	ldr	r2, [pc, #316]	@ (800493c <HAL_GPIO_Init+0x350>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <HAL_GPIO_Init+0x21a>
 8004802:	2309      	movs	r3, #9
 8004804:	e012      	b.n	800482c <HAL_GPIO_Init+0x240>
 8004806:	230a      	movs	r3, #10
 8004808:	e010      	b.n	800482c <HAL_GPIO_Init+0x240>
 800480a:	2308      	movs	r3, #8
 800480c:	e00e      	b.n	800482c <HAL_GPIO_Init+0x240>
 800480e:	2307      	movs	r3, #7
 8004810:	e00c      	b.n	800482c <HAL_GPIO_Init+0x240>
 8004812:	2306      	movs	r3, #6
 8004814:	e00a      	b.n	800482c <HAL_GPIO_Init+0x240>
 8004816:	2305      	movs	r3, #5
 8004818:	e008      	b.n	800482c <HAL_GPIO_Init+0x240>
 800481a:	2304      	movs	r3, #4
 800481c:	e006      	b.n	800482c <HAL_GPIO_Init+0x240>
 800481e:	2303      	movs	r3, #3
 8004820:	e004      	b.n	800482c <HAL_GPIO_Init+0x240>
 8004822:	2302      	movs	r3, #2
 8004824:	e002      	b.n	800482c <HAL_GPIO_Init+0x240>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_GPIO_Init+0x240>
 800482a:	2300      	movs	r3, #0
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	f002 0203 	and.w	r2, r2, #3
 8004832:	0092      	lsls	r2, r2, #2
 8004834:	4093      	lsls	r3, r2
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800483c:	4935      	ldr	r1, [pc, #212]	@ (8004914 <HAL_GPIO_Init+0x328>)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	3302      	adds	r3, #2
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484a:	4b3d      	ldr	r3, [pc, #244]	@ (8004940 <HAL_GPIO_Init+0x354>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800486e:	4a34      	ldr	r2, [pc, #208]	@ (8004940 <HAL_GPIO_Init+0x354>)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004874:	4b32      	ldr	r3, [pc, #200]	@ (8004940 <HAL_GPIO_Init+0x354>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004898:	4a29      	ldr	r2, [pc, #164]	@ (8004940 <HAL_GPIO_Init+0x354>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800489e:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <HAL_GPIO_Init+0x354>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <HAL_GPIO_Init+0x354>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <HAL_GPIO_Init+0x354>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <HAL_GPIO_Init+0x354>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	f67f ae84 	bls.w	8004608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	3724      	adds	r7, #36	@ 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	40013800 	.word	0x40013800
 8004918:	40020000 	.word	0x40020000
 800491c:	40020400 	.word	0x40020400
 8004920:	40020800 	.word	0x40020800
 8004924:	40020c00 	.word	0x40020c00
 8004928:	40021000 	.word	0x40021000
 800492c:	40021400 	.word	0x40021400
 8004930:	40021800 	.word	0x40021800
 8004934:	40021c00 	.word	0x40021c00
 8004938:	40022000 	.word	0x40022000
 800493c:	40022400 	.word	0x40022400
 8004940:	40013c00 	.word	0x40013c00

08004944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
 8004950:	4613      	mov	r3, r2
 8004952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004954:	787b      	ldrb	r3, [r7, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004960:	e003      	b.n	800496a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	041a      	lsls	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e12b      	b.n	8004be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fbf4 	bl	800418c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	@ 0x24
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049dc:	f001 fcc2 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 80049e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a81      	ldr	r2, [pc, #516]	@ (8004bec <HAL_I2C_Init+0x274>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d807      	bhi.n	80049fc <HAL_I2C_Init+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a80      	ldr	r2, [pc, #512]	@ (8004bf0 <HAL_I2C_Init+0x278>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bf94      	ite	ls
 80049f4:	2301      	movls	r3, #1
 80049f6:	2300      	movhi	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e006      	b.n	8004a0a <HAL_I2C_Init+0x92>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a7d      	ldr	r2, [pc, #500]	@ (8004bf4 <HAL_I2C_Init+0x27c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	bf94      	ite	ls
 8004a04:	2301      	movls	r3, #1
 8004a06:	2300      	movhi	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0e7      	b.n	8004be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a78      	ldr	r2, [pc, #480]	@ (8004bf8 <HAL_I2C_Init+0x280>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0c9b      	lsrs	r3, r3, #18
 8004a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a6a      	ldr	r2, [pc, #424]	@ (8004bec <HAL_I2C_Init+0x274>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d802      	bhi.n	8004a4c <HAL_I2C_Init+0xd4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	e009      	b.n	8004a60 <HAL_I2C_Init+0xe8>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a69      	ldr	r2, [pc, #420]	@ (8004bfc <HAL_I2C_Init+0x284>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	3301      	adds	r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	495c      	ldr	r1, [pc, #368]	@ (8004bec <HAL_I2C_Init+0x274>)
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d819      	bhi.n	8004ab4 <HAL_I2C_Init+0x13c>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e59      	subs	r1, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a94:	400b      	ands	r3, r1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_I2C_Init+0x138>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e59      	subs	r1, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aae:	e051      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e04f      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <HAL_I2C_Init+0x168>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1e58      	subs	r0, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e012      	b.n	8004b06 <HAL_I2C_Init+0x18e>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e58      	subs	r0, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	0099      	lsls	r1, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Init+0x196>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e022      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10e      	bne.n	8004b34 <HAL_I2C_Init+0x1bc>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1e58      	subs	r0, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	440b      	add	r3, r1
 8004b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b32:	e00f      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	0099      	lsls	r1, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	6809      	ldr	r1, [r1, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6911      	ldr	r1, [r2, #16]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	000186a0 	.word	0x000186a0
 8004bf0:	001e847f 	.word	0x001e847f
 8004bf4:	003d08ff 	.word	0x003d08ff
 8004bf8:	431bde83 	.word	0x431bde83
 8004bfc:	10624dd3 	.word	0x10624dd3

08004c00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
 8004c10:	4613      	mov	r3, r2
 8004c12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7ff fbd4 	bl	80043c0 <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	f040 80e0 	bne.w	8004de8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2319      	movs	r3, #25
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4970      	ldr	r1, [pc, #448]	@ (8004df4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fc64 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e0d3      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2C_Master_Transmit+0x50>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0cc      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d007      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2221      	movs	r2, #33	@ 0x21
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2210      	movs	r2, #16
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	893a      	ldrh	r2, [r7, #8]
 8004ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a50      	ldr	r2, [pc, #320]	@ (8004df8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6a3a      	ldr	r2, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 face 	bl	8005260 <I2C_MasterRequestWrite>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e08d      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ce4:	e066      	b.n	8004db4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6a39      	ldr	r1, [r7, #32]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fd22 	bl	8005734 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00d      	beq.n	8004d12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d107      	bne.n	8004d0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06b      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d11b      	bne.n	8004d88 <HAL_I2C_Master_Transmit+0x188>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d017      	beq.n	8004d88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	6a39      	ldr	r1, [r7, #32]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fd19 	bl	80057c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d107      	bne.n	8004db0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e01a      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d194      	bne.n	8004ce6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	00100002 	.word	0x00100002
 8004df8:	ffff0000 	.word	0xffff0000

08004dfc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	@ 0x30
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	461a      	mov	r2, r3
 8004e08:	460b      	mov	r3, r1
 8004e0a:	817b      	strh	r3, [r7, #10]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7ff fad6 	bl	80043c0 <HAL_GetTick>
 8004e14:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	f040 8217 	bne.w	8005252 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2319      	movs	r3, #25
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	497c      	ldr	r1, [pc, #496]	@ (8005020 <HAL_I2C_Master_Receive+0x224>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fb66 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e20a      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_I2C_Master_Receive+0x50>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e203      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d007      	beq.n	8004e72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2222      	movs	r2, #34	@ 0x22
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	893a      	ldrh	r2, [r7, #8]
 8004ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8005024 <HAL_I2C_Master_Receive+0x228>)
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004eb4:	8979      	ldrh	r1, [r7, #10]
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa52 	bl	8005364 <I2C_MasterRequestRead>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e1c4      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d113      	bne.n	8004efa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e198      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d11b      	bne.n	8004f3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e178      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d11b      	bne.n	8004f7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	e158      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fa0:	e144      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	f200 80f1 	bhi.w	800518e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d123      	bne.n	8004ffc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fc4b 	bl	8005854 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e145      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ffa:	e117      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005000:	2b02      	cmp	r3, #2
 8005002:	d14e      	bne.n	80050a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2200      	movs	r2, #0
 800500c:	4906      	ldr	r1, [pc, #24]	@ (8005028 <HAL_I2C_Master_Receive+0x22c>)
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa76 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e11a      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
 800501e:	bf00      	nop
 8005020:	00100002 	.word	0x00100002
 8005024:	ffff0000 	.word	0xffff0000
 8005028:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800503a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050a0:	e0c4      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	496c      	ldr	r1, [pc, #432]	@ (800525c <HAL_I2C_Master_Receive+0x460>)
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fa27 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0cb      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	2200      	movs	r2, #0
 8005106:	4955      	ldr	r1, [pc, #340]	@ (800525c <HAL_I2C_Master_Receive+0x460>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f9f9 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e09d      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800518c:	e04e      	b.n	800522c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005190:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fb5e 	bl	8005854 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e058      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d124      	bne.n	800522c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d107      	bne.n	80051fa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f aeb6 	bne.w	8004fa2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	e000      	b.n	8005254 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005252:	2302      	movs	r3, #2
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	@ 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	00010004 	.word	0x00010004

08005260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	460b      	mov	r3, r1
 800526e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d006      	beq.n	800528a <I2C_MasterRequestWrite+0x2a>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d003      	beq.n	800528a <I2C_MasterRequestWrite+0x2a>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005288:	d108      	bne.n	800529c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00b      	b.n	80052b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	2b12      	cmp	r3, #18
 80052a2:	d107      	bne.n	80052b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f91d 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052da:	d103      	bne.n	80052e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e035      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f0:	d108      	bne.n	8005304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005300:	611a      	str	r2, [r3, #16]
 8005302:	e01b      	b.n	800533c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	11db      	asrs	r3, r3, #7
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f063 030f 	orn	r3, r3, #15
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	490e      	ldr	r1, [pc, #56]	@ (800535c <I2C_MasterRequestWrite+0xfc>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f966 	bl	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e010      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4907      	ldr	r1, [pc, #28]	@ (8005360 <I2C_MasterRequestWrite+0x100>)
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f956 	bl	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	00010008 	.word	0x00010008
 8005360:	00010002 	.word	0x00010002

08005364 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	460b      	mov	r3, r1
 8005372:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005388:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d006      	beq.n	800539e <I2C_MasterRequestRead+0x3a>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <I2C_MasterRequestRead+0x3a>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800539c:	d108      	bne.n	80053b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e00b      	b.n	80053c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	2b11      	cmp	r3, #17
 80053b6:	d107      	bne.n	80053c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f893 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00d      	beq.n	80053fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ee:	d103      	bne.n	80053f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e079      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005404:	d108      	bne.n	8005418 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	611a      	str	r2, [r3, #16]
 8005416:	e05f      	b.n	80054d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	11db      	asrs	r3, r3, #7
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0306 	and.w	r3, r3, #6
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f063 030f 	orn	r3, r3, #15
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4930      	ldr	r1, [pc, #192]	@ (80054f8 <I2C_MasterRequestRead+0x194>)
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f8dc 	bl	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e054      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4929      	ldr	r1, [pc, #164]	@ (80054fc <I2C_MasterRequestRead+0x198>)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f8cc 	bl	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e044      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800548a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f831 	bl	8005500 <I2C_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b2:	d103      	bne.n	80054bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e017      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054c0:	897b      	ldrh	r3, [r7, #10]
 80054c2:	11db      	asrs	r3, r3, #7
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0306 	and.w	r3, r3, #6
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f063 030e 	orn	r3, r3, #14
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4907      	ldr	r1, [pc, #28]	@ (80054fc <I2C_MasterRequestRead+0x198>)
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f888 	bl	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	00010008 	.word	0x00010008
 80054fc:	00010002 	.word	0x00010002

08005500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005510:	e048      	b.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d044      	beq.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551a:	f7fe ff51 	bl	80043c0 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d302      	bcc.n	8005530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d139      	bne.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10d      	bne.n	8005556 <I2C_WaitOnFlagUntilTimeout+0x56>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	43da      	mvns	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	e00c      	b.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	43da      	mvns	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	429a      	cmp	r2, r3
 8005574:	d116      	bne.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e023      	b.n	80055ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d10d      	bne.n	80055ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	43da      	mvns	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	e00c      	b.n	80055e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d093      	beq.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005602:	e071      	b.n	80056e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005612:	d123      	bne.n	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005622:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800562c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	f043 0204 	orr.w	r2, r3, #4
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e067      	b.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d041      	beq.n	80056e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005664:	f7fe feac 	bl	80043c0 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d136      	bne.n	80056e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d10c      	bne.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e00b      	b.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	43da      	mvns	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4013      	ands	r3, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d016      	beq.n	80056e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e021      	b.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10c      	bne.n	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e00b      	b.n	8005724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	43da      	mvns	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f af6d 	bne.w	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005740:	e034      	b.n	80057ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f8e3 	bl	800590e <I2C_IsAcknowledgeFailed>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e034      	b.n	80057bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d028      	beq.n	80057ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fe fe31 	bl	80043c0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11d      	bne.n	80057ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	2b80      	cmp	r3, #128	@ 0x80
 800577c:	d016      	beq.n	80057ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	f043 0220 	orr.w	r2, r3, #32
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e007      	b.n	80057bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b6:	2b80      	cmp	r3, #128	@ 0x80
 80057b8:	d1c3      	bne.n	8005742 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d0:	e034      	b.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f89b 	bl	800590e <I2C_IsAcknowledgeFailed>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e034      	b.n	800584c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d028      	beq.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe fde9 	bl	80043c0 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11d      	bne.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b04      	cmp	r3, #4
 800580c:	d016      	beq.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e007      	b.n	800584c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d1c3      	bne.n	80057d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005860:	e049      	b.n	80058f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b10      	cmp	r3, #16
 800586e:	d119      	bne.n	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0210 	mvn.w	r2, #16
 8005878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e030      	b.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a4:	f7fe fd8c 	bl	80043c0 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d11d      	bne.n	80058f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c4:	2b40      	cmp	r3, #64	@ 0x40
 80058c6:	d016      	beq.n	80058f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e007      	b.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b40      	cmp	r3, #64	@ 0x40
 8005902:	d1ae      	bne.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005924:	d11b      	bne.n	800595e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800592e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	f043 0204 	orr.w	r2, r3, #4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	d129      	bne.n	80059d6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	@ 0x24
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0210 	bic.w	r2, r2, #16
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d12a      	bne.n	8005a54 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2224      	movs	r2, #36	@ 0x24
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005a1e:	89fb      	ldrh	r3, [r7, #14]
 8005a20:	f023 030f 	bic.w	r3, r3, #15
 8005a24:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	89fa      	ldrh	r2, [r7, #14]
 8005a36:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e000      	b.n	8005a56 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
  }
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	4a1f      	ldr	r2, [pc, #124]	@ (8005af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a90:	f7fe fc96 	bl	80043c0 <HAL_GetTick>
 8005a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a96:	e009      	b.n	8005aac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a98:	f7fe fc92 	bl	80043c0 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005aa6:	d901      	bls.n	8005aac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e01f      	b.n	8005aec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005aac:	4b13      	ldr	r3, [pc, #76]	@ (8005afc <HAL_PWREx_EnableOverDrive+0x98>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab8:	d1ee      	bne.n	8005a98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac0:	f7fe fc7e 	bl	80043c0 <HAL_GetTick>
 8005ac4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ac6:	e009      	b.n	8005adc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ac8:	f7fe fc7a 	bl	80043c0 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ad6:	d901      	bls.n	8005adc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e007      	b.n	8005aec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <HAL_PWREx_EnableOverDrive+0x98>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae8:	d1ee      	bne.n	8005ac8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40023800 	.word	0x40023800
 8005af8:	420e0040 	.word	0x420e0040
 8005afc:	40007000 	.word	0x40007000
 8005b00:	420e0044 	.word	0x420e0044

08005b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e267      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d075      	beq.n	8005c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b22:	4b88      	ldr	r3, [pc, #544]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d00c      	beq.n	8005b48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b2e:	4b85      	ldr	r3, [pc, #532]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d112      	bne.n	8005b60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3a:	4b82      	ldr	r3, [pc, #520]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b46:	d10b      	bne.n	8005b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b48:	4b7e      	ldr	r3, [pc, #504]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05b      	beq.n	8005c0c <HAL_RCC_OscConfig+0x108>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d157      	bne.n	8005c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e242      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b68:	d106      	bne.n	8005b78 <HAL_RCC_OscConfig+0x74>
 8005b6a:	4b76      	ldr	r3, [pc, #472]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a75      	ldr	r2, [pc, #468]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e01d      	b.n	8005bb4 <HAL_RCC_OscConfig+0xb0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b80:	d10c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x98>
 8005b82:	4b70      	ldr	r3, [pc, #448]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6f      	ldr	r2, [pc, #444]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6c      	ldr	r2, [pc, #432]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e00b      	b.n	8005bb4 <HAL_RCC_OscConfig+0xb0>
 8005b9c:	4b69      	ldr	r3, [pc, #420]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a68      	ldr	r2, [pc, #416]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b66      	ldr	r3, [pc, #408]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a65      	ldr	r2, [pc, #404]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d013      	beq.n	8005be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fe fc00 	bl	80043c0 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc4:	f7fe fbfc 	bl	80043c0 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	@ 0x64
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e207      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0xc0>
 8005be2:	e014      	b.n	8005c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fe fbec 	bl	80043c0 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fe fbe8 	bl	80043c0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	@ 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1f3      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfe:	4b51      	ldr	r3, [pc, #324]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0xe8>
 8005c0a:	e000      	b.n	8005c0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d063      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c26:	4b47      	ldr	r3, [pc, #284]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d11c      	bne.n	8005c6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c32:	4b44      	ldr	r3, [pc, #272]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d116      	bne.n	8005c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3e:	4b41      	ldr	r3, [pc, #260]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_RCC_OscConfig+0x152>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d001      	beq.n	8005c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e1c7      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c56:	4b3b      	ldr	r3, [pc, #236]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4937      	ldr	r1, [pc, #220]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6a:	e03a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c74:	4b34      	ldr	r3, [pc, #208]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fe fba1 	bl	80043c0 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c82:	f7fe fb9d 	bl	80043c0 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e1a8      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c94:	4b2b      	ldr	r3, [pc, #172]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca0:	4b28      	ldr	r3, [pc, #160]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4925      	ldr	r1, [pc, #148]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	600b      	str	r3, [r1, #0]
 8005cb4:	e015      	b.n	8005ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cb6:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fe fb80 	bl	80043c0 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc4:	f7fe fb7c 	bl	80043c0 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e187      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d036      	beq.n	8005d5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cf6:	4b15      	ldr	r3, [pc, #84]	@ (8005d4c <HAL_RCC_OscConfig+0x248>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fe fb60 	bl	80043c0 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d04:	f7fe fb5c 	bl	80043c0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e167      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d16:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <HAL_RCC_OscConfig+0x240>)
 8005d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x200>
 8005d22:	e01b      	b.n	8005d5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d24:	4b09      	ldr	r3, [pc, #36]	@ (8005d4c <HAL_RCC_OscConfig+0x248>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2a:	f7fe fb49 	bl	80043c0 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d30:	e00e      	b.n	8005d50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d32:	f7fe fb45 	bl	80043c0 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d907      	bls.n	8005d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e150      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
 8005d44:	40023800 	.word	0x40023800
 8005d48:	42470000 	.word	0x42470000
 8005d4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d50:	4b88      	ldr	r3, [pc, #544]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1ea      	bne.n	8005d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8097 	beq.w	8005e98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6e:	4b81      	ldr	r3, [pc, #516]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	4a7c      	ldr	r2, [pc, #496]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d92:	60bb      	str	r3, [r7, #8]
 8005d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9a:	4b77      	ldr	r3, [pc, #476]	@ (8005f78 <HAL_RCC_OscConfig+0x474>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d118      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da6:	4b74      	ldr	r3, [pc, #464]	@ (8005f78 <HAL_RCC_OscConfig+0x474>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a73      	ldr	r2, [pc, #460]	@ (8005f78 <HAL_RCC_OscConfig+0x474>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005db2:	f7fe fb05 	bl	80043c0 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dba:	f7fe fb01 	bl	80043c0 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e10c      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8005f78 <HAL_RCC_OscConfig+0x474>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d106      	bne.n	8005dee <HAL_RCC_OscConfig+0x2ea>
 8005de0:	4b64      	ldr	r3, [pc, #400]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de4:	4a63      	ldr	r2, [pc, #396]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dec:	e01c      	b.n	8005e28 <HAL_RCC_OscConfig+0x324>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCC_OscConfig+0x30c>
 8005df6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	f043 0304 	orr.w	r3, r3, #4
 8005e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e02:	4b5c      	ldr	r3, [pc, #368]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e06:	4a5b      	ldr	r2, [pc, #364]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e08:	f043 0301 	orr.w	r3, r3, #1
 8005e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0e:	e00b      	b.n	8005e28 <HAL_RCC_OscConfig+0x324>
 8005e10:	4b58      	ldr	r3, [pc, #352]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e14:	4a57      	ldr	r2, [pc, #348]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e1c:	4b55      	ldr	r3, [pc, #340]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e20:	4a54      	ldr	r2, [pc, #336]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e22:	f023 0304 	bic.w	r3, r3, #4
 8005e26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fe fac6 	bl	80043c0 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e38:	f7fe fac2 	bl	80043c0 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e0cb      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4e:	4b49      	ldr	r3, [pc, #292]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ee      	beq.n	8005e38 <HAL_RCC_OscConfig+0x334>
 8005e5a:	e014      	b.n	8005e86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5c:	f7fe fab0 	bl	80043c0 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e62:	e00a      	b.n	8005e7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e64:	f7fe faac 	bl	80043c0 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e0b5      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1ee      	bne.n	8005e64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d105      	bne.n	8005e98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e8c:	4b39      	ldr	r3, [pc, #228]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	4a38      	ldr	r2, [pc, #224]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80a1 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ea2:	4b34      	ldr	r3, [pc, #208]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d05c      	beq.n	8005f68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d141      	bne.n	8005f3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb6:	4b31      	ldr	r3, [pc, #196]	@ (8005f7c <HAL_RCC_OscConfig+0x478>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fe fa80 	bl	80043c0 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fe fa7c 	bl	80043c0 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e087      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed6:	4b27      	ldr	r3, [pc, #156]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	019b      	lsls	r3, r3, #6
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	3b01      	subs	r3, #1
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	491b      	ldr	r1, [pc, #108]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <HAL_RCC_OscConfig+0x478>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f12:	f7fe fa55 	bl	80043c0 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1a:	f7fe fa51 	bl	80043c0 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e05c      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f2c:	4b11      	ldr	r3, [pc, #68]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x416>
 8005f38:	e054      	b.n	8005fe4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3a:	4b10      	ldr	r3, [pc, #64]	@ (8005f7c <HAL_RCC_OscConfig+0x478>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f40:	f7fe fa3e 	bl	80043c0 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f48:	f7fe fa3a 	bl	80043c0 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e045      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5a:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1f0      	bne.n	8005f48 <HAL_RCC_OscConfig+0x444>
 8005f66:	e03d      	b.n	8005fe4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e038      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
 8005f74:	40023800 	.word	0x40023800
 8005f78:	40007000 	.word	0x40007000
 8005f7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <HAL_RCC_OscConfig+0x4ec>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d028      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d121      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d11a      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d111      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d001      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40023800 	.word	0x40023800

08005ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0cc      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006008:	4b68      	ldr	r3, [pc, #416]	@ (80061ac <HAL_RCC_ClockConfig+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d90c      	bls.n	8006030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006016:	4b65      	ldr	r3, [pc, #404]	@ (80061ac <HAL_RCC_ClockConfig+0x1b8>)
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601e:	4b63      	ldr	r3, [pc, #396]	@ (80061ac <HAL_RCC_ClockConfig+0x1b8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d001      	beq.n	8006030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0b8      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d020      	beq.n	800607e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006048:	4b59      	ldr	r3, [pc, #356]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4a58      	ldr	r2, [pc, #352]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006060:	4b53      	ldr	r3, [pc, #332]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	4a52      	ldr	r2, [pc, #328]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800606a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800606c:	4b50      	ldr	r3, [pc, #320]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	494d      	ldr	r1, [pc, #308]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	4313      	orrs	r3, r2
 800607c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d044      	beq.n	8006114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d107      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	4b47      	ldr	r3, [pc, #284]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d119      	bne.n	80060d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e07f      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d003      	beq.n	80060b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d107      	bne.n	80060c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b2:	4b3f      	ldr	r3, [pc, #252]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e06f      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c2:	4b3b      	ldr	r3, [pc, #236]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e067      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060d2:	4b37      	ldr	r3, [pc, #220]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f023 0203 	bic.w	r2, r3, #3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	4934      	ldr	r1, [pc, #208]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060e4:	f7fe f96c 	bl	80043c0 <HAL_GetTick>
 80060e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ea:	e00a      	b.n	8006102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ec:	f7fe f968 	bl	80043c0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e04f      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006102:	4b2b      	ldr	r3, [pc, #172]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 020c 	and.w	r2, r3, #12
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	429a      	cmp	r2, r3
 8006112:	d1eb      	bne.n	80060ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006114:	4b25      	ldr	r3, [pc, #148]	@ (80061ac <HAL_RCC_ClockConfig+0x1b8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d20c      	bcs.n	800613c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006122:	4b22      	ldr	r3, [pc, #136]	@ (80061ac <HAL_RCC_ClockConfig+0x1b8>)
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	4b20      	ldr	r3, [pc, #128]	@ (80061ac <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e032      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006148:	4b19      	ldr	r3, [pc, #100]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4916      	ldr	r1, [pc, #88]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006166:	4b12      	ldr	r3, [pc, #72]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	490e      	ldr	r1, [pc, #56]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	4313      	orrs	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800617a:	f000 f821 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 800617e:	4602      	mov	r2, r0
 8006180:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	490a      	ldr	r1, [pc, #40]	@ (80061b4 <HAL_RCC_ClockConfig+0x1c0>)
 800618c:	5ccb      	ldrb	r3, [r1, r3]
 800618e:	fa22 f303 	lsr.w	r3, r2, r3
 8006192:	4a09      	ldr	r2, [pc, #36]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006196:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <HAL_RCC_ClockConfig+0x1c8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe f8cc 	bl	8004338 <HAL_InitTick>

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40023c00 	.word	0x40023c00
 80061b0:	40023800 	.word	0x40023800
 80061b4:	08006428 	.word	0x08006428
 80061b8:	20000034 	.word	0x20000034
 80061bc:	20000038 	.word	0x20000038

080061c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c4:	b090      	sub	sp, #64	@ 0x40
 80061c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d8:	4b59      	ldr	r3, [pc, #356]	@ (8006340 <HAL_RCC_GetSysClockFreq+0x180>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 030c 	and.w	r3, r3, #12
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d00d      	beq.n	8006200 <HAL_RCC_GetSysClockFreq+0x40>
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	f200 80a1 	bhi.w	800632c <HAL_RCC_GetSysClockFreq+0x16c>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_RCC_GetSysClockFreq+0x34>
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d003      	beq.n	80061fa <HAL_RCC_GetSysClockFreq+0x3a>
 80061f2:	e09b      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f4:	4b53      	ldr	r3, [pc, #332]	@ (8006344 <HAL_RCC_GetSysClockFreq+0x184>)
 80061f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061f8:	e09b      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061fa:	4b53      	ldr	r3, [pc, #332]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x188>)
 80061fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061fe:	e098      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006200:	4b4f      	ldr	r3, [pc, #316]	@ (8006340 <HAL_RCC_GetSysClockFreq+0x180>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800620a:	4b4d      	ldr	r3, [pc, #308]	@ (8006340 <HAL_RCC_GetSysClockFreq+0x180>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d028      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006216:	4b4a      	ldr	r3, [pc, #296]	@ (8006340 <HAL_RCC_GetSysClockFreq+0x180>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	2200      	movs	r2, #0
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	627a      	str	r2, [r7, #36]	@ 0x24
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006228:	2100      	movs	r1, #0
 800622a:	4b47      	ldr	r3, [pc, #284]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x188>)
 800622c:	fb03 f201 	mul.w	r2, r3, r1
 8006230:	2300      	movs	r3, #0
 8006232:	fb00 f303 	mul.w	r3, r0, r3
 8006236:	4413      	add	r3, r2
 8006238:	4a43      	ldr	r2, [pc, #268]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x188>)
 800623a:	fba0 1202 	umull	r1, r2, r0, r2
 800623e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006240:	460a      	mov	r2, r1
 8006242:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006246:	4413      	add	r3, r2
 8006248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800624a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624c:	2200      	movs	r2, #0
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	61fa      	str	r2, [r7, #28]
 8006252:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800625a:	f7fa f9d5 	bl	8000608 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4613      	mov	r3, r2
 8006264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006266:	e053      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006268:	4b35      	ldr	r3, [pc, #212]	@ (8006340 <HAL_RCC_GetSysClockFreq+0x180>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	099b      	lsrs	r3, r3, #6
 800626e:	2200      	movs	r2, #0
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	617a      	str	r2, [r7, #20]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800627a:	f04f 0b00 	mov.w	fp, #0
 800627e:	4652      	mov	r2, sl
 8006280:	465b      	mov	r3, fp
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	0159      	lsls	r1, r3, #5
 800628c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006290:	0150      	lsls	r0, r2, #5
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	ebb2 080a 	subs.w	r8, r2, sl
 800629a:	eb63 090b 	sbc.w	r9, r3, fp
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062b2:	ebb2 0408 	subs.w	r4, r2, r8
 80062b6:	eb63 0509 	sbc.w	r5, r3, r9
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	00eb      	lsls	r3, r5, #3
 80062c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c8:	00e2      	lsls	r2, r4, #3
 80062ca:	4614      	mov	r4, r2
 80062cc:	461d      	mov	r5, r3
 80062ce:	eb14 030a 	adds.w	r3, r4, sl
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	eb45 030b 	adc.w	r3, r5, fp
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062e6:	4629      	mov	r1, r5
 80062e8:	028b      	lsls	r3, r1, #10
 80062ea:	4621      	mov	r1, r4
 80062ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f0:	4621      	mov	r1, r4
 80062f2:	028a      	lsls	r2, r1, #10
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	2200      	movs	r2, #0
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	60fa      	str	r2, [r7, #12]
 8006300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006304:	f7fa f980 	bl	8000608 <__aeabi_uldivmod>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4613      	mov	r3, r2
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006310:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <HAL_RCC_GetSysClockFreq+0x180>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	3301      	adds	r3, #1
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800632a:	e002      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <HAL_RCC_GetSysClockFreq+0x184>)
 800632e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006334:	4618      	mov	r0, r3
 8006336:	3740      	adds	r7, #64	@ 0x40
 8006338:	46bd      	mov	sp, r7
 800633a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633e:	bf00      	nop
 8006340:	40023800 	.word	0x40023800
 8006344:	00f42400 	.word	0x00f42400
 8006348:	017d7840 	.word	0x017d7840

0800634c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006350:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <HAL_RCC_GetHCLKFreq+0x14>)
 8006352:	681b      	ldr	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000034 	.word	0x20000034

08006364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006368:	f7ff fff0 	bl	800634c <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	0a9b      	lsrs	r3, r3, #10
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4903      	ldr	r1, [pc, #12]	@ (8006388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40023800 	.word	0x40023800
 8006388:	08006438 	.word	0x08006438

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4d0d      	ldr	r5, [pc, #52]	@ (80063d4 <__libc_init_array+0x38>)
 80063a0:	4c0d      	ldr	r4, [pc, #52]	@ (80063d8 <__libc_init_array+0x3c>)
 80063a2:	1b64      	subs	r4, r4, r5
 80063a4:	10a4      	asrs	r4, r4, #2
 80063a6:	2600      	movs	r6, #0
 80063a8:	42a6      	cmp	r6, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	4d0b      	ldr	r5, [pc, #44]	@ (80063dc <__libc_init_array+0x40>)
 80063ae:	4c0c      	ldr	r4, [pc, #48]	@ (80063e0 <__libc_init_array+0x44>)
 80063b0:	f000 f818 	bl	80063e4 <_init>
 80063b4:	1b64      	subs	r4, r4, r5
 80063b6:	10a4      	asrs	r4, r4, #2
 80063b8:	2600      	movs	r6, #0
 80063ba:	42a6      	cmp	r6, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c4:	4798      	blx	r3
 80063c6:	3601      	adds	r6, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ce:	4798      	blx	r3
 80063d0:	3601      	adds	r6, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	08006448 	.word	0x08006448
 80063d8:	08006448 	.word	0x08006448
 80063dc:	08006448 	.word	0x08006448
 80063e0:	0800644c 	.word	0x0800644c

080063e4 <_init>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr

080063f0 <_fini>:
 80063f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f2:	bf00      	nop
 80063f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f6:	bc08      	pop	{r3}
 80063f8:	469e      	mov	lr, r3
 80063fa:	4770      	bx	lr
