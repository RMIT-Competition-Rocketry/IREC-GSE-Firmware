
GSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006644  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006838  08006838  00008038  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006838  08006838  00007838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006840  08006840  00008038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08006848  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008038  2**0
                  CONTENTS
 10 .bss          0000059c  20000038  20000038  00008038  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005d4  200005d4  00008038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2ec  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe9  00000000  00000000  00014354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  00016340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000740  00000000  00000000  00016cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dac  00000000  00000000  00017408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd6e  00000000  00000000  0001a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddd2a  00000000  00000000  00029f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107c4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026d4  00000000  00000000  00107c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0010a364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000038 	.word	0x20000038
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080067dc 	.word	0x080067dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000003c 	.word	0x2000003c
 80001ec:	080067dc 	.word	0x080067dc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b988 	b.w	8000930 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	468e      	mov	lr, r1
 8000640:	4604      	mov	r4, r0
 8000642:	4688      	mov	r8, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d14a      	bne.n	80006de <__udivmoddi4+0xa6>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d962      	bls.n	8000714 <__udivmoddi4+0xdc>
 800064e:	fab2 f682 	clz	r6, r2
 8000652:	b14e      	cbz	r6, 8000668 <__udivmoddi4+0x30>
 8000654:	f1c6 0320 	rsb	r3, r6, #32
 8000658:	fa01 f806 	lsl.w	r8, r1, r6
 800065c:	fa20 f303 	lsr.w	r3, r0, r3
 8000660:	40b7      	lsls	r7, r6
 8000662:	ea43 0808 	orr.w	r8, r3, r8
 8000666:	40b4      	lsls	r4, r6
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f fc87 	uxth.w	ip, r7
 8000670:	fbb8 f1fe 	udiv	r1, r8, lr
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	fb0e 8811 	mls	r8, lr, r1, r8
 800067a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067e:	fb01 f20c 	mul.w	r2, r1, ip
 8000682:	429a      	cmp	r2, r3
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x62>
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	f101 30ff 	add.w	r0, r1, #4294967295
 800068c:	f080 80ea 	bcs.w	8000864 <__udivmoddi4+0x22c>
 8000690:	429a      	cmp	r2, r3
 8000692:	f240 80e7 	bls.w	8000864 <__udivmoddi4+0x22c>
 8000696:	3902      	subs	r1, #2
 8000698:	443b      	add	r3, r7
 800069a:	1a9a      	subs	r2, r3, r2
 800069c:	b2a3      	uxth	r3, r4
 800069e:	fbb2 f0fe 	udiv	r0, r2, lr
 80006a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ae:	459c      	cmp	ip, r3
 80006b0:	d909      	bls.n	80006c6 <__udivmoddi4+0x8e>
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006b8:	f080 80d6 	bcs.w	8000868 <__udivmoddi4+0x230>
 80006bc:	459c      	cmp	ip, r3
 80006be:	f240 80d3 	bls.w	8000868 <__udivmoddi4+0x230>
 80006c2:	443b      	add	r3, r7
 80006c4:	3802      	subs	r0, #2
 80006c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ca:	eba3 030c 	sub.w	r3, r3, ip
 80006ce:	2100      	movs	r1, #0
 80006d0:	b11d      	cbz	r5, 80006da <__udivmoddi4+0xa2>
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	2200      	movs	r2, #0
 80006d6:	e9c5 3200 	strd	r3, r2, [r5]
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d905      	bls.n	80006ee <__udivmoddi4+0xb6>
 80006e2:	b10d      	cbz	r5, 80006e8 <__udivmoddi4+0xb0>
 80006e4:	e9c5 0100 	strd	r0, r1, [r5]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4608      	mov	r0, r1
 80006ec:	e7f5      	b.n	80006da <__udivmoddi4+0xa2>
 80006ee:	fab3 f183 	clz	r1, r3
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d146      	bne.n	8000784 <__udivmoddi4+0x14c>
 80006f6:	4573      	cmp	r3, lr
 80006f8:	d302      	bcc.n	8000700 <__udivmoddi4+0xc8>
 80006fa:	4282      	cmp	r2, r0
 80006fc:	f200 8105 	bhi.w	800090a <__udivmoddi4+0x2d2>
 8000700:	1a84      	subs	r4, r0, r2
 8000702:	eb6e 0203 	sbc.w	r2, lr, r3
 8000706:	2001      	movs	r0, #1
 8000708:	4690      	mov	r8, r2
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0e5      	beq.n	80006da <__udivmoddi4+0xa2>
 800070e:	e9c5 4800 	strd	r4, r8, [r5]
 8000712:	e7e2      	b.n	80006da <__udivmoddi4+0xa2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	f000 8090 	beq.w	800083a <__udivmoddi4+0x202>
 800071a:	fab2 f682 	clz	r6, r2
 800071e:	2e00      	cmp	r6, #0
 8000720:	f040 80a4 	bne.w	800086c <__udivmoddi4+0x234>
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	b280      	uxth	r0, r0
 800072e:	b2bc      	uxth	r4, r7
 8000730:	2101      	movs	r1, #1
 8000732:	fbb2 fcfe 	udiv	ip, r2, lr
 8000736:	fb0e 221c 	mls	r2, lr, ip, r2
 800073a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073e:	fb04 f20c 	mul.w	r2, r4, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x11e>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f10c 38ff 	add.w	r8, ip, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x11c>
 800074e:	429a      	cmp	r2, r3
 8000750:	f200 80e0 	bhi.w	8000914 <__udivmoddi4+0x2dc>
 8000754:	46c4      	mov	ip, r8
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	fbb3 f2fe 	udiv	r2, r3, lr
 800075c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000760:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000764:	fb02 f404 	mul.w	r4, r2, r4
 8000768:	429c      	cmp	r4, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x144>
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x142>
 8000774:	429c      	cmp	r4, r3
 8000776:	f200 80ca 	bhi.w	800090e <__udivmoddi4+0x2d6>
 800077a:	4602      	mov	r2, r0
 800077c:	1b1b      	subs	r3, r3, r4
 800077e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000782:	e7a5      	b.n	80006d0 <__udivmoddi4+0x98>
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	408b      	lsls	r3, r1
 800078a:	fa22 f706 	lsr.w	r7, r2, r6
 800078e:	431f      	orrs	r7, r3
 8000790:	fa0e f401 	lsl.w	r4, lr, r1
 8000794:	fa20 f306 	lsr.w	r3, r0, r6
 8000798:	fa2e fe06 	lsr.w	lr, lr, r6
 800079c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007a0:	4323      	orrs	r3, r4
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	fa1f fc87 	uxth.w	ip, r7
 80007aa:	fbbe f0f9 	udiv	r0, lr, r9
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007bc:	45a6      	cmp	lr, r4
 80007be:	fa02 f201 	lsl.w	r2, r2, r1
 80007c2:	d909      	bls.n	80007d8 <__udivmoddi4+0x1a0>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ca:	f080 809c 	bcs.w	8000906 <__udivmoddi4+0x2ce>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f240 8099 	bls.w	8000906 <__udivmoddi4+0x2ce>
 80007d4:	3802      	subs	r0, #2
 80007d6:	443c      	add	r4, r7
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	fa1f fe83 	uxth.w	lr, r3
 80007e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e4:	fb09 4413 	mls	r4, r9, r3, r4
 80007e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f0:	45a4      	cmp	ip, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1ce>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007fa:	f080 8082 	bcs.w	8000902 <__udivmoddi4+0x2ca>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d97f      	bls.n	8000902 <__udivmoddi4+0x2ca>
 8000802:	3b02      	subs	r3, #2
 8000804:	443c      	add	r4, r7
 8000806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800080a:	eba4 040c 	sub.w	r4, r4, ip
 800080e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000812:	4564      	cmp	r4, ip
 8000814:	4673      	mov	r3, lr
 8000816:	46e1      	mov	r9, ip
 8000818:	d362      	bcc.n	80008e0 <__udivmoddi4+0x2a8>
 800081a:	d05f      	beq.n	80008dc <__udivmoddi4+0x2a4>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x1fe>
 800081e:	ebb8 0203 	subs.w	r2, r8, r3
 8000822:	eb64 0409 	sbc.w	r4, r4, r9
 8000826:	fa04 f606 	lsl.w	r6, r4, r6
 800082a:	fa22 f301 	lsr.w	r3, r2, r1
 800082e:	431e      	orrs	r6, r3
 8000830:	40cc      	lsrs	r4, r1
 8000832:	e9c5 6400 	strd	r6, r4, [r5]
 8000836:	2100      	movs	r1, #0
 8000838:	e74f      	b.n	80006da <__udivmoddi4+0xa2>
 800083a:	fbb1 fcf2 	udiv	ip, r1, r2
 800083e:	0c01      	lsrs	r1, r0, #16
 8000840:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000844:	b280      	uxth	r0, r0
 8000846:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800084a:	463b      	mov	r3, r7
 800084c:	4638      	mov	r0, r7
 800084e:	463c      	mov	r4, r7
 8000850:	46b8      	mov	r8, r7
 8000852:	46be      	mov	lr, r7
 8000854:	2620      	movs	r6, #32
 8000856:	fbb1 f1f7 	udiv	r1, r1, r7
 800085a:	eba2 0208 	sub.w	r2, r2, r8
 800085e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000862:	e766      	b.n	8000732 <__udivmoddi4+0xfa>
 8000864:	4601      	mov	r1, r0
 8000866:	e718      	b.n	800069a <__udivmoddi4+0x62>
 8000868:	4610      	mov	r0, r2
 800086a:	e72c      	b.n	80006c6 <__udivmoddi4+0x8e>
 800086c:	f1c6 0220 	rsb	r2, r6, #32
 8000870:	fa2e f302 	lsr.w	r3, lr, r2
 8000874:	40b7      	lsls	r7, r6
 8000876:	40b1      	lsls	r1, r6
 8000878:	fa20 f202 	lsr.w	r2, r0, r2
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	430a      	orrs	r2, r1
 8000882:	fbb3 f8fe 	udiv	r8, r3, lr
 8000886:	b2bc      	uxth	r4, r7
 8000888:	fb0e 3318 	mls	r3, lr, r8, r3
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb08 f904 	mul.w	r9, r8, r4
 8000896:	40b0      	lsls	r0, r6
 8000898:	4589      	cmp	r9, r1
 800089a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800089e:	b280      	uxth	r0, r0
 80008a0:	d93e      	bls.n	8000920 <__udivmoddi4+0x2e8>
 80008a2:	1879      	adds	r1, r7, r1
 80008a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008a8:	d201      	bcs.n	80008ae <__udivmoddi4+0x276>
 80008aa:	4589      	cmp	r9, r1
 80008ac:	d81f      	bhi.n	80008ee <__udivmoddi4+0x2b6>
 80008ae:	eba1 0109 	sub.w	r1, r1, r9
 80008b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c4:	4542      	cmp	r2, r8
 80008c6:	d229      	bcs.n	800091c <__udivmoddi4+0x2e4>
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ce:	d2c4      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d0:	4542      	cmp	r2, r8
 80008d2:	d2c2      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d4:	f1a9 0102 	sub.w	r1, r9, #2
 80008d8:	443a      	add	r2, r7
 80008da:	e7be      	b.n	800085a <__udivmoddi4+0x222>
 80008dc:	45f0      	cmp	r8, lr
 80008de:	d29d      	bcs.n	800081c <__udivmoddi4+0x1e4>
 80008e0:	ebbe 0302 	subs.w	r3, lr, r2
 80008e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008e8:	3801      	subs	r0, #1
 80008ea:	46e1      	mov	r9, ip
 80008ec:	e796      	b.n	800081c <__udivmoddi4+0x1e4>
 80008ee:	eba7 0909 	sub.w	r9, r7, r9
 80008f2:	4449      	add	r1, r9
 80008f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fc:	fb09 f804 	mul.w	r8, r9, r4
 8000900:	e7db      	b.n	80008ba <__udivmoddi4+0x282>
 8000902:	4673      	mov	r3, lr
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1ce>
 8000906:	4650      	mov	r0, sl
 8000908:	e766      	b.n	80007d8 <__udivmoddi4+0x1a0>
 800090a:	4608      	mov	r0, r1
 800090c:	e6fd      	b.n	800070a <__udivmoddi4+0xd2>
 800090e:	443b      	add	r3, r7
 8000910:	3a02      	subs	r2, #2
 8000912:	e733      	b.n	800077c <__udivmoddi4+0x144>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	443b      	add	r3, r7
 800091a:	e71c      	b.n	8000756 <__udivmoddi4+0x11e>
 800091c:	4649      	mov	r1, r9
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x222>
 8000920:	eba1 0109 	sub.w	r1, r1, r9
 8000924:	46c4      	mov	ip, r8
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fb09 f804 	mul.w	r8, r9, r4
 800092e:	e7c4      	b.n	80008ba <__udivmoddi4+0x282>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <configureSPIBus1>:
}



void configureSPIBus1(void) //for ADC transducers
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 8000938:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <configureSPIBus1+0x178>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a5b      	ldr	r2, [pc, #364]	@ (8000aac <configureSPIBus1+0x178>)
 800093e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000942:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODE5_Pos | 0x02 << GPIO_MODER_MODE6_Pos | 0x02 << GPIO_MODER_MODE7_Pos);
 8000944:	4b59      	ldr	r3, [pc, #356]	@ (8000aac <configureSPIBus1+0x178>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a58      	ldr	r2, [pc, #352]	@ (8000aac <configureSPIBus1+0x178>)
 800094a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800094e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5_Msk | GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk); //if needing to change internal pull up/downs
 8000950:	4b56      	ldr	r3, [pc, #344]	@ (8000aac <configureSPIBus1+0x178>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a55      	ldr	r2, [pc, #340]	@ (8000aac <configureSPIBus1+0x178>)
 8000956:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800095a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x01 << GPIO_PUPDR_PUPD5_Pos | 0x01 << GPIO_PUPDR_PUPD6_Pos | 0x01 << GPIO_PUPDR_PUPD7_Pos); //internal pull ups on SCK, MOSI and MISO
 800095c:	4b53      	ldr	r3, [pc, #332]	@ (8000aac <configureSPIBus1+0x178>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a52      	ldr	r2, [pc, #328]	@ (8000aac <configureSPIBus1+0x178>)
 8000962:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000966:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT5_Msk | GPIO_OTYPER_OT6_Msk | GPIO_OTYPER_OT7_Msk ); //push pull de
 8000968:	4b50      	ldr	r3, [pc, #320]	@ (8000aac <configureSPIBus1+0x178>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	494f      	ldr	r1, [pc, #316]	@ (8000aac <configureSPIBus1+0x178>)
 800096e:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8000972:	4013      	ands	r3, r2
 8000974:	604b      	str	r3, [r1, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5_Msk | GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED7_Msk);
 8000976:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <configureSPIBus1+0x178>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	4a4c      	ldr	r2, [pc, #304]	@ (8000aac <configureSPIBus1+0x178>)
 800097c:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000980:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x03<<GPIO_OSPEEDR_OSPEED5_Pos | 0x03<<GPIO_OSPEEDR_OSPEED6_Pos | 0x03<<GPIO_OSPEEDR_OSPEED7_Pos); //fast mode
 8000982:	4b4a      	ldr	r3, [pc, #296]	@ (8000aac <configureSPIBus1+0x178>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4a49      	ldr	r2, [pc, #292]	@ (8000aac <configureSPIBus1+0x178>)
 8000988:	f443 437c 	orr.w	r3, r3, #64512	@ 0xfc00
 800098c:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));
 800098e:	4b47      	ldr	r3, [pc, #284]	@ (8000aac <configureSPIBus1+0x178>)
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	4a46      	ldr	r2, [pc, #280]	@ (8000aac <configureSPIBus1+0x178>)
 8000994:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000998:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800099c:	6213      	str	r3, [r2, #32]

	//Chip Select for Transducer: PG4
	GPIOG->MODER |= 0x01 << GPIO_MODER_MODE4_Pos;
 800099e:	4b44      	ldr	r3, [pc, #272]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a43      	ldr	r2, [pc, #268]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a8:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD4_Msk);
 80009aa:	4b41      	ldr	r3, [pc, #260]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	4a40      	ldr	r2, [pc, #256]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009b4:	60d3      	str	r3, [r2, #12]
	GPIOG->OTYPER &= ~(0x01 << GPIO_OTYPER_OT4_Pos); //Push Pull
 80009b6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009bc:	f023 0310 	bic.w	r3, r3, #16
 80009c0:	6053      	str	r3, [r2, #4]
	GPIOG->OSPEEDR |= 0x01<<GPIO_OSPEEDR_OSPEED4_Pos;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009cc:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD4; //raise up CS of PG
 80009ce:	4b38      	ldr	r3, [pc, #224]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a37      	ldr	r2, [pc, #220]	@ (8000ab0 <configureSPIBus1+0x17c>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6153      	str	r3, [r2, #20]

	//Chip select for Loadcell: PA2
	GPIOA->MODER |= 0x01 << GPIO_MODER_MODE2_Pos;
 80009da:	4b34      	ldr	r3, [pc, #208]	@ (8000aac <configureSPIBus1+0x178>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a33      	ldr	r2, [pc, #204]	@ (8000aac <configureSPIBus1+0x178>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk);
 80009e6:	4b31      	ldr	r3, [pc, #196]	@ (8000aac <configureSPIBus1+0x178>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	4a30      	ldr	r2, [pc, #192]	@ (8000aac <configureSPIBus1+0x178>)
 80009ec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80009f0:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER |= 0x00 <<GPIO_OTYPER_OT2_Pos;
 80009f2:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <configureSPIBus1+0x178>)
 80009f4:	4a2d      	ldr	r2, [pc, #180]	@ (8000aac <configureSPIBus1+0x178>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 0x01<<GPIO_OSPEEDR_OSPEED2_Pos;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <configureSPIBus1+0x178>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	4a2b      	ldr	r2, [pc, #172]	@ (8000aac <configureSPIBus1+0x178>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6093      	str	r3, [r2, #8]
	GPIOA->ODR |= GPIO_ODR_OD2; //raise up CS of PG
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <configureSPIBus1+0x178>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a28      	ldr	r2, [pc, #160]	@ (8000aac <configureSPIBus1+0x178>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6153      	str	r3, [r2, #20]

	//timer config for SPI1 -> remember to change RCC to allow for TIM7
	TIM7->ARR &= ~(TIM_ARR_ARR_Msk);
 8000a12:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <configureSPIBus1+0x180>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a16:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <configureSPIBus1+0x180>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->PSC &= ~(TIM_PSC_PSC_Msk);
 8000a1c:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <configureSPIBus1+0x180>)
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a20:	4a24      	ldr	r2, [pc, #144]	@ (8000ab4 <configureSPIBus1+0x180>)
 8000a22:	0c1b      	lsrs	r3, r3, #16
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	6293      	str	r3, [r2, #40]	@ 0x28

	SPI1->CR1 &= (~(SPI_CR1_BR_Msk));
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a2e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000a32:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (0x04 <<SPI_CR1_BR_Pos); //SPIclk/32 //~1MHZ
 8000a34:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (SPI_CR1_CPHA); //
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
	//SPI1->CR1 |= SPI_CR1_CPHA; // CPHA mode 1 //comment for mode 0
	SPI1->CR1 |= (SPI_CR1_CPOL);
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6013      	str	r3, [r2, #0]
	//SPI1->CR1 |= SPI_CR1_CPOL; //CPOL mode 1 //comment for mode 0
	//Clock is IDLE high, and polarity is on the falling edge!

	SPI1->CR1 |= SPI_CR1_MSTR; //sets SPI to master mode
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //set both bits;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a6a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a6e:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(SPI_CR1_LSBFIRST); //MSB
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a7a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_DFF; //16 bit mode has been selected!
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a86:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE);
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a8e:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 8000a92:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE; //enables the protocol
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <configureSPIBus1+0x184>)
 8000a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	40001400 	.word	0x40001400
 8000ab8:	40013000 	.word	0x40013000

08000abc <configureSPIBus5>:


void configureSPIBus5(void) // For ADC or external SPI device via SPI5
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
    // Config PF7 (Clock), PF8 (MISO), PF9 (MOSI) for alternate function mode
    GPIOF->MODER &= ~(GPIO_MODER_MODE7_Msk | GPIO_MODER_MODE8_Msk | GPIO_MODER_MODE9_Msk);
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a22      	ldr	r2, [pc, #136]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ac6:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 8000aca:	6013      	str	r3, [r2, #0]
    GPIOF->MODER |= (0x2 << GPIO_MODER_MODE7_Pos) | (0x2 << GPIO_MODER_MODE8_Pos) | (0x2 << GPIO_MODER_MODE9_Pos);
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ad2:	f443 2328 	orr.w	r3, r3, #688128	@ 0xa8000
 8000ad6:	6013      	str	r3, [r2, #0]

    // PUPDs
    GPIOF->PUPDR &= ~(GPIO_PUPDR_PUPD7_Msk | GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ade:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 8000ae2:	60d3      	str	r3, [r2, #12]
    GPIOF->PUPDR |= (0x1 << GPIO_PUPDR_PUPD7_Pos) | (0x1 << GPIO_PUPDR_PUPD8_Pos) | (0x1 << GPIO_PUPDR_PUPD9_Pos);
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <configureSPIBus5+0x94>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <configureSPIBus5+0x94>)
 8000aea:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 8000aee:	60d3      	str	r3, [r2, #12]

    // Push Pull
    GPIOF->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <configureSPIBus5+0x94>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <configureSPIBus5+0x94>)
 8000af6:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8000afa:	6053      	str	r3, [r2, #4]

    // Speed - fast
    GPIOF->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7_Msk | GPIO_OSPEEDR_OSPEED8_Msk | GPIO_OSPEEDR_OSPEED9_Msk);
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <configureSPIBus5+0x94>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b02:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 8000b06:	6093      	str	r3, [r2, #8]
    GPIOF->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED7_Pos) | (0x3 << GPIO_OSPEEDR_OSPEED8_Pos) | (0x3 << GPIO_OSPEEDR_OSPEED9_Pos);
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b0e:	f443 237c 	orr.w	r3, r3, #1032192	@ 0xfc000
 8000b12:	6093      	str	r3, [r2, #8]

    // Alternate Function 5 for SPI5 on PF7, PF8, PF9
    GPIOF->AFR[0] &= ~(0xF << (4 * 7));                      // PF7 (SCK)
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000b1e:	6213      	str	r3, [r2, #32]
    GPIOF->AFR[1] &= ~((0xF << (4 * (8 - 8))) | (0xF << (4 * (9 - 8)))); // PF8, PF9
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b24:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b2a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOF->AFR[0] |= (5 << (4 * 7));
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b32:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000b36:	6213      	str	r3, [r2, #32]
    GPIOF->AFR[1] |= (5 << (4 * (8 - 8))) | (5 << (4 * (9 - 8)));
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <configureSPIBus5+0x94>)
 8000b3e:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000b42:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021400 	.word	0x40021400

08000b54 <configureSPIBus6>:


void configureSPIBus6(void)// 	//for both additional 5V channels and LoRa
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	GPIOG->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk);
 8000b58:	4b58      	ldr	r3, [pc, #352]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a57      	ldr	r2, [pc, #348]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b5e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000b62:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x02 <<GPIO_MODER_MODE12_Pos | 0x02 << GPIO_MODER_MODE13_Pos | 0x02 << GPIO_MODER_MODE14_Pos);
 8000b64:	4b55      	ldr	r3, [pc, #340]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a54      	ldr	r2, [pc, #336]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b6a:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8000b6e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD12_Msk | GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk); //if needing to change internal pull up/downs
 8000b70:	4b52      	ldr	r3, [pc, #328]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	4a51      	ldr	r2, [pc, #324]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b76:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000b7a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |= (0x01 << GPIO_PUPDR_PUPD12_Pos | 0x01 << GPIO_PUPDR_PUPD13_Pos | 0x01 << GPIO_PUPDR_PUPD14_Pos); //internal pull ups on SCK, MOSI and MISO
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4a4e      	ldr	r2, [pc, #312]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b82:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8000b86:	60d3      	str	r3, [r2, #12]
		//@var PG12 = SDO
		//		PG13 = SCLK
		// 		 PG14 = SDI
	//GPIO for LoRa, RF Switch & Chip select
	GPIOG->MODER &= ~(GPIO_MODER_MODE9_Msk | GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 8000b88:	4b4c      	ldr	r3, [pc, #304]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b8e:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8000b92:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x01 <<GPIO_MODER_MODE9_Pos | 0x01 <<GPIO_MODER_MODE10_Pos | 0x01 <<GPIO_MODER_MODE11_Pos);
 8000b94:	4b49      	ldr	r3, [pc, #292]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a48      	ldr	r2, [pc, #288]	@ (8000cbc <configureSPIBus6+0x168>)
 8000b9a:	f443 03a8 	orr.w	r3, r3, #5505024	@ 0x540000
 8000b9e:	6013      	str	r3, [r2, #0]
	//		PG10 = RF_SWITCH
	//		 PG11 = CS

	//timer config for LoRa
		//Use the same config as Australis board
	TIM6->ARR &= ~(TIM_ARR_ARR_Msk);
 8000ba0:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba4:	4b46      	ldr	r3, [pc, #280]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC &= ~(TIM_PSC_PSC_Msk);
 8000baa:	4b45      	ldr	r3, [pc, #276]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bae:	4a44      	ldr	r2, [pc, #272]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR |= 20000;
 8000bb6:	4b42      	ldr	r3, [pc, #264]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bba:	4a41      	ldr	r2, [pc, #260]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bbc:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->PSC |= 251; //same as australis to remain consistent!
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bca:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bcc:	f043 03fb 	orr.w	r3, r3, #251	@ 0xfb
 8000bd0:	6293      	str	r3, [r2, #40]	@ 0x28

	GPIOG->ODR |= (GPIO_ODR_OD9); //hold reset high for SX1272
 8000bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cbc <configureSPIBus6+0x168>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a39      	ldr	r2, [pc, #228]	@ (8000cbc <configureSPIBus6+0x168>)
 8000bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bdc:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //enable TIM6
 8000bde:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a37      	ldr	r2, [pc, #220]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]
//	while((TIM6->CR1 & TIM_SR_UIF)==0); //wait for hardware registers to be updated
	GPIOG->ODR &= ~(GPIO_ODR_OD9); //resets reset on GPIO
 8000bea:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <configureSPIBus6+0x168>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a33      	ldr	r2, [pc, #204]	@ (8000cbc <configureSPIBus6+0x168>)
 8000bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000bf4:	6153      	str	r3, [r2, #20]
	TIM6->CR1 &= ~(TIM_SR_UIF); //clears UIF register
 8000bf6:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a31      	ldr	r2, [pc, #196]	@ (8000cc0 <configureSPIBus6+0x16c>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]

	//
	GPIOG->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT12_Msk | GPIO_OTYPER_OT13_Msk | GPIO_OTYPER_OT14_Msk); //push pull
 8000c02:	4b2e      	ldr	r3, [pc, #184]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	492d      	ldr	r1, [pc, #180]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c08:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED12_Msk | GPIO_OSPEEDR_OSPEED13_Msk | GPIO_OSPEEDR_OSPEED14_Msk);
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c16:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000c1a:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0x02<<GPIO_OSPEEDR_OSPEED12_Pos | 0x02<<GPIO_OSPEEDR_OSPEED13_Pos | 0x02<<GPIO_OSPEEDR_OSPEED14_Pos); //fast mode
 8000c1c:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a26      	ldr	r2, [pc, #152]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c22:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8000c26:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD11; //raise up CS
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a23      	ldr	r2, [pc, #140]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c32:	6153      	str	r3, [r2, #20]

	GPIOG->AFR[1] &= ~((GPIO_AFRH_AFRH5) | (GPIO_AFRH_AFRH6) | (GPIO_AFRH_AFRH7));// alternate functions for SPI3
 8000c34:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c38:	4a20      	ldr	r2, [pc, #128]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c3e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= ((0x05 << 4*4) | (0x05 << 5*4) | (0x05 << 6*4));// alternate functions for SPI3
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <configureSPIBus6+0x168>)
 8000c46:	f043 63aa 	orr.w	r3, r3, #89128960	@ 0x5500000
 8000c4a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000c4e:	6253      	str	r3, [r2, #36]	@ 0x24

    SPI6->CR1 &= ~(SPI_CR1_BR_Msk); // Clear baud rate bits
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c56:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000c5a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= (0x03 << SPI_CR1_BR_Pos); // SPIclk/8
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c62:	f043 0318 	orr.w	r3, r3, #24
 8000c66:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk); // CPHA = 0, CPOL = 0
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_MSTR; // Master mode
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; // Software slave management
 8000c80:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c86:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c8a:	6013      	str	r3, [r2, #0]
    SPI6->CR1 &= ~(SPI_CR1_LSBFIRST); // MSB first
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c96:	6013      	str	r3, [r2, #0]
   // SPI6->CR1 |= SPI_CR1_DFF; // 16-bit mode
    SPI6->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE); // Full duplex
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000c9e:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 8000ca2:	6013      	str	r3, [r2, #0]
    SPI6->CR1 |= SPI_CR1_SPE; // Enable SPI
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <configureSPIBus6+0x170>)
 8000caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40001000 	.word	0x40001000
 8000cc4:	40015400 	.word	0x40015400

08000cc8 <configureRCC_APB1>:
	//rise and repeat for all SPI buses
}


void configureRCC_APB1(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN);
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000cd2:	f423 0381 	bic.w	r3, r3, #4227072	@ 0x408000
 8000cd6:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000ce2:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000ce6:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST |  RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000cf2:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000cf6:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000cfa:	6213      	str	r3, [r2, #32]
	__ASM("NOP");
 8000cfc:	bf00      	nop
	__ASM("NOP");
 8000cfe:	bf00      	nop
	RCC->APB1RSTR &= (uint16_t)~(RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST | RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST);
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	4905      	ldr	r1, [pc, #20]	@ (8000d1c <configureRCC_APB1+0x54>)
 8000d06:	f647 73ce 	movw	r3, #32718	@ 0x7fce
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	620b      	str	r3, [r1, #32]
	__ASM("NOP");
 8000d0e:	bf00      	nop
	__ASM("NOP");
 8000d10:	bf00      	nop
	//configure for more timers when necessary
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800

08000d20 <configureRCC_APB2>:

void configureRCC_APB2(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	RCC->APB2ENR &=  ~(RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN | RCC_APB2ENR_SPI5EN | RCC_APB2ENR_SPI6EN | RCC_APB2ENR_SYSCFGEN /*important for interrupts and other sys init*/| RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN);
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d28:	490f      	ldr	r1, [pc, #60]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <configureRCC_APB2+0x4c>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	644b      	str	r3, [r1, #68]	@ 0x44
	RCC->APB2ENR |=  RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN | RCC_APB2ENR_SPI5EN | RCC_APB2ENR_SPI6EN | RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d34:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <configureRCC_APB2+0x50>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	644b      	str	r3, [r1, #68]	@ 0x44

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST | RCC_APB2RSTR_SPI5RST | RCC_APB2RSTR_SPI6RST | RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d40:	4909      	ldr	r1, [pc, #36]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <configureRCC_APB2+0x54>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000d48:	bf00      	nop
	__ASM("NOP");
 8000d4a:	bf00      	nop
	RCC->APB2RSTR &= (uint16_t)~(RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST| RCC_APB2RSTR_SPI5RST | RCC_APB2RSTR_SPI6RST| RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d50:	4905      	ldr	r1, [pc, #20]	@ (8000d68 <configureRCC_APB2+0x48>)
 8000d52:	f648 73df 	movw	r3, #36831	@ 0x8fdf
 8000d56:	4013      	ands	r3, r2
 8000d58:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 8000d5a:	bf00      	nop
	__ASM("NOP");
 8000d5c:	bf00      	nop
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	ffcf8fde 	.word	0xffcf8fde
 8000d70:	00307021 	.word	0x00307021
 8000d74:	00347020 	.word	0x00347020

08000d78 <configureRCC_AHB1>:
void configureRCC_AHB1(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <configureRCC_AHB1+0x38>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <configureRCC_AHB1+0x38>)
 8000d82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000d86:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <configureRCC_AHB1+0x38>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8c:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <configureRCC_AHB1+0x38>)
 8000d8e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000d92:	6313      	str	r3, [r2, #48]	@ 0x30
	__ASM("NOP");
 8000d94:	bf00      	nop
	__ASM("NOP");
 8000d96:	bf00      	nop
	RCC->AHB1RSTR &= (uint16_t)(~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST));
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <configureRCC_AHB1+0x38>)
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	4904      	ldr	r1, [pc, #16]	@ (8000db0 <configureRCC_AHB1+0x38>)
 8000d9e:	f64f 7382 	movw	r3, #65410	@ 0xff82
 8000da2:	4013      	ands	r3, r2
 8000da4:	610b      	str	r3, [r1, #16]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40023800 	.word	0x40023800

08000db4 <GPIO_init>:
#include "gpio.h"
#include "stm32f4xx_hal.h"


void GPIO_init(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	79ba      	ldrb	r2, [r7, #6]
 8000dda:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7e3a      	ldrb	r2, [r7, #24]
 8000de0:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	7f3a      	ldrb	r2, [r7, #28]
 8000de6:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dee:	711a      	strb	r2, [r3, #4]

	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	79f9      	ldrb	r1, [r7, #7]
 8000df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	79f9      	ldrb	r1, [r7, #7]
 8000e16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	79b9      	ldrb	r1, [r7, #6]
 8000e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	400a      	ands	r2, r1
 8000e44:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	79b9      	ldrb	r1, [r7, #6]
 8000e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	7e39      	ldrb	r1, [r7, #24]
 8000e68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	7e39      	ldrb	r1, [r7, #24]
 8000e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS)); //clears the bit that we want to edit
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	7f39      	ldrb	r1, [r7, #28]
 8000ea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	7f39      	ldrb	r1, [r7, #28]
 8000ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]

}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SX1272_init>:
    GPIO_TypeDef *port,
    unsigned long cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b08c      	sub	sp, #48	@ 0x30
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6278      	str	r0, [r7, #36]	@ 0x24
 8000ee8:	6239      	str	r1, [r7, #32]
 8000eea:	61fa      	str	r2, [r7, #28]
 8000eec:	61bb      	str	r3, [r7, #24]

	SPI_Config spiLoraConfig = SPI_CONFIG_DEFAULT; // Using default settings as base
 8000eee:	2300      	movs	r3, #0
 8000ef0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000efe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f362 03c5 	bfi	r3, r2, #3, #3
 8000f20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f24:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000f30:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	spiLoraConfig.CPHA       = SPI_CPHA_FIRST;     // Begin on first clock edge
 8000f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	spiLoraConfig.CPOL       = SPI_CPOL0;          // Idle clock low
 8000f48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f4c:	f023 0302 	bic.w	r3, r3, #2
 8000f50:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	spiLoraConfig.BR 		= SPI_BR_PCLK16;
 8000f54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f58:	2203      	movs	r2, #3
 8000f5a:	f362 03c5 	bfi	r3, r2, #3, #3
 8000f5e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	static SPI_t base;
	base = SPI_init(SPI6, &spiLoraConfig);
 8000f62:	4c2f      	ldr	r4, [pc, #188]	@ (8001020 <SX1272_init+0x140>)
 8000f64:	463b      	mov	r3, r7
 8000f66:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000f6a:	492e      	ldr	r1, [pc, #184]	@ (8001024 <SX1272_init+0x144>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 f9c3 	bl	80042f8 <SPI_init>
 8000f72:	4625      	mov	r5, r4
 8000f74:	463c      	mov	r4, r7
 8000f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f7e:	e885 0003 	stmia.w	r5, {r0, r1}
	lora->base = &base;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <SX1272_init+0x140>)
 8000f86:	601a      	str	r2, [r3, #0]

  //SPI_init(&lora->base, COMM_LORA, SPI6, MODE8, port, cs);
  lora->standby      = SX1272_standby;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8a:	4a27      	ldr	r2, [pc, #156]	@ (8001028 <SX1272_init+0x148>)
 8000f8c:	60da      	str	r2, [r3, #12]
  lora->enableBoost  = SX1272_enableBoost;
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	4a26      	ldr	r2, [pc, #152]	@ (800102c <SX1272_init+0x14c>)
 8000f92:	609a      	str	r2, [r3, #8]
  lora->transmit     = SX1272_transmit;
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <SX1272_init+0x150>)
 8000f98:	611a      	str	r2, [r3, #16]
  lora->startReceive = SX1272_startReceive;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <SX1272_init+0x154>)
 8000f9e:	615a      	str	r2, [r3, #20]
  lora->readReceive  = SX1272_readReceive;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	4a25      	ldr	r2, [pc, #148]	@ (8001038 <SX1272_init+0x158>)
 8000fa4:	619a      	str	r2, [r3, #24]
  lora->clearIRQ     = SX1272_clearIRQ;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	4a24      	ldr	r2, [pc, #144]	@ (800103c <SX1272_init+0x15c>)
 8000faa:	61da      	str	r2, [r3, #28]


  _SX1272_setMode(lora, SX1272_MODE_SLEEP); // Set mode to sleep
 8000fac:	2100      	movs	r1, #0
 8000fae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fb0:	f000 f8ac 	bl	800110c <_SX1272_setMode>
  //MSB remains the same as default value of E4
 // SX1272_writeRegister(lora, SX1272_REG_FR_MIB, (0xE6)); //sets middle byte
  //SX1272_writeRegister(lora, SX1272_REG_FR_LSB, (0x67)); //sets last byte

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fba:	f000 f9c7 	bl	800134c <SX1272_writeRegister>
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 8000fbe:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8000fc2:	019b      	lsls	r3, r3, #6
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	211d      	movs	r1, #29
 8000fd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fda:	f000 f9b7 	bl	800134c <SX1272_writeRegister>
  );
  /* clang-format on */

  /** @todo set spreading factor */
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 8000fde:	2294      	movs	r2, #148	@ 0x94
 8000fe0:	211e      	movs	r1, #30
 8000fe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fe4:	f000 f9b2 	bl	800134c <SX1272_writeRegister>

  //Set both Tx and Rx FIFO base addresses to 0x00
  SX1272_writeRegister(lora, SX1272_REG_FIFO_TX_BASE_ADDR, 0x00); // Tx starts at 0x00
 8000fe8:	2200      	movs	r2, #0
 8000fea:	210e      	movs	r1, #14
 8000fec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fee:	f000 f9ad 	bl	800134c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_RX_BASE_ADDR, 0x00); // Rx starts at 0x00
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ff8:	f000 f9a8 	bl	800134c <SX1272_writeRegister>


  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2122      	movs	r1, #34	@ 0x22
 8001000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001002:	f000 f9a3 	bl	800134c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8001006:	2220      	movs	r2, #32
 8001008:	2123      	movs	r1, #35	@ 0x23
 800100a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800100c:	f000 f99e 	bl	800134c <SX1272_writeRegister>

  _SX1272_setMode(lora, SX1272_MODE_STDBY); // Set mode to Standby mode!
 8001010:	2101      	movs	r1, #1
 8001012:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001014:	f000 f87a 	bl	800110c <_SX1272_setMode>


}
 8001018:	bf00      	nop
 800101a:	3730      	adds	r7, #48	@ 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bdb0      	pop	{r4, r5, r7, pc}
 8001020:	20000054 	.word	0x20000054
 8001024:	40015400 	.word	0x40015400
 8001028:	080011dd 	.word	0x080011dd
 800102c:	08001149 	.word	0x08001149
 8001030:	080011f5 	.word	0x080011f5
 8001034:	0800126b 	.word	0x0800126b
 8001038:	080012b3 	.word	0x080012b3
 800103c:	0800132b 	.word	0x0800132b

08001040 <Dummy_Transmit>:
  return msg;
}


LoRa_Packet Dummy_Transmit()
{
 8001040:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001044:	b08e      	sub	sp, #56	@ 0x38
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	466b      	mov	r3, sp
 800104c:	461e      	mov	r6, r3
	LoRa_Packet msg;
	uint8_t id = 0x06;
 800104e:	2306      	movs	r3, #6
 8001050:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t SIZE = 32;
 8001054:	2320      	movs	r3, #32
 8001056:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t data[SIZE];
 800105a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800105e:	460b      	mov	r3, r1
 8001060:	3b01      	subs	r3, #1
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
 8001064:	b2cb      	uxtb	r3, r1
 8001066:	2200      	movs	r2, #0
 8001068:	4698      	mov	r8, r3
 800106a:	4691      	mov	r9, r2
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001078:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800107c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001080:	b2cb      	uxtb	r3, r1
 8001082:	2200      	movs	r2, #0
 8001084:	461c      	mov	r4, r3
 8001086:	4615      	mov	r5, r2
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	00eb      	lsls	r3, r5, #3
 8001092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001096:	00e2      	lsls	r2, r4, #3
 8001098:	460b      	mov	r3, r1
 800109a:	3307      	adds	r3, #7
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	ebad 0d03 	sub.w	sp, sp, r3
 80010a4:	466b      	mov	r3, sp
 80010a6:	3300      	adds	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	msg.id = id;
 80010aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80010ae:	733b      	strb	r3, [r7, #12]
	msg.data[0]=0x06;
 80010b0:	2306      	movs	r3, #6
 80010b2:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 1; i <SIZE; i++)
 80010b4:	2301      	movs	r3, #1
 80010b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010ba:	e00c      	b.n	80010d6 <Dummy_Transmit+0x96>
	{
		msg.data[i] = i;
 80010bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010c0:	3338      	adds	r3, #56	@ 0x38
 80010c2:	443b      	add	r3, r7
 80010c4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80010c8:	f803 2c2b 	strb.w	r2, [r3, #-43]
	for(uint8_t i = 1; i <SIZE; i++)
 80010cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010d0:	3301      	adds	r3, #1
 80010d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80010da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ec      	bcc.n	80010bc <Dummy_Transmit+0x7c>
	}
	return msg;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	461d      	mov	r5, r3
 80010e6:	f107 040c 	add.w	r4, r7, #12
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	6028      	str	r0, [r5, #0]
 80010ee:	6069      	str	r1, [r5, #4]
 80010f0:	60aa      	str	r2, [r5, #8]
 80010f2:	60eb      	str	r3, [r5, #12]
 80010f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f6:	6128      	str	r0, [r5, #16]
 80010f8:	6169      	str	r1, [r5, #20]
 80010fa:	61aa      	str	r2, [r5, #24]
 80010fc:	61eb      	str	r3, [r5, #28]
 80010fe:	46b5      	mov	sp, r6
}
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	3738      	adds	r7, #56	@ 0x38
 8001104:	46bd      	mov	sp, r7
 8001106:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800110a:	4770      	bx	lr

0800110c <_SX1272_setMode>:
 *
 * @param lora         Pointer to LoRa struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 8001118:	2101      	movs	r1, #1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f94a 	bl	80013b4 <SX1272_readRegister>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	f023 0307 	bic.w	r3, r3, #7
 800112a:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	4313      	orrs	r3, r2
 8001132:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	461a      	mov	r2, r3
 8001138:	2101      	movs	r1, #1
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f906 	bl	800134c <SX1272_writeRegister>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <SX1272_enableBoost>:
 * @param  enable Boolean value for the enable toggle.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 8001154:	2109      	movs	r1, #9
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f92c 	bl	80013b4 <SX1272_readRegister>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
  regPaConfig         |= SX1272_PA_SELECT;								//Set PA Boost Select
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001166:	73fb      	strb	r3, [r7, #15]
  regPaConfig 		  |= 0x0F;											//Set Gain to MAX
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f043 030f 	orr.w	r3, r3, #15
 800116e:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	461a      	mov	r2, r3
 8001174:	2109      	movs	r1, #9
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f8e8 	bl	800134c <SX1272_writeRegister>
  regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG);		 //DEBUGGING -  Read back in current config and ensure its as expected
 800117c:	2109      	movs	r1, #9
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f918 	bl	80013b4 <SX1272_readRegister>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
  uint8_t regPaDac = SX1272_readRegister(lora, 0x5A);
 8001188:	215a      	movs	r1, #90	@ 0x5a
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f912 	bl	80013b4 <SX1272_readRegister>
 8001190:	4603      	mov	r3, r0
 8001192:	73bb      	strb	r3, [r7, #14]
  regPaDac |= 0x07;														//Set PaDac to +20dbm mode
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	f043 0307 	orr.w	r3, r3, #7
 800119a:	73bb      	strb	r3, [r7, #14]
  SX1272_writeRegister(lora, 0x5A, regPaDac);
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	461a      	mov	r2, r3
 80011a0:	215a      	movs	r1, #90	@ 0x5a
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f8d2 	bl	800134c <SX1272_writeRegister>
  uint8_t regOpC = SX1272_readRegister(lora, 0x0B);
 80011a8:	210b      	movs	r1, #11
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f902 	bl	80013b4 <SX1272_readRegister>
 80011b0:	4603      	mov	r3, r0
 80011b2:	737b      	strb	r3, [r7, #13]
  regOpC |= 0b00100000;														//Disable Overcurrent protection
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	f043 0320 	orr.w	r3, r3, #32
 80011ba:	737b      	strb	r3, [r7, #13]
  SX1272_writeRegister(lora, 0x0B, regOpC);
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	461a      	mov	r2, r3
 80011c0:	210b      	movs	r1, #11
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f8c2 	bl	800134c <SX1272_writeRegister>
  regPaDac = SX1272_readRegister(lora, 0x0B);							//DEBUGGING - Read back in current config and ensure its as expected
 80011c8:	210b      	movs	r1, #11
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f8f2 	bl	80013b4 <SX1272_readRegister>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73bb      	strb	r3, [r7, #14]
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80011e4:	2101      	movs	r1, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff90 	bl	800110c <_SX1272_setMode>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80011fe:	2101      	movs	r1, #1
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff83 	bl	800110c <_SX1272_setMode>
  SX1272_enableBoost(lora, true);
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff9d 	bl	8001148 <SX1272_enableBoost>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 800120e:	2240      	movs	r2, #64	@ 0x40
 8001210:	2140      	movs	r1, #64	@ 0x40
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f89a 	bl	800134c <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 8001218:	2208      	movs	r2, #8
 800121a:	2112      	movs	r1, #18
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f895 	bl	800134c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 8001222:	2200      	movs	r2, #0
 8001224:	210d      	movs	r1, #13
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f890 	bl	800134c <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e00b      	b.n	800124a <SX1272_transmit+0x56>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f884 	bl	800134c <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b1f      	cmp	r3, #31
 800124e:	ddf0      	ble.n	8001232 <SX1272_transmit+0x3e>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2203      	movs	r2, #3
 8001254:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff55 	bl	800110c <_SX1272_setMode>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8001272:	2101      	movs	r1, #1
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff49 	bl	800110c <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 800127a:	2200      	movs	r2, #0
 800127c:	2140      	movs	r1, #64	@ 0x40
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f864 	bl	800134c <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 8001284:	2240      	movs	r2, #64	@ 0x40
 8001286:	2112      	movs	r1, #18
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f85f 	bl	800134c <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 800128e:	2200      	movs	r2, #0
 8001290:	210d      	movs	r1, #13
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f85a 	bl	800134c <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2205      	movs	r2, #5
 800129c:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	4619      	mov	r1, r3
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff31 	bl	800110c <_SX1272_setMode>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 80012b2:	b590      	push	{r4, r7, lr}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	4613      	mov	r3, r2
 80012be:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 80012c0:	2240      	movs	r2, #64	@ 0x40
 80012c2:	2112      	movs	r1, #18
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f841 	bl	800134c <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 80012ca:	2113      	movs	r1, #19
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f871 	bl	80013b4 <SX1272_readRegister>
 80012d2:	4603      	mov	r3, r0
 80012d4:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 80012d6:	2110      	movs	r1, #16
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f86b 	bl	80013b4 <SX1272_readRegister>
 80012de:	4603      	mov	r3, r0
 80012e0:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 80012e2:	7cfa      	ldrb	r2, [r7, #19]
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d901      	bls.n	80012ee <SX1272_readReceive+0x3c>
    return false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e019      	b.n	8001322 <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 80012ee:	7cbb      	ldrb	r3, [r7, #18]
 80012f0:	461a      	mov	r2, r3
 80012f2:	210d      	movs	r1, #13
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f829 	bl	800134c <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00b      	b.n	8001318 <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	18d4      	adds	r4, r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f853 	bl	80013b4 <SX1272_readRegister>
 800130e:	4603      	mov	r3, r0
 8001310:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	7cfb      	ldrb	r3, [r7, #19]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbef      	blt.n	8001300 <SX1272_readReceive+0x4e>
  }

  return true;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}

0800132a <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	461a      	mov	r2, r3
 800133a:	2112      	movs	r1, #18
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f805 	bl	800134c <SX1272_writeRegister>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	4613      	mov	r3, r2
 800135a:	70bb      	strb	r3, [r7, #2]
  SPI_t *spi   = lora->base;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]

  //Pull CS Low
  LORA_CS_GPIO.port->ODR &= ~(LORA_CS);
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <SX1272_writeRegister+0x64>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <SX1272_writeRegister+0x64>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001370:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001378:	72fb      	strb	r3, [r7, #11]
  spi->transmit(spi, payload);      // Transmit payload
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	7afa      	ldrb	r2, [r7, #11]
 8001380:	b292      	uxth	r2, r2
 8001382:	4611      	mov	r1, r2
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	4798      	blx	r3
  spi->transmit(spi, data);         // Transmit write data
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	78ba      	ldrb	r2, [r7, #2]
 800138e:	b292      	uxth	r2, r2
 8001390:	4611      	mov	r1, r2
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	4798      	blx	r3

  //Set CS High
  LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SX1272_writeRegister+0x64>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <SX1272_writeRegister+0x64>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013a4:	615a      	str	r2, [r3, #20]

}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200004f8 	.word	0x200004f8

080013b4 <SX1272_readRegister>:

uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
  SPI_t *spi       = lora->base;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]

  //Pull CS Low
   LORA_CS_GPIO.port->ODR &= ~(LORA_CS);
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <SX1272_readRegister+0x68>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <SX1272_readRegister+0x68>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013d8:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013e0:	73fb      	strb	r3, [r7, #15]
  response        = spi->transmit(spi, payload); // Transmit payload
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4611      	mov	r1, r2
 80013ec:	6938      	ldr	r0, [r7, #16]
 80013ee:	4798      	blx	r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	75fb      	strb	r3, [r7, #23]
  response        = spi->transmit(spi, 0xFF);    // Transmit dummy data and reasd response
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	21ff      	movs	r1, #255	@ 0xff
 80013fa:	6938      	ldr	r0, [r7, #16]
 80013fc:	4798      	blx	r3
 80013fe:	4603      	mov	r3, r0
 8001400:	75fb      	strb	r3, [r7, #23]

  //Set CS High
  LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <SX1272_readRegister+0x68>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SX1272_readRegister+0x68>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001410:	615a      	str	r2, [r3, #20]

  return response;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200004f8 	.word	0x200004f8

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	@ (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db12      	blt.n	8001494 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	490a      	ldr	r1, [pc, #40]	@ (80014a0 <__NVIC_DisableIRQ+0x44>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	3320      	adds	r3, #32
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001488:	f3bf 8f4f 	dsb	sy
}
 800148c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800148e:	f3bf 8f6f 	isb	sy
}
 8001492:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b094      	sub	sp, #80	@ 0x50
 80014fc:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80014fe:	f003 f90f 	bl	8004720 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8001502:	f001 ffc3 	bl	800348c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	configureRCC_APB1();
 8001506:	f7ff fbdf 	bl	8000cc8 <configureRCC_APB1>
	configureRCC_APB2();
 800150a:	f7ff fc09 	bl	8000d20 <configureRCC_APB2>
	configureRCC_AHB1();
 800150e:	f7ff fc33 	bl	8000d78 <configureRCC_AHB1>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	HAL_Delay(100); //important!!
 8001512:	2064      	movs	r0, #100	@ 0x64
 8001514:	f003 f976 	bl	8004804 <HAL_Delay>

	MX_GPIO_Init();
 8001518:	f002 f828 	bl	800356c <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

	configureSPIBus6();
 800151c:	f7ff fb1a 	bl	8000b54 <configureSPIBus6>
	configureSPIBus1();
 8001520:	f7ff fa08 	bl	8000934 <configureSPIBus1>
	configureSPIBus5();
 8001524:	f7ff faca 	bl	8000abc <configureSPIBus5>

	MX_I2C2_Init();
 8001528:	f002 f888 	bl	800363c <MX_I2C2_Init>

	GPIO_init(&LOADCELL_CS, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x02);
 800152c:	2302      	movs	r3, #2
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	2300      	movs	r3, #0
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2301      	movs	r3, #1
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	2201      	movs	r2, #1
 800153c:	49ba      	ldr	r1, [pc, #744]	@ (8001828 <main+0x330>)
 800153e:	48bb      	ldr	r0, [pc, #748]	@ (800182c <main+0x334>)
 8001540:	f7ff fc38 	bl	8000db4 <GPIO_init>
	LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 8001544:	4bb9      	ldr	r3, [pc, #740]	@ (800182c <main+0x334>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	4bb8      	ldr	r3, [pc, #736]	@ (800182c <main+0x334>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	615a      	str	r2, [r3, #20]

	GPIO_init(&ADDITIONAL_ADC_CS, GPIOF, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x06);
 8001554:	2306      	movs	r3, #6
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	2301      	movs	r3, #1
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2300      	movs	r3, #0
 8001562:	2201      	movs	r2, #1
 8001564:	49b2      	ldr	r1, [pc, #712]	@ (8001830 <main+0x338>)
 8001566:	48b3      	ldr	r0, [pc, #716]	@ (8001834 <main+0x33c>)
 8001568:	f7ff fc24 	bl	8000db4 <GPIO_init>
	ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 800156c:	4bb1      	ldr	r3, [pc, #708]	@ (8001834 <main+0x33c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	4bb0      	ldr	r3, [pc, #704]	@ (8001834 <main+0x33c>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800157a:	615a      	str	r2, [r3, #20]

	 SPI_Config 	ADC_SPICONFIG = SPI_CONFIG_DEFAULT; // Using default settings as base
 800157c:	2300      	movs	r3, #0
 800157e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001580:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800158c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001598:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80015a4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015a8:	2202      	movs	r2, #2
 80015aa:	f362 03c5 	bfi	r3, r2, #3, #3
 80015ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80015b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 ADC_SPICONFIG.CPHA        = SPI_CPHA_SECOND;     // Begin on first clock edge
 80015ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	 ADC_SPICONFIG.CPOL        = SPI_CPOL1;          // Idle clock low
 80015d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	 ADC_SPICONFIG.BR 		  = SPI_BR_PCLK16;
 80015e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015e6:	2203      	movs	r2, #3
 80015e8:	f362 03c5 	bfi	r3, r2, #3, #3
 80015ec:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	 ADC_SPICONFIG.DFF		  = SPI_DFF16;
 80015f0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	 static SPI_t ADDTIONAL_ADC;
	 static SPI_t LOADCELL_ADC;
	 ADDTIONAL_ADC = SPI_init(SPI5, &ADC_SPICONFIG);
 80015fc:	4c8e      	ldr	r4, [pc, #568]	@ (8001838 <main+0x340>)
 80015fe:	463b      	mov	r3, r7
 8001600:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001604:	498d      	ldr	r1, [pc, #564]	@ (800183c <main+0x344>)
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fe76 	bl	80042f8 <SPI_init>
 800160c:	4625      	mov	r5, r4
 800160e:	463c      	mov	r4, r7
 8001610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001618:	e885 0003 	stmia.w	r5, {r0, r1}
	 LOADCELL_ADC = SPI_init(SPI1, &ADC_SPICONFIG);
 800161c:	4c88      	ldr	r4, [pc, #544]	@ (8001840 <main+0x348>)
 800161e:	463b      	mov	r3, r7
 8001620:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001624:	4987      	ldr	r1, [pc, #540]	@ (8001844 <main+0x34c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fe66 	bl	80042f8 <SPI_init>
 800162c:	4625      	mov	r5, r4
 800162e:	463c      	mov	r4, r7
 8001630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001638:	e885 0003 	stmia.w	r5, {r0, r1}


	 THERMOCOUPLE_CONFIG(THERMOCOUPLE_1.ADDR, THERMOCOUPLE_1.thermocouple_type);
 800163c:	4b82      	ldr	r3, [pc, #520]	@ (8001848 <main+0x350>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4a81      	ldr	r2, [pc, #516]	@ (8001848 <main+0x350>)
 8001642:	78d2      	ldrb	r2, [r2, #3]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fbf6 	bl	8003e38 <THERMOCOUPLE_CONFIG>
	 THERMOCOUPLE_CONFIG(THERMOCOUPLE_2.ADDR, THERMOCOUPLE_2.thermocouple_type);
 800164c:	4b7f      	ldr	r3, [pc, #508]	@ (800184c <main+0x354>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4a7e      	ldr	r2, [pc, #504]	@ (800184c <main+0x354>)
 8001652:	78d2      	ldrb	r2, [r2, #3]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fbee 	bl	8003e38 <THERMOCOUPLE_CONFIG>
	 THERMOCOUPLE_CONFIG(THERMOCOUPLE_3.ADDR, THERMOCOUPLE_3.thermocouple_type);
 800165c:	4b7c      	ldr	r3, [pc, #496]	@ (8001850 <main+0x358>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4a7b      	ldr	r2, [pc, #492]	@ (8001850 <main+0x358>)
 8001662:	78d2      	ldrb	r2, [r2, #3]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fbe6 	bl	8003e38 <THERMOCOUPLE_CONFIG>
	 THERMOCOUPLE_CONFIG(THERMOCOUPLE_4.ADDR, THERMOCOUPLE_4.thermocouple_type);
 800166c:	4b79      	ldr	r3, [pc, #484]	@ (8001854 <main+0x35c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4a78      	ldr	r2, [pc, #480]	@ (8001854 <main+0x35c>)
 8001672:	78d2      	ldrb	r2, [r2, #3]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fbde 	bl	8003e38 <THERMOCOUPLE_CONFIG>

	//-------------------- SMD LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION
	//PG0 -> Power LED
	GPIO_init(&LED_1, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0C);
 800167c:	230c      	movs	r3, #12
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2301      	movs	r3, #1
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2201      	movs	r2, #1
 800168c:	4966      	ldr	r1, [pc, #408]	@ (8001828 <main+0x330>)
 800168e:	4872      	ldr	r0, [pc, #456]	@ (8001858 <main+0x360>)
 8001690:	f7ff fb90 	bl	8000db4 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&LED_2, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0B);
 8001694:	230b      	movs	r3, #11
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2201      	movs	r2, #1
 80016a4:	4960      	ldr	r1, [pc, #384]	@ (8001828 <main+0x330>)
 80016a6:	486d      	ldr	r0, [pc, #436]	@ (800185c <main+0x364>)
 80016a8:	f7ff fb84 	bl	8000db4 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&LED_3, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0A);
 80016ac:	230a      	movs	r3, #10
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	2201      	movs	r2, #1
 80016bc:	495a      	ldr	r1, [pc, #360]	@ (8001828 <main+0x330>)
 80016be:	4868      	ldr	r0, [pc, #416]	@ (8001860 <main+0x368>)
 80016c0:	f7ff fb78 	bl	8000db4 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&LED_4, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 80016c4:	2309      	movs	r3, #9
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	2201      	movs	r2, #1
 80016d4:	4954      	ldr	r1, [pc, #336]	@ (8001828 <main+0x330>)
 80016d6:	4863      	ldr	r0, [pc, #396]	@ (8001864 <main+0x36c>)
 80016d8:	f7ff fb6c 	bl	8000db4 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&LED_5, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x08);
 80016dc:	2308      	movs	r3, #8
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2301      	movs	r3, #1
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2201      	movs	r2, #1
 80016ec:	494e      	ldr	r1, [pc, #312]	@ (8001828 <main+0x330>)
 80016ee:	485e      	ldr	r0, [pc, #376]	@ (8001868 <main+0x370>)
 80016f0:	f7ff fb60 	bl	8000db4 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&LED_6, GPIOC, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 80016f4:	2309      	movs	r3, #9
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	2201      	movs	r2, #1
 8001704:	4959      	ldr	r1, [pc, #356]	@ (800186c <main+0x374>)
 8001706:	485a      	ldr	r0, [pc, #360]	@ (8001870 <main+0x378>)
 8001708:	f7ff fb54 	bl	8000db4 <GPIO_init>
	//-------------------- LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION

	//PG0 -> Power LED
	GPIO_init(&led_power, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 800170c:	2300      	movs	r3, #0
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2302      	movs	r3, #2
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2301      	movs	r3, #1
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2201      	movs	r2, #1
 800171c:	4955      	ldr	r1, [pc, #340]	@ (8001874 <main+0x37c>)
 800171e:	4856      	ldr	r0, [pc, #344]	@ (8001878 <main+0x380>)
 8001720:	f7ff fb48 	bl	8000db4 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&led_local, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8001724:	2301      	movs	r3, #1
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	2302      	movs	r3, #2
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2301      	movs	r3, #1
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	2201      	movs	r2, #1
 8001734:	494f      	ldr	r1, [pc, #316]	@ (8001874 <main+0x37c>)
 8001736:	4851      	ldr	r0, [pc, #324]	@ (800187c <main+0x384>)
 8001738:	f7ff fb3c 	bl	8000db4 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&led_remote, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x07);
 800173c:	2307      	movs	r3, #7
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	2302      	movs	r3, #2
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2301      	movs	r3, #1
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	2201      	movs	r2, #1
 800174c:	494c      	ldr	r1, [pc, #304]	@ (8001880 <main+0x388>)
 800174e:	484d      	ldr	r0, [pc, #308]	@ (8001884 <main+0x38c>)
 8001750:	f7ff fb30 	bl	8000db4 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&led_transducer, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001754:	2308      	movs	r3, #8
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2302      	movs	r3, #2
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	2301      	movs	r3, #1
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2201      	movs	r2, #1
 8001764:	4946      	ldr	r1, [pc, #280]	@ (8001880 <main+0x388>)
 8001766:	4848      	ldr	r0, [pc, #288]	@ (8001888 <main+0x390>)
 8001768:	f7ff fb24 	bl	8000db4 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&led_n2o, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 800176c:	2305      	movs	r3, #5
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	2302      	movs	r3, #2
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2301      	movs	r3, #1
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	2201      	movs	r2, #1
 800177c:	493d      	ldr	r1, [pc, #244]	@ (8001874 <main+0x37c>)
 800177e:	4843      	ldr	r0, [pc, #268]	@ (800188c <main+0x394>)
 8001780:	f7ff fb18 	bl	8000db4 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&led_o2, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x06);
 8001784:	2306      	movs	r3, #6
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2302      	movs	r3, #2
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2301      	movs	r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	2201      	movs	r2, #1
 8001794:	4937      	ldr	r1, [pc, #220]	@ (8001874 <main+0x37c>)
 8001796:	483e      	ldr	r0, [pc, #248]	@ (8001890 <main+0x398>)
 8001798:	f7ff fb0c 	bl	8000db4 <GPIO_init>

	//-------------------- Control GPIO --------------------------

	//PF15-> Activate_sys SW
	GPIO_init(&activate_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 800179c:	230f      	movs	r3, #15
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2302      	movs	r3, #2
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	2301      	movs	r3, #1
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2300      	movs	r3, #0
 80017aa:	2200      	movs	r2, #0
 80017ac:	4920      	ldr	r1, [pc, #128]	@ (8001830 <main+0x338>)
 80017ae:	4839      	ldr	r0, [pc, #228]	@ (8001894 <main+0x39c>)
 80017b0:	f7ff fb00 	bl	8000db4 <GPIO_init>
	//PF14-> Local_control SW
	GPIO_init(&local_control_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 80017b4:	230e      	movs	r3, #14
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2302      	movs	r3, #2
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2301      	movs	r3, #1
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2200      	movs	r2, #0
 80017c4:	491a      	ldr	r1, [pc, #104]	@ (8001830 <main+0x338>)
 80017c6:	4834      	ldr	r0, [pc, #208]	@ (8001898 <main+0x3a0>)
 80017c8:	f7ff faf4 	bl	8000db4 <GPIO_init>
	//PF13-> N20_ISO SW
	GPIO_init(&N2O_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 80017cc:	230d      	movs	r3, #13
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	2302      	movs	r3, #2
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	2301      	movs	r3, #1
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	2200      	movs	r2, #0
 80017dc:	4914      	ldr	r1, [pc, #80]	@ (8001830 <main+0x338>)
 80017de:	482f      	ldr	r0, [pc, #188]	@ (800189c <main+0x3a4>)
 80017e0:	f7ff fae8 	bl	8000db4 <GPIO_init>
	//PF12-> O2_ISO SW
	GPIO_init(&O2_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80017e4:	230c      	movs	r3, #12
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2302      	movs	r3, #2
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2301      	movs	r3, #1
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	2200      	movs	r2, #0
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <main+0x338>)
 80017f6:	482a      	ldr	r0, [pc, #168]	@ (80018a0 <main+0x3a8>)
 80017f8:	f7ff fadc 	bl	8000db4 <GPIO_init>
	//PF11-> IGNITION_ISO SW
	GPIO_init(&IGNITION_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 80017fc:	230b      	movs	r3, #11
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	2302      	movs	r3, #2
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2301      	movs	r3, #1
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	2200      	movs	r2, #0
 800180c:	4908      	ldr	r1, [pc, #32]	@ (8001830 <main+0x338>)
 800180e:	4825      	ldr	r0, [pc, #148]	@ (80018a4 <main+0x3ac>)
 8001810:	f7ff fad0 	bl	8000db4 <GPIO_init>
	//PB0-> N2O_DEADMAN_SW
	GPIO_init(&N2O_DEAD_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001814:	2300      	movs	r3, #0
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	2302      	movs	r3, #2
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2301      	movs	r3, #1
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2200      	movs	r2, #0
 8001824:	e040      	b.n	80018a8 <main+0x3b0>
 8001826:	bf00      	nop
 8001828:	40020000 	.word	0x40020000
 800182c:	20000510 	.word	0x20000510
 8001830:	40021400 	.word	0x40021400
 8001834:	20000528 	.word	0x20000528
 8001838:	200005a0 	.word	0x200005a0
 800183c:	40015000 	.word	0x40015000
 8001840:	200005b8 	.word	0x200005b8
 8001844:	40013000 	.word	0x40013000
 8001848:	2000000c 	.word	0x2000000c
 800184c:	20000014 	.word	0x20000014
 8001850:	2000001c 	.word	0x2000001c
 8001854:	20000024 	.word	0x20000024
 8001858:	20000378 	.word	0x20000378
 800185c:	20000390 	.word	0x20000390
 8001860:	200003a8 	.word	0x200003a8
 8001864:	200003c0 	.word	0x200003c0
 8001868:	200003d8 	.word	0x200003d8
 800186c:	40020800 	.word	0x40020800
 8001870:	200003f0 	.word	0x200003f0
 8001874:	40021800 	.word	0x40021800
 8001878:	200002e8 	.word	0x200002e8
 800187c:	20000300 	.word	0x20000300
 8001880:	40021000 	.word	0x40021000
 8001884:	20000318 	.word	0x20000318
 8001888:	20000330 	.word	0x20000330
 800188c:	20000348 	.word	0x20000348
 8001890:	20000360 	.word	0x20000360
 8001894:	20000408 	.word	0x20000408
 8001898:	20000420 	.word	0x20000420
 800189c:	20000450 	.word	0x20000450
 80018a0:	20000468 	.word	0x20000468
 80018a4:	20000480 	.word	0x20000480
 80018a8:	49a7      	ldr	r1, [pc, #668]	@ (8001b48 <main+0x650>)
 80018aa:	48a8      	ldr	r0, [pc, #672]	@ (8001b4c <main+0x654>)
 80018ac:	f7ff fa82 	bl	8000db4 <GPIO_init>
	//PC5-> O2_DEADMAN_SW
	GPIO_init(&O2_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 80018b0:	2305      	movs	r3, #5
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	2301      	movs	r3, #1
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	2200      	movs	r2, #0
 80018c0:	49a3      	ldr	r1, [pc, #652]	@ (8001b50 <main+0x658>)
 80018c2:	48a4      	ldr	r0, [pc, #656]	@ (8001b54 <main+0x65c>)
 80018c4:	f7ff fa76 	bl	8000db4 <GPIO_init>
	//PC4-> IGNITE_DEADMAN_SW
	GPIO_init(&IGNITE_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x04);
 80018c8:	2304      	movs	r3, #4
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	2302      	movs	r3, #2
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	2301      	movs	r3, #1
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	499d      	ldr	r1, [pc, #628]	@ (8001b50 <main+0x658>)
 80018da:	489f      	ldr	r0, [pc, #636]	@ (8001b58 <main+0x660>)
 80018dc:	f7ff fa6a 	bl	8000db4 <GPIO_init>

	//-------------------- IGNITE ACTUATION GPIO --------------------------
	GPIO_init(&Ignition1_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 80018e0:	230f      	movs	r3, #15
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2301      	movs	r3, #1
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	2201      	movs	r2, #1
 80018f0:	499a      	ldr	r1, [pc, #616]	@ (8001b5c <main+0x664>)
 80018f2:	489b      	ldr	r0, [pc, #620]	@ (8001b60 <main+0x668>)
 80018f4:	f7ff fa5e 	bl	8000db4 <GPIO_init>
	GPIO_init(&Ignition1_OP ,GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 80018f8:	230e      	movs	r3, #14
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	2302      	movs	r3, #2
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2301      	movs	r3, #1
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	2201      	movs	r2, #1
 8001908:	4994      	ldr	r1, [pc, #592]	@ (8001b5c <main+0x664>)
 800190a:	4896      	ldr	r0, [pc, #600]	@ (8001b64 <main+0x66c>)
 800190c:	f7ff fa52 	bl	8000db4 <GPIO_init>



	GPIO_init(&Ignition2_ARM, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x03);
 8001910:	2303      	movs	r3, #3
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2302      	movs	r3, #2
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2301      	movs	r3, #1
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	2201      	movs	r2, #1
 8001920:	4991      	ldr	r1, [pc, #580]	@ (8001b68 <main+0x670>)
 8001922:	4892      	ldr	r0, [pc, #584]	@ (8001b6c <main+0x674>)
 8001924:	f7ff fa46 	bl	8000db4 <GPIO_init>
	GPIO_init(&Ignition2_OP ,GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x02);
 8001928:	2302      	movs	r3, #2
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	2302      	movs	r3, #2
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	2301      	movs	r3, #1
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2300      	movs	r3, #0
 8001936:	2201      	movs	r2, #1
 8001938:	498b      	ldr	r1, [pc, #556]	@ (8001b68 <main+0x670>)
 800193a:	488d      	ldr	r0, [pc, #564]	@ (8001b70 <main+0x678>)
 800193c:	f7ff fa3a 	bl	8000db4 <GPIO_init>
	//Disarm Ignition circuit
	Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8001940:	4b8a      	ldr	r3, [pc, #552]	@ (8001b6c <main+0x674>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	4b89      	ldr	r3, [pc, #548]	@ (8001b6c <main+0x674>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f042 0208 	orr.w	r2, r2, #8
 800194e:	615a      	str	r2, [r3, #20]
	Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8001950:	4b87      	ldr	r3, [pc, #540]	@ (8001b70 <main+0x678>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	4b86      	ldr	r3, [pc, #536]	@ (8001b70 <main+0x678>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f042 0204 	orr.w	r2, r2, #4
 800195e:	615a      	str	r2, [r3, #20]


	//-------------------- RELAY ACTUATION GPIO --------------------------
	//Relay 1 ->PURGE Relay
	GPIO_init(&CH1_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001960:	230d      	movs	r3, #13
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2302      	movs	r3, #2
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2300      	movs	r3, #0
 800196e:	2201      	movs	r2, #1
 8001970:	4975      	ldr	r1, [pc, #468]	@ (8001b48 <main+0x650>)
 8001972:	4880      	ldr	r0, [pc, #512]	@ (8001b74 <main+0x67c>)
 8001974:	f7ff fa1e 	bl	8000db4 <GPIO_init>
	GPIO_init(&CH1_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0E);
 8001978:	230e      	movs	r3, #14
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2302      	movs	r3, #2
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2301      	movs	r3, #1
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	2201      	movs	r2, #1
 8001988:	496f      	ldr	r1, [pc, #444]	@ (8001b48 <main+0x650>)
 800198a:	487b      	ldr	r0, [pc, #492]	@ (8001b78 <main+0x680>)
 800198c:	f7ff fa12 	bl	8000db4 <GPIO_init>
	GPIO_init(&CH1_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0B);
 8001990:	230b      	movs	r3, #11
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	2302      	movs	r3, #2
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2301      	movs	r3, #1
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	2200      	movs	r2, #0
 80019a0:	4969      	ldr	r1, [pc, #420]	@ (8001b48 <main+0x650>)
 80019a2:	4876      	ldr	r0, [pc, #472]	@ (8001b7c <main+0x684>)
 80019a4:	f7ff fa06 	bl	8000db4 <GPIO_init>

	//Relay 2 -> O2 Relay
	GPIO_init(&CH2_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 80019a8:	230a      	movs	r3, #10
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2300      	movs	r3, #0
 80019b6:	2201      	movs	r2, #1
 80019b8:	4963      	ldr	r1, [pc, #396]	@ (8001b48 <main+0x650>)
 80019ba:	4871      	ldr	r0, [pc, #452]	@ (8001b80 <main+0x688>)
 80019bc:	f7ff f9fa 	bl	8000db4 <GPIO_init>
	GPIO_init(&CH2_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80019c0:	230c      	movs	r3, #12
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	2201      	movs	r2, #1
 80019d0:	495d      	ldr	r1, [pc, #372]	@ (8001b48 <main+0x650>)
 80019d2:	486c      	ldr	r0, [pc, #432]	@ (8001b84 <main+0x68c>)
 80019d4:	f7ff f9ee 	bl	8000db4 <GPIO_init>
	GPIO_init(&CH2_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 80019d8:	230f      	movs	r3, #15
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2302      	movs	r3, #2
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2301      	movs	r3, #1
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	2200      	movs	r2, #0
 80019e8:	4957      	ldr	r1, [pc, #348]	@ (8001b48 <main+0x650>)
 80019ea:	4867      	ldr	r0, [pc, #412]	@ (8001b88 <main+0x690>)
 80019ec:	f7ff f9e2 	bl	8000db4 <GPIO_init>

	//Relay 3 -> N20 Relay
	GPIO_init(&CH3_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 80019f0:	230b      	movs	r3, #11
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	2302      	movs	r3, #2
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2301      	movs	r3, #1
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2300      	movs	r3, #0
 80019fe:	2201      	movs	r2, #1
 8001a00:	4956      	ldr	r1, [pc, #344]	@ (8001b5c <main+0x664>)
 8001a02:	4862      	ldr	r0, [pc, #392]	@ (8001b8c <main+0x694>)
 8001a04:	f7ff f9d6 	bl	8000db4 <GPIO_init>
	GPIO_init(&CH3_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001a08:	230c      	movs	r3, #12
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2301      	movs	r3, #1
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2300      	movs	r3, #0
 8001a16:	2201      	movs	r2, #1
 8001a18:	4950      	ldr	r1, [pc, #320]	@ (8001b5c <main+0x664>)
 8001a1a:	485d      	ldr	r0, [pc, #372]	@ (8001b90 <main+0x698>)
 8001a1c:	f7ff f9ca 	bl	8000db4 <GPIO_init>
	GPIO_init(&CH3_MON, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001a20:	2308      	movs	r3, #8
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	2302      	movs	r3, #2
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2201      	movs	r2, #1
 8001a30:	494a      	ldr	r1, [pc, #296]	@ (8001b5c <main+0x664>)
 8001a32:	4858      	ldr	r0, [pc, #352]	@ (8001b94 <main+0x69c>)
 8001a34:	f7ff f9be 	bl	8000db4 <GPIO_init>

	//Relay 4 //for future expansion
	 GPIO_init(&CH4_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 8001a38:	2309      	movs	r3, #9
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	2201      	movs	r2, #1
 8001a48:	4944      	ldr	r1, [pc, #272]	@ (8001b5c <main+0x664>)
 8001a4a:	4853      	ldr	r0, [pc, #332]	@ (8001b98 <main+0x6a0>)
 8001a4c:	f7ff f9b2 	bl	8000db4 <GPIO_init>
	 GPIO_init(&CH4_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001a50:	230a      	movs	r3, #10
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	2302      	movs	r3, #2
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2201      	movs	r2, #1
 8001a60:	493e      	ldr	r1, [pc, #248]	@ (8001b5c <main+0x664>)
 8001a62:	484e      	ldr	r0, [pc, #312]	@ (8001b9c <main+0x6a4>)
 8001a64:	f7ff f9a6 	bl	8000db4 <GPIO_init>
	 GPIO_init(&CH4_MON, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001a68:	230d      	movs	r3, #13
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2301      	movs	r3, #1
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	4938      	ldr	r1, [pc, #224]	@ (8001b5c <main+0x664>)
 8001a7a:	4849      	ldr	r0, [pc, #292]	@ (8001ba0 <main+0x6a8>)
 8001a7c:	f7ff f99a 	bl	8000db4 <GPIO_init>



	 GPIO_init(&RF_SW, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0A);
 8001a80:	230a      	movs	r3, #10
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4935      	ldr	r1, [pc, #212]	@ (8001b68 <main+0x670>)
 8001a92:	4844      	ldr	r0, [pc, #272]	@ (8001ba4 <main+0x6ac>)
 8001a94:	f7ff f98e 	bl	8000db4 <GPIO_init>

	 GPIO_init(&LORA_CS_GPIO, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0B);
 8001a98:	230b      	movs	r3, #11
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	492f      	ldr	r1, [pc, #188]	@ (8001b68 <main+0x670>)
 8001aaa:	483f      	ldr	r0, [pc, #252]	@ (8001ba8 <main+0x6b0>)
 8001aac:	f7ff f982 	bl	8000db4 <GPIO_init>

	 RF_SW.port->ODR |= (GPIO_ODR_OD10);
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <main+0x6ac>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <main+0x6ac>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001abe:	615a      	str	r2, [r3, #20]
	 LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8001ac0:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <main+0x6b0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b38      	ldr	r3, [pc, #224]	@ (8001ba8 <main+0x6b0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ace:	615a      	str	r2, [r3, #20]

	 //Ensure CH1-4 is turned off, as its currently unused
	 CH1_ARM.port->ODR &= ~(CH1_Arm);
 8001ad0:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <main+0x680>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <main+0x680>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ade:	615a      	str	r2, [r3, #20]
	 CH1_OP.port->ODR &= ~(CH1_Operate);
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <main+0x67c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <main+0x67c>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001aee:	615a      	str	r2, [r3, #20]
	 CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <main+0x68c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <main+0x68c>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001afe:	615a      	str	r2, [r3, #20]
	 CH2_OP.port->ODR &= ~(CH2_Operate);
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <main+0x688>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <main+0x688>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b0e:	615a      	str	r2, [r3, #20]
	 CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <main+0x698>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <main+0x698>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b1e:	615a      	str	r2, [r3, #20]
	 CH3_OP.port->ODR &= ~(CH3_Operate);
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <main+0x694>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <main+0x694>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2e:	615a      	str	r2, [r3, #20]
	 CH4_ARM.port->ODR &= ~(CH4_Arm);
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <main+0x6a4>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <main+0x6a4>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b3e:	615a      	str	r2, [r3, #20]
	 CH4_OP.port->ODR &= ~(CH4_Operate);
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <main+0x6a0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	e031      	b.n	8001bac <main+0x6b4>
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	20000498 	.word	0x20000498
 8001b50:	40020800 	.word	0x40020800
 8001b54:	200004b0 	.word	0x200004b0
 8001b58:	200004c8 	.word	0x200004c8
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	20000288 	.word	0x20000288
 8001b64:	200002a0 	.word	0x200002a0
 8001b68:	40021800 	.word	0x40021800
 8001b6c:	200002b8 	.word	0x200002b8
 8001b70:	200002d0 	.word	0x200002d0
 8001b74:	20000168 	.word	0x20000168
 8001b78:	20000180 	.word	0x20000180
 8001b7c:	20000198 	.word	0x20000198
 8001b80:	200001b0 	.word	0x200001b0
 8001b84:	200001c8 	.word	0x200001c8
 8001b88:	200001e0 	.word	0x200001e0
 8001b8c:	200001f8 	.word	0x200001f8
 8001b90:	20000210 	.word	0x20000210
 8001b94:	20000228 	.word	0x20000228
 8001b98:	20000240 	.word	0x20000240
 8001b9c:	20000258 	.word	0x20000258
 8001ba0:	20000270 	.word	0x20000270
 8001ba4:	200004e0 	.word	0x200004e0
 8001ba8:	200004f8 	.word	0x200004f8
 8001bac:	4b9d      	ldr	r3, [pc, #628]	@ (8001e24 <main+0x92c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bb4:	615a      	str	r2, [r3, #20]




	//Make sure interrupts are configured BEFORE interupts
	GPIO_init(&LoRa_Rx_int, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x07);
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4998      	ldr	r1, [pc, #608]	@ (8001e28 <main+0x930>)
 8001bc8:	4898      	ldr	r0, [pc, #608]	@ (8001e2c <main+0x934>)
 8001bca:	f7ff f8f3 	bl	8000db4 <GPIO_init>
	//NVIC_DisableIRQ(EXTI9_5_IRQn); //easier than changing the function GPIO_init_interrupt
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 8001bce:	4b98      	ldr	r3, [pc, #608]	@ (8001e30 <main+0x938>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a97      	ldr	r2, [pc, #604]	@ (8001e30 <main+0x938>)
 8001bd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bd8:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PD;
 8001bda:	4b95      	ldr	r3, [pc, #596]	@ (8001e30 <main+0x938>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4a94      	ldr	r2, [pc, #592]	@ (8001e30 <main+0x938>)
 8001be0:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8001be4:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR &= ~EXTI_FTSR_TR7_Msk;
 8001be6:	4b93      	ldr	r3, [pc, #588]	@ (8001e34 <main+0x93c>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a92      	ldr	r2, [pc, #584]	@ (8001e34 <main+0x93c>)
 8001bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bf0:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_TR7;
 8001bf2:	4b90      	ldr	r3, [pc, #576]	@ (8001e34 <main+0x93c>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	4a8f      	ldr	r2, [pc, #572]	@ (8001e34 <main+0x93c>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bfc:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8001bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8001e34 <main+0x93c>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	4a8c      	ldr	r2, [pc, #560]	@ (8001e34 <main+0x93c>)
 8001c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c08:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR7;
 8001c0a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e34 <main+0x93c>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a89      	ldr	r2, [pc, #548]	@ (8001e34 <main+0x93c>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c14:	6093      	str	r3, [r2, #8]
	EXTI->IMR &= ~EXTI_IMR_IM7;
 8001c16:	4b87      	ldr	r3, [pc, #540]	@ (8001e34 <main+0x93c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a86      	ldr	r2, [pc, #536]	@ (8001e34 <main+0x93c>)
 8001c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c20:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM7;
 8001c22:	4b84      	ldr	r3, [pc, #528]	@ (8001e34 <main+0x93c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a83      	ldr	r2, [pc, #524]	@ (8001e34 <main+0x93c>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	6013      	str	r3, [r2, #0]

	//here is channel for loRa PD7
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c2e:	2017      	movs	r0, #23
 8001c30:	f7ff fbf6 	bl	8001420 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn,9);
 8001c34:	2109      	movs	r1, #9
 8001c36:	2017      	movs	r0, #23
 8001c38:	f7ff fc34 	bl	80014a4 <__NVIC_SetPriority>
	//re-enable to turn on LoRa RX interrupt!

	SX1272_init(&lora,"GSE_LORA", LORA_PORT, LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	2309      	movs	r3, #9
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c4c:	4a76      	ldr	r2, [pc, #472]	@ (8001e28 <main+0x930>)
 8001c4e:	497a      	ldr	r1, [pc, #488]	@ (8001e38 <main+0x940>)
 8001c50:	487a      	ldr	r0, [pc, #488]	@ (8001e3c <main+0x944>)
 8001c52:	f7ff f945 	bl	8000ee0 <SX1272_init>
	SX1272_startReceive(&lora);
 8001c56:	4879      	ldr	r0, [pc, #484]	@ (8001e3c <main+0x944>)
 8001c58:	f7ff fb07 	bl	800126a <SX1272_startReceive>
	SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
 8001c5c:	2140      	movs	r1, #64	@ 0x40
 8001c5e:	4877      	ldr	r0, [pc, #476]	@ (8001e3c <main+0x944>)
 8001c60:	f7ff fb63 	bl	800132a <SX1272_clearIRQ>

	//Ensure SMD LEDs are turned OFF on bootup
	LED_1.port -> ODR &= ~LED_1_PWR;
 8001c64:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <main+0x948>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b75      	ldr	r3, [pc, #468]	@ (8001e40 <main+0x948>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c72:	615a      	str	r2, [r3, #20]
	LED_2.port -> ODR &= ~LED_2_PWR;
 8001c74:	4b73      	ldr	r3, [pc, #460]	@ (8001e44 <main+0x94c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b72      	ldr	r3, [pc, #456]	@ (8001e44 <main+0x94c>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c82:	615a      	str	r2, [r3, #20]
	LED_3.port -> ODR &= ~LED_3_PWR;
 8001c84:	4b70      	ldr	r3, [pc, #448]	@ (8001e48 <main+0x950>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e48 <main+0x950>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c92:	615a      	str	r2, [r3, #20]
	LED_4.port -> ODR &= ~LED_4_PWR;
 8001c94:	4b6d      	ldr	r3, [pc, #436]	@ (8001e4c <main+0x954>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e4c <main+0x954>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ca2:	615a      	str	r2, [r3, #20]
	LED_5.port -> ODR &= ~LED_5_PWR;
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <main+0x958>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	4b69      	ldr	r3, [pc, #420]	@ (8001e50 <main+0x958>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb2:	615a      	str	r2, [r3, #20]
	LED_6.port -> ODR &= ~LED_6_PWR;
 8001cb4:	4b67      	ldr	r3, [pc, #412]	@ (8001e54 <main+0x95c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	4b66      	ldr	r3, [pc, #408]	@ (8001e54 <main+0x95c>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cc2:	615a      	str	r2, [r3, #20]

	CH1_ARM.port->ODR &= ~(CH1_Arm);
 8001cc4:	4b64      	ldr	r3, [pc, #400]	@ (8001e58 <main+0x960>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	4b63      	ldr	r3, [pc, #396]	@ (8001e58 <main+0x960>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cd2:	615a      	str	r2, [r3, #20]
	CH1_OP.port->ODR &= ~(CH1_Operate);
 8001cd4:	4b61      	ldr	r3, [pc, #388]	@ (8001e5c <main+0x964>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	4b60      	ldr	r3, [pc, #384]	@ (8001e5c <main+0x964>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ce2:	615a      	str	r2, [r3, #20]


	CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e60 <main+0x968>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	4b5d      	ldr	r3, [pc, #372]	@ (8001e60 <main+0x968>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cf2:	615a      	str	r2, [r3, #20]
	CH2_OP.port->ODR &= ~(CH2_Operate);
 8001cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e64 <main+0x96c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <main+0x96c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d02:	615a      	str	r2, [r3, #20]

	CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001d04:	4b58      	ldr	r3, [pc, #352]	@ (8001e68 <main+0x970>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	4b57      	ldr	r3, [pc, #348]	@ (8001e68 <main+0x970>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d12:	615a      	str	r2, [r3, #20]
	CH3_OP.port->ODR &= ~(CH3_Operate);
 8001d14:	4b55      	ldr	r3, [pc, #340]	@ (8001e6c <main+0x974>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <main+0x974>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d22:	615a      	str	r2, [r3, #20]

	CH4_ARM.port->ODR &= ~(CH4_Arm);
 8001d24:	4b52      	ldr	r3, [pc, #328]	@ (8001e70 <main+0x978>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	4b51      	ldr	r3, [pc, #324]	@ (8001e70 <main+0x978>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d32:	615a      	str	r2, [r3, #20]
	CH4_OP.port->ODR &= ~(CH4_Operate);
 8001d34:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <main+0x92c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e24 <main+0x92c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d42:	615a      	str	r2, [r3, #20]

	state = 0x00;
 8001d44:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <main+0x97c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
	}
	*/



	switch_case_state = 0x0;
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <main+0x980>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
//Resetting Indentation from the start, cos I CBF changing the entire code - JC 0503025
while (1) {

	switch(switch_case_state){
 8001d50:	4b49      	ldr	r3, [pc, #292]	@ (8001e78 <main+0x980>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	dc27      	bgt.n	8001da8 <main+0x8b0>
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	dbf9      	blt.n	8001d50 <main+0x858>
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d8f7      	bhi.n	8001d50 <main+0x858>
 8001d60:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <main+0x870>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001db1 	.word	0x08001db1
 8001d6c:	08002671 	.word	0x08002671
 8001d70:	08002795 	.word	0x08002795
 8001d74:	08002803 	.word	0x08002803
 8001d78:	0800282b 	.word	0x0800282b
 8001d7c:	08001d51 	.word	0x08001d51
 8001d80:	08001d51 	.word	0x08001d51
 8001d84:	08002cad 	.word	0x08002cad
 8001d88:	08002e55 	.word	0x08002e55
 8001d8c:	08002ffd 	.word	0x08002ffd
 8001d90:	08003199 	.word	0x08003199
 8001d94:	08001d51 	.word	0x08001d51
 8001d98:	08001d51 	.word	0x08001d51
 8001d9c:	08001d51 	.word	0x08001d51
 8001da0:	08001d51 	.word	0x08001d51
 8001da4:	08002a15 	.word	0x08002a15
 8001da8:	2b80      	cmp	r3, #128	@ 0x80
 8001daa:	f001 8289 	beq.w	80032c0 <main+0x1dc8>
 8001dae:	e7cf      	b.n	8001d50 <main+0x858>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001db0:	b662      	cpsie	i
}
 8001db2:	bf00      	nop
	case 0:

		__enable_irq();


		LED_1.port -> ODR |= LED_1_PWR;
 8001db4:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <main+0x948>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <main+0x948>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001dc2:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <main+0x94c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <main+0x94c>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dd2:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <main+0x950>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <main+0x950>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001de2:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <main+0x954>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <main+0x954>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df2:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <main+0x958>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <main+0x958>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e02:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <main+0x95c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <main+0x95c>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e12:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <main+0x984>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d031      	beq.n	8001e80 <main+0x988>
 8001e1c:	f001 fd28 	bl	8003870 <RX_Receive>
 8001e20:	e02f      	b.n	8001e82 <main+0x98a>
 8001e22:	bf00      	nop
 8001e24:	20000240 	.word	0x20000240
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	20000150 	.word	0x20000150
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40013c00 	.word	0x40013c00
 8001e38:	080067f4 	.word	0x080067f4
 8001e3c:	200000f0 	.word	0x200000f0
 8001e40:	20000378 	.word	0x20000378
 8001e44:	20000390 	.word	0x20000390
 8001e48:	200003a8 	.word	0x200003a8
 8001e4c:	200003c0 	.word	0x200003c0
 8001e50:	200003d8 	.word	0x200003d8
 8001e54:	200003f0 	.word	0x200003f0
 8001e58:	20000180 	.word	0x20000180
 8001e5c:	20000168 	.word	0x20000168
 8001e60:	200001c8 	.word	0x200001c8
 8001e64:	200001b0 	.word	0x200001b0
 8001e68:	20000210 	.word	0x20000210
 8001e6c:	200001f8 	.word	0x200001f8
 8001e70:	20000258 	.word	0x20000258
 8001e74:	200000c1 	.word	0x200000c1
 8001e78:	200000c0 	.word	0x200000c0
 8001e7c:	200000ca 	.word	0x200000ca
 8001e80:	bf00      	nop

//Extract Thermocouple Temp
		//To Do - Issues with Thermocouples ATM with accurate readings
		THERMOCOUPLE_1.temp = THERMOCOUPLE_GETTEMP(THERMOCOUPLE_1.ADDR);
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <main+0x9f8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 f9e2 	bl	8004250 <THERMOCOUPLE_GETTEMP>
 8001e8c:	eef0 7a40 	vmov.f32	s15, s0
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <main+0x9f8>)
 8001e92:	edc3 7a01 	vstr	s15, [r3, #4]
		THERMOCOUPLE_2.temp = THERMOCOUPLE_GETTEMP(THERMOCOUPLE_2.ADDR);
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <main+0x9fc>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 f9d8 	bl	8004250 <THERMOCOUPLE_GETTEMP>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <main+0x9fc>)
 8001ea6:	edc3 7a01 	vstr	s15, [r3, #4]
		THERMOCOUPLE_3.temp = THERMOCOUPLE_GETTEMP(THERMOCOUPLE_3.ADDR);
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <main+0xa00>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 f9ce 	bl	8004250 <THERMOCOUPLE_GETTEMP>
 8001eb4:	eef0 7a40 	vmov.f32	s15, s0
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <main+0xa00>)
 8001eba:	edc3 7a01 	vstr	s15, [r3, #4]
		THERMOCOUPLE_4.temp = THERMOCOUPLE_GETTEMP(THERMOCOUPLE_4.ADDR);
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <main+0xa04>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 f9c4 	bl	8004250 <THERMOCOUPLE_GETTEMP>
 8001ec8:	eef0 7a40 	vmov.f32	s15, s0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <main+0xa04>)
 8001ece:	edc3 7a01 	vstr	s15, [r3, #4]


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <main+0xa08>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <main+0x9e8>
 8001eda:	f001 fcc9 	bl	8003870 <RX_Receive>
 8001ede:	e000      	b.n	8001ee2 <main+0x9ea>
 8001ee0:	bf00      	nop
		}

		*/

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <main+0xa08>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00c      	beq.n	8001f04 <main+0xa0c>
 8001eea:	f001 fcc1 	bl	8003870 <RX_Receive>
 8001eee:	e00a      	b.n	8001f06 <main+0xa0e>
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	20000014 	.word	0x20000014
 8001ef8:	2000001c 	.word	0x2000001c
 8001efc:	20000024 	.word	0x20000024
 8001f00:	200000ca 	.word	0x200000ca
 8001f04:	bf00      	nop
//Get Pressure Readings from Transducers

		//Done with Matt's SPI lib - JC 30/04/2025


		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001f06:	4bac      	ldr	r3, [pc, #688]	@ (80021b8 <main+0xcc0>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	4baa      	ldr	r3, [pc, #680]	@ (80021b8 <main+0xcc0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f14:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_1.raw_data = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH1);
 8001f16:	4ba9      	ldr	r3, [pc, #676]	@ (80021bc <main+0xcc4>)
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	48a7      	ldr	r0, [pc, #668]	@ (80021bc <main+0xcc4>)
 8001f20:	4798      	blx	r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	4ba6      	ldr	r3, [pc, #664]	@ (80021c0 <main+0xcc8>)
 8001f28:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001f2a:	4ba3      	ldr	r3, [pc, #652]	@ (80021b8 <main+0xcc0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	4ba1      	ldr	r3, [pc, #644]	@ (80021b8 <main+0xcc0>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f38:	615a      	str	r2, [r3, #20]
		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80021b8 <main+0xcc0>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	4b9d      	ldr	r3, [pc, #628]	@ (80021b8 <main+0xcc0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f48:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_1.raw_data = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH1);
 8001f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80021bc <main+0xcc4>)
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4611      	mov	r1, r2
 8001f52:	489a      	ldr	r0, [pc, #616]	@ (80021bc <main+0xcc4>)
 8001f54:	4798      	blx	r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b99      	ldr	r3, [pc, #612]	@ (80021c0 <main+0xcc8>)
 8001f5c:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001f5e:	4b96      	ldr	r3, [pc, #600]	@ (80021b8 <main+0xcc0>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	4b94      	ldr	r3, [pc, #592]	@ (80021b8 <main+0xcc0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f6c:	615a      	str	r2, [r3, #20]

		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001f6e:	4b92      	ldr	r3, [pc, #584]	@ (80021b8 <main+0xcc0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	4b90      	ldr	r3, [pc, #576]	@ (80021b8 <main+0xcc0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f7c:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_2.raw_data = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH2);
 8001f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80021bc <main+0xcc4>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f86:	4611      	mov	r1, r2
 8001f88:	488c      	ldr	r0, [pc, #560]	@ (80021bc <main+0xcc4>)
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b8c      	ldr	r3, [pc, #560]	@ (80021c4 <main+0xccc>)
 8001f92:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001f94:	4b88      	ldr	r3, [pc, #544]	@ (80021b8 <main+0xcc0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	4b87      	ldr	r3, [pc, #540]	@ (80021b8 <main+0xcc0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fa2:	615a      	str	r2, [r3, #20]
		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001fa4:	4b84      	ldr	r3, [pc, #528]	@ (80021b8 <main+0xcc0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b83      	ldr	r3, [pc, #524]	@ (80021b8 <main+0xcc0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fb2:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_2.raw_data = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH2);
 8001fb4:	4b81      	ldr	r3, [pc, #516]	@ (80021bc <main+0xcc4>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	487f      	ldr	r0, [pc, #508]	@ (80021bc <main+0xcc4>)
 8001fc0:	4798      	blx	r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80021c4 <main+0xccc>)
 8001fc8:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8001fca:	4b7b      	ldr	r3, [pc, #492]	@ (80021b8 <main+0xcc0>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b79      	ldr	r3, [pc, #484]	@ (80021b8 <main+0xcc0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fd8:	615a      	str	r2, [r3, #20]

		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8001fda:	4b77      	ldr	r3, [pc, #476]	@ (80021b8 <main+0xcc0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	4b75      	ldr	r3, [pc, #468]	@ (80021b8 <main+0xcc0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fe8:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_3.raw_data = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH3);
 8001fea:	4b74      	ldr	r3, [pc, #464]	@ (80021bc <main+0xcc4>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4871      	ldr	r0, [pc, #452]	@ (80021bc <main+0xcc4>)
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b72      	ldr	r3, [pc, #456]	@ (80021c8 <main+0xcd0>)
 8001ffe:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8002000:	4b6d      	ldr	r3, [pc, #436]	@ (80021b8 <main+0xcc0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	4b6c      	ldr	r3, [pc, #432]	@ (80021b8 <main+0xcc0>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800200e:	615a      	str	r2, [r3, #20]
		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8002010:	4b69      	ldr	r3, [pc, #420]	@ (80021b8 <main+0xcc0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	4b68      	ldr	r3, [pc, #416]	@ (80021b8 <main+0xcc0>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800201e:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_3.raw_data = ADDTIONAL_ADC.transmit(&ADDTIONAL_ADC, ADC_CH3);
 8002020:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <main+0xcc4>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002028:	4611      	mov	r1, r2
 800202a:	4864      	ldr	r0, [pc, #400]	@ (80021bc <main+0xcc4>)
 800202c:	4798      	blx	r3
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	4b65      	ldr	r3, [pc, #404]	@ (80021c8 <main+0xcd0>)
 8002034:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 8002036:	4b60      	ldr	r3, [pc, #384]	@ (80021b8 <main+0xcc0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	4b5e      	ldr	r3, [pc, #376]	@ (80021b8 <main+0xcc0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002044:	615a      	str	r2, [r3, #20]

		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 8002046:	4b5c      	ldr	r3, [pc, #368]	@ (80021b8 <main+0xcc0>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	4b5a      	ldr	r3, [pc, #360]	@ (80021b8 <main+0xcc0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002054:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_4.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH4);
 8002056:	4b5d      	ldr	r3, [pc, #372]	@ (80021cc <main+0xcd4>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800205e:	4611      	mov	r1, r2
 8002060:	485a      	ldr	r0, [pc, #360]	@ (80021cc <main+0xcd4>)
 8002062:	4798      	blx	r3
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <main+0xcd8>)
 800206a:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 800206c:	4b52      	ldr	r3, [pc, #328]	@ (80021b8 <main+0xcc0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	4b51      	ldr	r3, [pc, #324]	@ (80021b8 <main+0xcc0>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800207a:	615a      	str	r2, [r3, #20]
		 ADDITIONAL_ADC_CS.port->ODR &= ~(ADDITIONALADC_CS);
 800207c:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <main+0xcc0>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <main+0xcc0>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800208a:	615a      	str	r2, [r3, #20]
		 TRANSDUCER_4.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH4);
 800208c:	4b4f      	ldr	r3, [pc, #316]	@ (80021cc <main+0xcd4>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002094:	4611      	mov	r1, r2
 8002096:	484d      	ldr	r0, [pc, #308]	@ (80021cc <main+0xcd4>)
 8002098:	4798      	blx	r3
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <main+0xcd8>)
 80020a0:	805a      	strh	r2, [r3, #2]
		 ADDITIONAL_ADC_CS.port->ODR |= (ADDITIONALADC_CS);
 80020a2:	4b45      	ldr	r3, [pc, #276]	@ (80021b8 <main+0xcc0>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	4b43      	ldr	r3, [pc, #268]	@ (80021b8 <main+0xcc0>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020b0:	615a      	str	r2, [r3, #20]

		//Translate 12bit value into relative voltage (given Vref is 5V)

		TRANSDUCER_1.read_value_voltage = ((float)(TRANSDUCER_1.raw_data)/ 4095) * 5 + 0.00394; //Offset as per dataset found
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <main+0xcc8>)
 80020b4:	885b      	ldrh	r3, [r3, #2]
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020be:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80021d4 <main+0xcdc>
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ce:	ee17 0a90 	vmov	r0, s15
 80020d2:	f7fe f9f1 	bl	80004b8 <__aeabi_f2d>
 80020d6:	a336      	add	r3, pc, #216	@ (adr r3, 80021b0 <main+0xcb8>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe f88e 	bl	80001fc <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fa3e 	bl	8000568 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a34      	ldr	r2, [pc, #208]	@ (80021c0 <main+0xcc8>)
 80020f0:	6053      	str	r3, [r2, #4]
		//TRANSDUCER_1.read_value_voltage = TRANSDUCER_1.read_value_voltage *2; //Multiplied by 2 cos, idk, first time through correct sample is taken, every sample after that is half what it should be - find the problem? No, find a workaround? absolutely
		TRANSDUCER_2.read_value_voltage = ((float)(TRANSDUCER_2.raw_data)/ 4095) * 5 + 0.00394;
 80020f2:	4b34      	ldr	r3, [pc, #208]	@ (80021c4 <main+0xccc>)
 80020f4:	885b      	ldrh	r3, [r3, #2]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fe:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80021d4 <main+0xcdc>
 8002102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002106:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	ee17 0a90 	vmov	r0, s15
 8002112:	f7fe f9d1 	bl	80004b8 <__aeabi_f2d>
 8002116:	a326      	add	r3, pc, #152	@ (adr r3, 80021b0 <main+0xcb8>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe f86e 	bl	80001fc <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fa1e 	bl	8000568 <__aeabi_d2f>
 800212c:	4603      	mov	r3, r0
 800212e:	4a25      	ldr	r2, [pc, #148]	@ (80021c4 <main+0xccc>)
 8002130:	6053      	str	r3, [r2, #4]
		//TRANSDUCER_2.read_value_voltage = TRANSDUCER_2.read_value_voltage *2;
		TRANSDUCER_3.read_value_voltage = ((float)(TRANSDUCER_3.raw_data)/ 4095) * 5 + 0.00394;
 8002132:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <main+0xcd0>)
 8002134:	885b      	ldrh	r3, [r3, #2]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800213e:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80021d4 <main+0xcdc>
 8002142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002146:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800214a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214e:	ee17 0a90 	vmov	r0, s15
 8002152:	f7fe f9b1 	bl	80004b8 <__aeabi_f2d>
 8002156:	a316      	add	r3, pc, #88	@ (adr r3, 80021b0 <main+0xcb8>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe f84e 	bl	80001fc <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe f9fe 	bl	8000568 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4a16      	ldr	r2, [pc, #88]	@ (80021c8 <main+0xcd0>)
 8002170:	6053      	str	r3, [r2, #4]
		//TRANSDUCER_3.read_value_voltage = TRANSDUCER_3.read_value_voltage *2;
		TRANSDUCER_4.read_value_voltage = ((float)(TRANSDUCER_4.raw_data)/ 4095) * 5 + 0.00394;
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <main+0xcd8>)
 8002174:	885b      	ldrh	r3, [r3, #2]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800217e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80021d4 <main+0xcdc>
 8002182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002186:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800218a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218e:	ee17 0a90 	vmov	r0, s15
 8002192:	f7fe f991 	bl	80004b8 <__aeabi_f2d>
 8002196:	a306      	add	r3, pc, #24	@ (adr r3, 80021b0 <main+0xcb8>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe f82e 	bl	80001fc <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	e016      	b.n	80021d8 <main+0xce0>
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w
 80021b0:	b256ffc1 	.word	0xb256ffc1
 80021b4:	3f702363 	.word	0x3f702363
 80021b8:	20000528 	.word	0x20000528
 80021bc:	200005a0 	.word	0x200005a0
 80021c0:	20000540 	.word	0x20000540
 80021c4:	2000054c 	.word	0x2000054c
 80021c8:	20000558 	.word	0x20000558
 80021cc:	200005b8 	.word	0x200005b8
 80021d0:	20000564 	.word	0x20000564
 80021d4:	457ff000 	.word	0x457ff000
 80021d8:	f7fe f9c6 	bl	8000568 <__aeabi_d2f>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <main+0xd54>)
 80021e0:	6053      	str	r3, [r2, #4]
		//TRANSDUCER_4.read_value_voltage = TRANSDUCER_4.read_value_voltage *2;

		TRANSDUCER_1.read_value_bar = TRANSDUCER_1.read_value_voltage * 60; //(voltage_read / 5) * 300 (bar) = pressure, 300/5 is 60, therefore (voltage_read) * 60 = pressure (for a 0-300bar range)
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <main+0xd58>)
 80021e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021e8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002254 <main+0xd5c>
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <main+0xd58>)
 80021f2:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_2.read_value_bar = TRANSDUCER_2.read_value_voltage * 60;
 80021f6:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <main+0xd60>)
 80021f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021fc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002254 <main+0xd5c>
 8002200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <main+0xd60>)
 8002206:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_3.read_value_bar = TRANSDUCER_3.read_value_voltage * 60;
 800220a:	4b14      	ldr	r3, [pc, #80]	@ (800225c <main+0xd64>)
 800220c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002210:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002254 <main+0xd5c>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	4b10      	ldr	r3, [pc, #64]	@ (800225c <main+0xd64>)
 800221a:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_4.read_value_bar = TRANSDUCER_4.read_value_voltage * 60;
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <main+0xd54>)
 8002220:	edd3 7a01 	vldr	s15, [r3, #4]
 8002224:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002254 <main+0xd5c>
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <main+0xd54>)
 800222e:	edc3 7a02 	vstr	s15, [r3, #8]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{}
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <main+0xd68>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <main+0xd46>
 800223a:	f001 fb19 	bl	8003870 <RX_Receive>
		}
		*/


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <main+0xd68>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00e      	beq.n	8002264 <main+0xd6c>
 8002246:	f001 fb13 	bl	8003870 <RX_Receive>
 800224a:	e00c      	b.n	8002266 <main+0xd6e>
 800224c:	20000564 	.word	0x20000564
 8002250:	20000540 	.word	0x20000540
 8002254:	42700000 	.word	0x42700000
 8002258:	2000054c 	.word	0x2000054c
 800225c:	20000558 	.word	0x20000558
 8002260:	200000ca 	.word	0x200000ca
 8002264:	bf00      	nop

//Get Loadcell Readings

		//Done with Matt's SPI lib - JC 30/04/2025

		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 8002266:	4ba4      	ldr	r3, [pc, #656]	@ (80024f8 <main+0x1000>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	4ba2      	ldr	r3, [pc, #648]	@ (80024f8 <main+0x1000>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f022 0204 	bic.w	r2, r2, #4
 8002274:	615a      	str	r2, [r3, #20]
		 LOADCELL_1.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH1);
 8002276:	4ba1      	ldr	r3, [pc, #644]	@ (80024fc <main+0x1004>)
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2200      	movs	r2, #0
 800227c:	4611      	mov	r1, r2
 800227e:	489f      	ldr	r0, [pc, #636]	@ (80024fc <main+0x1004>)
 8002280:	4798      	blx	r3
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b9e      	ldr	r3, [pc, #632]	@ (8002500 <main+0x1008>)
 8002288:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 800228a:	4b9b      	ldr	r3, [pc, #620]	@ (80024f8 <main+0x1000>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	4b99      	ldr	r3, [pc, #612]	@ (80024f8 <main+0x1000>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f042 0204 	orr.w	r2, r2, #4
 8002298:	615a      	str	r2, [r3, #20]
		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 800229a:	4b97      	ldr	r3, [pc, #604]	@ (80024f8 <main+0x1000>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	4b95      	ldr	r3, [pc, #596]	@ (80024f8 <main+0x1000>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	615a      	str	r2, [r3, #20]
		 LOADCELL_1.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH1);
 80022aa:	4b94      	ldr	r3, [pc, #592]	@ (80024fc <main+0x1004>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2200      	movs	r2, #0
 80022b0:	4611      	mov	r1, r2
 80022b2:	4892      	ldr	r0, [pc, #584]	@ (80024fc <main+0x1004>)
 80022b4:	4798      	blx	r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b91      	ldr	r3, [pc, #580]	@ (8002500 <main+0x1008>)
 80022bc:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 80022be:	4b8e      	ldr	r3, [pc, #568]	@ (80024f8 <main+0x1000>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	4b8c      	ldr	r3, [pc, #560]	@ (80024f8 <main+0x1000>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f042 0204 	orr.w	r2, r2, #4
 80022cc:	615a      	str	r2, [r3, #20]

		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 80022ce:	4b8a      	ldr	r3, [pc, #552]	@ (80024f8 <main+0x1000>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	4b88      	ldr	r3, [pc, #544]	@ (80024f8 <main+0x1000>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f022 0204 	bic.w	r2, r2, #4
 80022dc:	615a      	str	r2, [r3, #20]
		 LOADCELL_2.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH2);
 80022de:	4b87      	ldr	r3, [pc, #540]	@ (80024fc <main+0x1004>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022e6:	4611      	mov	r1, r2
 80022e8:	4884      	ldr	r0, [pc, #528]	@ (80024fc <main+0x1004>)
 80022ea:	4798      	blx	r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b84      	ldr	r3, [pc, #528]	@ (8002504 <main+0x100c>)
 80022f2:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 80022f4:	4b80      	ldr	r3, [pc, #512]	@ (80024f8 <main+0x1000>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b7f      	ldr	r3, [pc, #508]	@ (80024f8 <main+0x1000>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	615a      	str	r2, [r3, #20]
		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 8002304:	4b7c      	ldr	r3, [pc, #496]	@ (80024f8 <main+0x1000>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	4b7b      	ldr	r3, [pc, #492]	@ (80024f8 <main+0x1000>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f022 0204 	bic.w	r2, r2, #4
 8002312:	615a      	str	r2, [r3, #20]
		 LOADCELL_2.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH2);
 8002314:	4b79      	ldr	r3, [pc, #484]	@ (80024fc <main+0x1004>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800231c:	4611      	mov	r1, r2
 800231e:	4877      	ldr	r0, [pc, #476]	@ (80024fc <main+0x1004>)
 8002320:	4798      	blx	r3
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	4b77      	ldr	r3, [pc, #476]	@ (8002504 <main+0x100c>)
 8002328:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 800232a:	4b73      	ldr	r3, [pc, #460]	@ (80024f8 <main+0x1000>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	4b71      	ldr	r3, [pc, #452]	@ (80024f8 <main+0x1000>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f042 0204 	orr.w	r2, r2, #4
 8002338:	615a      	str	r2, [r3, #20]

		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 800233a:	4b6f      	ldr	r3, [pc, #444]	@ (80024f8 <main+0x1000>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	4b6d      	ldr	r3, [pc, #436]	@ (80024f8 <main+0x1000>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f022 0204 	bic.w	r2, r2, #4
 8002348:	615a      	str	r2, [r3, #20]
		 LOADCELL_3.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH3);
 800234a:	4b6c      	ldr	r3, [pc, #432]	@ (80024fc <main+0x1004>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002352:	4611      	mov	r1, r2
 8002354:	4869      	ldr	r0, [pc, #420]	@ (80024fc <main+0x1004>)
 8002356:	4798      	blx	r3
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b6a      	ldr	r3, [pc, #424]	@ (8002508 <main+0x1010>)
 800235e:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 8002360:	4b65      	ldr	r3, [pc, #404]	@ (80024f8 <main+0x1000>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b64      	ldr	r3, [pc, #400]	@ (80024f8 <main+0x1000>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f042 0204 	orr.w	r2, r2, #4
 800236e:	615a      	str	r2, [r3, #20]
		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 8002370:	4b61      	ldr	r3, [pc, #388]	@ (80024f8 <main+0x1000>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b60      	ldr	r3, [pc, #384]	@ (80024f8 <main+0x1000>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	615a      	str	r2, [r3, #20]
		 LOADCELL_3.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH3);
 8002380:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <main+0x1004>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002388:	4611      	mov	r1, r2
 800238a:	485c      	ldr	r0, [pc, #368]	@ (80024fc <main+0x1004>)
 800238c:	4798      	blx	r3
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b5d      	ldr	r3, [pc, #372]	@ (8002508 <main+0x1010>)
 8002394:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 8002396:	4b58      	ldr	r3, [pc, #352]	@ (80024f8 <main+0x1000>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <main+0x1000>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f042 0204 	orr.w	r2, r2, #4
 80023a4:	615a      	str	r2, [r3, #20]

		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 80023a6:	4b54      	ldr	r3, [pc, #336]	@ (80024f8 <main+0x1000>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	4b52      	ldr	r3, [pc, #328]	@ (80024f8 <main+0x1000>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f022 0204 	bic.w	r2, r2, #4
 80023b4:	615a      	str	r2, [r3, #20]
		 LOADCELL_4.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH4);
 80023b6:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <main+0x1004>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80023be:	4611      	mov	r1, r2
 80023c0:	484e      	ldr	r0, [pc, #312]	@ (80024fc <main+0x1004>)
 80023c2:	4798      	blx	r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b50      	ldr	r3, [pc, #320]	@ (800250c <main+0x1014>)
 80023ca:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 80023cc:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <main+0x1000>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	4b49      	ldr	r3, [pc, #292]	@ (80024f8 <main+0x1000>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f042 0204 	orr.w	r2, r2, #4
 80023da:	615a      	str	r2, [r3, #20]
		 LOADCELL_CS.port->ODR &= ~(LOADCELLADC_CS);
 80023dc:	4b46      	ldr	r3, [pc, #280]	@ (80024f8 <main+0x1000>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	4b45      	ldr	r3, [pc, #276]	@ (80024f8 <main+0x1000>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f022 0204 	bic.w	r2, r2, #4
 80023ea:	615a      	str	r2, [r3, #20]
		 LOADCELL_4.raw_data = LOADCELL_ADC.transmit(&LOADCELL_ADC, ADC_CH4);
 80023ec:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <main+0x1004>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80023f4:	4611      	mov	r1, r2
 80023f6:	4841      	ldr	r0, [pc, #260]	@ (80024fc <main+0x1004>)
 80023f8:	4798      	blx	r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b43      	ldr	r3, [pc, #268]	@ (800250c <main+0x1014>)
 8002400:	805a      	strh	r2, [r3, #2]
		 LOADCELL_CS.port->ODR |= (LOADCELLADC_CS);
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <main+0x1000>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <main+0x1000>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f042 0204 	orr.w	r2, r2, #4
 8002410:	615a      	str	r2, [r3, #20]


		//Translate 12bit value into relative voltage (given Vref is 5V)

		LOADCELL_1.read_value_voltage = ((float)(LOADCELL_1.raw_data)/ 4095) * 5;
 8002412:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <main+0x1008>)
 8002414:	885b      	ldrh	r3, [r3, #2]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800241e:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8002510 <main+0x1018>
 8002422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002426:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <main+0x1008>)
 8002430:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_2.read_value_voltage = ((float)(LOADCELL_2.raw_data)/ 4095) * 5;
 8002434:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <main+0x100c>)
 8002436:	885b      	ldrh	r3, [r3, #2]
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002440:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002510 <main+0x1018>
 8002444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002448:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800244c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <main+0x100c>)
 8002452:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_3.read_value_voltage = ((float)(LOADCELL_3.raw_data)/ 4095) * 5;
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <main+0x1010>)
 8002458:	885b      	ldrh	r3, [r3, #2]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002462:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002510 <main+0x1018>
 8002466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800246a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800246e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002472:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <main+0x1010>)
 8002474:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_4.read_value_voltage = ((float)(LOADCELL_4.raw_data)/ 4095) * 5;
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <main+0x1014>)
 800247a:	885b      	ldrh	r3, [r3, #2]
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002484:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002510 <main+0x1018>
 8002488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800248c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <main+0x1014>)
 8002496:	edc3 7a01 	vstr	s15, [r3, #4]



		LOADCELL_1.read_value_weight = LOADCELL_1.read_value_voltage * 10; //(voltage_read / 5) * 50 (kg) = pressure, 50/5 is 10, therefore (voltage_read) * 10 = weight (for a 0-50kg range)
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <main+0x1008>)
 800249c:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <main+0x1008>)
 80024aa:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_2.read_value_weight = LOADCELL_2.read_value_voltage * 10;
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <main+0x100c>)
 80024b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <main+0x100c>)
 80024be:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_3.read_value_weight = LOADCELL_3.read_value_voltage * 10;
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <main+0x1010>)
 80024c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024c8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <main+0x1010>)
 80024d2:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_4.read_value_weight = LOADCELL_4.read_value_voltage * 10;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <main+0x1014>)
 80024d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <main+0x1014>)
 80024e6:	edc3 7a02 	vstr	s15, [r3, #8]


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <main+0x101c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <main+0x1020>
 80024f2:	f001 f9bd 	bl	8003870 <RX_Receive>
 80024f6:	e010      	b.n	800251a <main+0x1022>
 80024f8:	20000510 	.word	0x20000510
 80024fc:	200005b8 	.word	0x200005b8
 8002500:	20000570 	.word	0x20000570
 8002504:	2000057c 	.word	0x2000057c
 8002508:	20000588 	.word	0x20000588
 800250c:	20000594 	.word	0x20000594
 8002510:	457ff000 	.word	0x457ff000
 8002514:	200000ca 	.word	0x200000ca
 8002518:	bf00      	nop


		//Check Loadcell weights, if too low, trigger error flag
		//Error Flags specific to loadcell
		if(LOADCELL_1.read_value_weight <min_weight_error_mode){error |=(0x01<<7);}
 800251a:	4b8a      	ldr	r3, [pc, #552]	@ (8002744 <main+0x124c>)
 800251c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002520:	4b89      	ldr	r3, [pc, #548]	@ (8002748 <main+0x1250>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	d507      	bpl.n	8002546 <main+0x104e>
 8002536:	4b85      	ldr	r3, [pc, #532]	@ (800274c <main+0x1254>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b82      	ldr	r3, [pc, #520]	@ (800274c <main+0x1254>)
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e040      	b.n	80025c8 <main+0x10d0>
		else if(LOADCELL_2.read_value_weight <min_weight_error_mode){error |=(0x01<<6);}
 8002546:	4b82      	ldr	r3, [pc, #520]	@ (8002750 <main+0x1258>)
 8002548:	ed93 7a02 	vldr	s14, [r3, #8]
 800254c:	4b7e      	ldr	r3, [pc, #504]	@ (8002748 <main+0x1250>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	d507      	bpl.n	8002572 <main+0x107a>
 8002562:	4b7a      	ldr	r3, [pc, #488]	@ (800274c <main+0x1254>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b77      	ldr	r3, [pc, #476]	@ (800274c <main+0x1254>)
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e02a      	b.n	80025c8 <main+0x10d0>
		else if(LOADCELL_3.read_value_weight <min_weight_error_mode){error |=(0x01<<5);}
 8002572:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <main+0x125c>)
 8002574:	ed93 7a02 	vldr	s14, [r3, #8]
 8002578:	4b73      	ldr	r3, [pc, #460]	@ (8002748 <main+0x1250>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	d507      	bpl.n	800259e <main+0x10a6>
 800258e:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <main+0x1254>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f043 0320 	orr.w	r3, r3, #32
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b6c      	ldr	r3, [pc, #432]	@ (800274c <main+0x1254>)
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	e014      	b.n	80025c8 <main+0x10d0>
		else if(LOADCELL_4.read_value_weight <min_weight_error_mode){error |=(0x01<<4);}
 800259e:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <main+0x1260>)
 80025a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80025a4:	4b68      	ldr	r3, [pc, #416]	@ (8002748 <main+0x1250>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d506      	bpl.n	80025c8 <main+0x10d0>
 80025ba:	4b64      	ldr	r3, [pc, #400]	@ (800274c <main+0x1254>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f043 0310 	orr.w	r3, r3, #16
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b61      	ldr	r3, [pc, #388]	@ (800274c <main+0x1254>)
 80025c6:	801a      	strh	r2, [r3, #0]
		//Weights are A-OK, so carry on without doing anything
		else{}

//Extract surface mount temp sensor temp
		i2c_comms_result result = get_temp(&SMD_TEMP_SENSE);
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	4963      	ldr	r1, [pc, #396]	@ (800275c <main+0x1264>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fb60 	bl	8003c94 <get_temp>
		if (result.comms_ok){
 80025d4:	7f3b      	ldrb	r3, [r7, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01b      	beq.n	8002612 <main+0x111a>
			for (uint8_t i = 0; i <= result.return_length; i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80025e0:	e011      	b.n	8002606 <main+0x110e>
				uint8_t * floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 80025e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <main+0x1268>)
 80025e4:	63bb      	str	r3, [r7, #56]	@ 0x38
				floatPtr[i] = result.return_value[i];
 80025e6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80025ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025f0:	440b      	add	r3, r1
 80025f2:	3240      	adds	r2, #64	@ 0x40
 80025f4:	443a      	add	r2, r7
 80025f6:	f812 2c22 	ldrb.w	r2, [r2, #-34]
 80025fa:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i <= result.return_length; i++) {
 80025fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002600:	3301      	adds	r3, #1
 8002602:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002606:	7f7b      	ldrb	r3, [r7, #29]
 8002608:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800260c:	429a      	cmp	r2, r3
 800260e:	d9e8      	bls.n	80025e2 <main+0x10ea>
 8002610:	e003      	b.n	800261a <main+0x1122>
			}
		}
		else {
			SMD_TEMP_SENSE.temp = 0x00;
 8002612:	4b52      	ldr	r3, [pc, #328]	@ (800275c <main+0x1264>)
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	605a      	str	r2, [r3, #4]
		}


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800261a:	4b52      	ldr	r3, [pc, #328]	@ (8002764 <main+0x126c>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <main+0x1130>
 8002622:	f001 f925 	bl	8003870 <RX_Receive>
 8002626:	e000      	b.n	800262a <main+0x1132>
 8002628:	bf00      	nop

		//Check if we need to go directly to PURGE
		if(switch_case_state == 10)
 800262a:	4b4f      	ldr	r3, [pc, #316]	@ (8002768 <main+0x1270>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d10d      	bne.n	800264e <main+0x1156>
		{
		  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8002632:	2208      	movs	r2, #8
 8002634:	2112      	movs	r1, #18
 8002636:	484d      	ldr	r0, [pc, #308]	@ (800276c <main+0x1274>)
 8002638:	f7fe fe88 	bl	800134c <SX1272_writeRegister>
		  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 800263c:	2105      	movs	r1, #5
 800263e:	484b      	ldr	r0, [pc, #300]	@ (800276c <main+0x1274>)
 8002640:	f7fe fd64 	bl	800110c <_SX1272_setMode>
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002644:	2017      	movs	r0, #23
 8002646:	f7fe feeb 	bl	8001420 <__NVIC_EnableIRQ>
			break; //enter PURGE state
 800264a:	f000 bf07 	b.w	800345c <main+0x1f64>
		}
		else
		{
		  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 800264e:	2208      	movs	r2, #8
 8002650:	2112      	movs	r1, #18
 8002652:	4846      	ldr	r0, [pc, #280]	@ (800276c <main+0x1274>)
 8002654:	f7fe fe7a 	bl	800134c <SX1272_writeRegister>
		  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 8002658:	2105      	movs	r1, #5
 800265a:	4844      	ldr	r0, [pc, #272]	@ (800276c <main+0x1274>)
 800265c:	f7fe fd56 	bl	800110c <_SX1272_setMode>
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002660:	2017      	movs	r0, #23
 8002662:	f7fe fedd 	bl	8001420 <__NVIC_EnableIRQ>
			switch_case_state = 1; //input selector state
 8002666:	4b40      	ldr	r3, [pc, #256]	@ (8002768 <main+0x1270>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
			break;
 800266c:	f000 bef6 	b.w	800345c <main+0x1f64>
//								Checks switch input and sets LED outputs

	case 1:

		//Set SMD LEDs as per current case/state
		LED_1.port->ODR &= ~LED_1_PWR;
 8002670:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <main+0x1278>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	4b3e      	ldr	r3, [pc, #248]	@ (8002770 <main+0x1278>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800267e:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002680:	4b3c      	ldr	r3, [pc, #240]	@ (8002774 <main+0x127c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	4b3b      	ldr	r3, [pc, #236]	@ (8002774 <main+0x127c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268e:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002690:	4b39      	ldr	r3, [pc, #228]	@ (8002778 <main+0x1280>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b38      	ldr	r3, [pc, #224]	@ (8002778 <main+0x1280>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269e:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <main+0x1284>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	4b35      	ldr	r3, [pc, #212]	@ (800277c <main+0x1284>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026ae:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 80026b0:	4b33      	ldr	r3, [pc, #204]	@ (8002780 <main+0x1288>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <main+0x1288>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026be:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 80026c0:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <main+0x128c>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <main+0x128c>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026ce:	615a      	str	r2, [r3, #20]

			//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 80026d0:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <main+0x126c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <main+0x11e6>
 80026d8:	f001 f8ca 	bl	8003870 <RX_Receive>
 80026dc:	e000      	b.n	80026e0 <main+0x11e8>
 80026de:	bf00      	nop

			//check for either remote control (== 0) or local control (== 1)
		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == 0)
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <main+0x1290>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d114      	bne.n	8002718 <main+0x1220>
		{
				//Change LED State
			led_remote.port->ODR |= LOCAL_CONTROL_SW;			//Set Remote CTRL LED
 80026ee:	4b27      	ldr	r3, [pc, #156]	@ (800278c <main+0x1294>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <main+0x1294>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026fc:	615a      	str	r2, [r3, #20]
			led_local.port->ODR &= ~(LOCAL_CONTROL_SW);			//Off Local CTRL LED
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <main+0x1298>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <main+0x1298>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800270c:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 3; //remote control
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <main+0x1270>)
 8002710:	2203      	movs	r2, #3
 8002712:	701a      	strb	r2, [r3, #0]
			break;
 8002714:	f000 bea2 	b.w	800345c <main+0x1f64>
		}
		else //Local Control (==1)
		{
			//Change LED State
			led_remote.port->ODR &= ~(LOCAL_CONTROL_SW);		//Off Remote CTRL LED
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <main+0x1294>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <main+0x1294>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002726:	615a      	str	r2, [r3, #20]
			led_local.port->ODR |= LOCAL_CONTROL_SW;			//Set Local CTRL LED
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <main+0x1298>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <main+0x1298>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002736:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 2; //local control
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <main+0x1270>)
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
			break;
 800273e:	f000 be8d 	b.w	800345c <main+0x1f64>
 8002742:	bf00      	nop
 8002744:	20000570 	.word	0x20000570
 8002748:	20000000 	.word	0x20000000
 800274c:	200000c4 	.word	0x200000c4
 8002750:	2000057c 	.word	0x2000057c
 8002754:	20000588 	.word	0x20000588
 8002758:	20000594 	.word	0x20000594
 800275c:	20000004 	.word	0x20000004
 8002760:	20000008 	.word	0x20000008
 8002764:	200000ca 	.word	0x200000ca
 8002768:	200000c0 	.word	0x200000c0
 800276c:	200000f0 	.word	0x200000f0
 8002770:	20000378 	.word	0x20000378
 8002774:	20000390 	.word	0x20000390
 8002778:	200003a8 	.word	0x200003a8
 800277c:	200003c0 	.word	0x200003c0
 8002780:	200003d8 	.word	0x200003d8
 8002784:	200003f0 	.word	0x200003f0
 8002788:	20000420 	.word	0x20000420
 800278c:	20000318 	.word	0x20000318
 8002790:	20000300 	.word	0x20000300
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop

		__disable_irq();

		//Read in switch inputs to state_local var
		state_local =
		((DUM_SW.port->IDR & DUMP_SW) << 7) +
 8002798:	4b89      	ldr	r3, [pc, #548]	@ (80029c0 <main+0x14c8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	691b      	ldr	r3, [r3, #16]
		((N2O_SW.port->IDR & N2O_ISO_SW) << 6) +
 800279e:	4b89      	ldr	r3, [pc, #548]	@ (80029c4 <main+0x14cc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	691b      	ldr	r3, [r3, #16]
		((O2_IS_SW.port->IDR & O2_ISO_SW) << 5) +
 80027a4:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <main+0x14d0>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	691b      	ldr	r3, [r3, #16]
		((IGNITION_IS_SW.port->IDR & IGNITION_SW) << 4) +
 80027aa:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <main+0x14d4>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
		(activate_SW.port->IDR & ACTIVATE_SW);
 80027b0:	4b87      	ldr	r3, [pc, #540]	@ (80029d0 <main+0x14d8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 80027b6:	4b87      	ldr	r3, [pc, #540]	@ (80029d4 <main+0x14dc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	b2da      	uxtb	r2, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 80027c8:	4b83      	ldr	r3, [pc, #524]	@ (80029d8 <main+0x14e0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80027d8:	b2db      	uxtb	r3, r3
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 80027da:	4413      	add	r3, r2
 80027dc:	b2da      	uxtb	r2, r3
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
 80027de:	4b7f      	ldr	r3, [pc, #508]	@ (80029dc <main+0x14e4>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	b2db      	uxtb	r3, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 80027f0:	4413      	add	r3, r2
 80027f2:	b2da      	uxtb	r2, r3
		state_local =
 80027f4:	4b7a      	ldr	r3, [pc, #488]	@ (80029e0 <main+0x14e8>)
 80027f6:	701a      	strb	r2, [r3, #0]

		//Move to local control output setting state
		switch_case_state = 0x0F;
 80027f8:	4b7a      	ldr	r3, [pc, #488]	@ (80029e4 <main+0x14ec>)
 80027fa:	220f      	movs	r2, #15
 80027fc:	701a      	strb	r2, [r3, #0]
		break;
 80027fe:	f000 be2d 	b.w	800345c <main+0x1f64>
//*******************************REMOTE ACCESS - TIMER UPDATES*************************************************************
//								Enable Interrupts
	case 3:

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002802:	4b79      	ldr	r3, [pc, #484]	@ (80029e8 <main+0x14f0>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <main+0x1318>
 800280a:	f001 f831 	bl	8003870 <RX_Receive>
 800280e:	e000      	b.n	8002812 <main+0x131a>
 8002810:	bf00      	nop

		//Enable interrupts for LoRa
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002812:	2017      	movs	r0, #23
 8002814:	f7fe fe04 	bl	8001420 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI9_5_IRQn,9);
 8002818:	2109      	movs	r1, #9
 800281a:	2017      	movs	r0, #23
 800281c:	f7fe fe42 	bl	80014a4 <__NVIC_SetPriority>
		//NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
		//NVIC_SetPriority(TIM1_UP_TIM10_IRQn,10);

		//Move to remote access output setting state
		switch_case_state = 4;
 8002820:	4b70      	ldr	r3, [pc, #448]	@ (80029e4 <main+0x14ec>)
 8002822:	2204      	movs	r2, #4
 8002824:	701a      	strb	r2, [r3, #0]
		 * B2: Ignition Selected
		 * B1: Gas Filled selected
		 * B0: System Activated
		 */

		break;
 8002826:	f000 be19 	b.w	800345c <main+0x1f64>
//**************************REMOTE ACCESS - OUTPUT ACTUATION*************************************************************
//							Actuates outputs depended on state flags within last received LoRa packet
	case 4:

		LED_1.port -> ODR &= ~LED_1_PWR;
 800282a:	4b70      	ldr	r3, [pc, #448]	@ (80029ec <main+0x14f4>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	4b6e      	ldr	r3, [pc, #440]	@ (80029ec <main+0x14f4>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002838:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 800283a:	4b6d      	ldr	r3, [pc, #436]	@ (80029f0 <main+0x14f8>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	4b6b      	ldr	r3, [pc, #428]	@ (80029f0 <main+0x14f8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002848:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 800284a:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <main+0x14fc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	4b68      	ldr	r3, [pc, #416]	@ (80029f4 <main+0x14fc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002858:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 800285a:	4b67      	ldr	r3, [pc, #412]	@ (80029f8 <main+0x1500>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	4b65      	ldr	r3, [pc, #404]	@ (80029f8 <main+0x1500>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002868:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 800286a:	4b64      	ldr	r3, [pc, #400]	@ (80029fc <main+0x1504>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	4b62      	ldr	r3, [pc, #392]	@ (80029fc <main+0x1504>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002878:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 800287a:	4b61      	ldr	r3, [pc, #388]	@ (8002a00 <main+0x1508>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	4b5f      	ldr	r3, [pc, #380]	@ (8002a00 <main+0x1508>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002888:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800288a:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <main+0x14f0>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <main+0x13a0>
 8002892:	f000 ffed 	bl	8003870 <RX_Receive>
 8002896:	e000      	b.n	800289a <main+0x13a2>
 8002898:	bf00      	nop

		//Check if System activated bit was set in last received packet
		if((state & SYSTEM_ACTIVATED) != SYSTEM_ACTIVATED)
 800289a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a04 <main+0x150c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d104      	bne.n	80028b0 <main+0x13b8>
		{
			//If system is not active, should go straight to PURGE state
			switch_case_state = 10;
 80028a6:	4b4f      	ldr	r3, [pc, #316]	@ (80029e4 <main+0x14ec>)
 80028a8:	220a      	movs	r2, #10
 80028aa:	701a      	strb	r2, [r3, #0]
			break;
 80028ac:	f000 bdd6 	b.w	800345c <main+0x1f64>
		//	CH1_ARM.port->ODR |= (CH1_Arm);
		//	CH1_OP.port->ODR |= (CH1_Operate);
		//}

		//Check if manual purge bit was set in last received packet
		else if( ((state & MANUAL_PURGE) == MANUAL_PURGE) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED) )
 80028b0:	4b54      	ldr	r3, [pc, #336]	@ (8002a04 <main+0x150c>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da0a      	bge.n	80028d0 <main+0x13d8>
 80028ba:	4b52      	ldr	r3, [pc, #328]	@ (8002a04 <main+0x150c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <main+0x13d8>
		{
			//If manual purge was set, should go straight to PURGE state
			switch_case_state = 10;
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <main+0x14ec>)
 80028c8:	220a      	movs	r2, #10
 80028ca:	701a      	strb	r2, [r3, #0]
			break;
 80028cc:	f000 bdc6 	b.w	800345c <main+0x1f64>
		}
// ------------------- Pass this point, the system is active, and manual purge has not been selected! -------------------

		//If neither Gas or Ignition selected, go to neutral state
		else if( ((state & GAS_FILLED_SELECTED) == 0) && ((state & IGNITION_SELECTED) == 0) ) //0 to indicate neither are selected
 80028d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002a04 <main+0x150c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <main+0x13fa>
 80028dc:	4b49      	ldr	r3, [pc, #292]	@ (8002a04 <main+0x150c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <main+0x13fa>
		{
			switch_case_state = 9; //go into neutral state!
 80028e8:	4b3e      	ldr	r3, [pc, #248]	@ (80029e4 <main+0x14ec>)
 80028ea:	2209      	movs	r2, #9
 80028ec:	701a      	strb	r2, [r3, #0]
			break;
 80028ee:	f000 bdb5 	b.w	800345c <main+0x1f64>
		}

		//If Ignition is selected
		else if ( ((state & IGNITION_SELECTED) == IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) != GAS_FILLED_SELECTED))
 80028f2:	4b44      	ldr	r3, [pc, #272]	@ (8002a04 <main+0x150c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d038      	beq.n	8002970 <main+0x1478>
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <main+0x150c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d132      	bne.n	8002970 <main+0x1478>
		{
			//Ensure N2O Solenoid is closed, and turn off LED
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 800290a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a08 <main+0x1510>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <main+0x1510>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002918:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 800291a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <main+0x1514>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	4b3a      	ldr	r3, [pc, #232]	@ (8002a0c <main+0x1514>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002928:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 800292a:	4b39      	ldr	r3, [pc, #228]	@ (8002a10 <main+0x1518>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <main+0x1518>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f022 0220 	bic.w	r2, r2, #32
 8002938:	615a      	str	r2, [r3, #20]


			//If Ignition FIRE bit is set, time to light this puppy
			if((state & IGNITION_FIRE) == IGNITION_FIRE)
 800293a:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <main+0x150c>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <main+0x1458>
			{
				switch_case_state = 0x80;
 8002946:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <main+0x14ec>)
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	701a      	strb	r2, [r3, #0]
				break;
 800294c:	f000 bd86 	b.w	800345c <main+0x1f64>
			}
			//If O2 Fill bit is set, enable the O2 Solenoids
			else if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 8002950:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <main+0x150c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <main+0x146e>
				switch_case_state = 8;
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <main+0x14ec>)
 800295e:	2208      	movs	r2, #8
 8002960:	701a      	strb	r2, [r3, #0]
				break;
 8002962:	f000 bd7b 	b.w	800345c <main+0x1f64>
			}
			//Otherwise go to neutral
			else{
				switch_case_state = 9;
 8002966:	4b1f      	ldr	r3, [pc, #124]	@ (80029e4 <main+0x14ec>)
 8002968:	2209      	movs	r2, #9
 800296a:	701a      	strb	r2, [r3, #0]
				break;
 800296c:	f000 bd76 	b.w	800345c <main+0x1f64>
			}
		}

// ------------------- Pass this point, ignite is NOT selected, and gas fill state has been selected -------------------

		else if ( ((state & IGNITION_SELECTED) != IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED))
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <main+0x150c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d14b      	bne.n	8002a14 <main+0x151c>
 800297c:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <main+0x150c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d045      	beq.n	8002a14 <main+0x151c>
		{
//N2O and PURGE have not been selected, go to neutral state
			if((state & SWITCH_SELECTOR) == SWITCH_SELECTOR)
 8002988:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <main+0x150c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <main+0x14a6>
			{
				switch_case_state = 9;
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <main+0x14ec>)
 8002996:	2209      	movs	r2, #9
 8002998:	701a      	strb	r2, [r3, #0]
				break;
 800299a:	f000 bd5f 	b.w	800345c <main+0x1f64>
			}
//N20 Fill is selected, move to N2O actuation state
			else if( (state & N2O_FILL_ACTIVATE) == N2O_FILL_ACTIVATE)
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <main+0x150c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <main+0x14bc>
			{
				switch_case_state = 7;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <main+0x14ec>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	701a      	strb	r2, [r3, #0]
				break;
 80029b0:	f000 bd54 	b.w	800345c <main+0x1f64>
			}
//If neither are selected, some error... Go to neutral state for safety, and set error flag
			else
			{
				//get error flag in here as well!
				switch_case_state = 9; //Something has gone wrong and weird - go to neutral state and stop gas flow
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <main+0x14ec>)
 80029b6:	2209      	movs	r2, #9
 80029b8:	701a      	strb	r2, [r3, #0]
				break;
 80029ba:	f000 bd4f 	b.w	800345c <main+0x1f64>
 80029be:	bf00      	nop
 80029c0:	20000438 	.word	0x20000438
 80029c4:	20000450 	.word	0x20000450
 80029c8:	20000468 	.word	0x20000468
 80029cc:	20000480 	.word	0x20000480
 80029d0:	20000408 	.word	0x20000408
 80029d4:	20000498 	.word	0x20000498
 80029d8:	200004b0 	.word	0x200004b0
 80029dc:	200004c8 	.word	0x200004c8
 80029e0:	200000c2 	.word	0x200000c2
 80029e4:	200000c0 	.word	0x200000c0
 80029e8:	200000ca 	.word	0x200000ca
 80029ec:	20000378 	.word	0x20000378
 80029f0:	20000390 	.word	0x20000390
 80029f4:	200003a8 	.word	0x200003a8
 80029f8:	200003c0 	.word	0x200003c0
 80029fc:	200003d8 	.word	0x200003d8
 8002a00:	200003f0 	.word	0x200003f0
 8002a04:	200000c1 	.word	0x200000c1
 8002a08:	20000210 	.word	0x20000210
 8002a0c:	200001f8 	.word	0x200001f8
 8002a10:	20000348 	.word	0x20000348

//*******************************LOCAL ACCESS*************************************************************
	case 0x0F:


		LED_1.port -> ODR |= LED_1_PWR;
 8002a14:	4b94      	ldr	r3, [pc, #592]	@ (8002c68 <main+0x1770>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	4b93      	ldr	r3, [pc, #588]	@ (8002c68 <main+0x1770>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a22:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002a24:	4b91      	ldr	r3, [pc, #580]	@ (8002c6c <main+0x1774>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	4b90      	ldr	r3, [pc, #576]	@ (8002c6c <main+0x1774>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a32:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002a34:	4b8e      	ldr	r3, [pc, #568]	@ (8002c70 <main+0x1778>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c70 <main+0x1778>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a42:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002a44:	4b8b      	ldr	r3, [pc, #556]	@ (8002c74 <main+0x177c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8002c74 <main+0x177c>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a52:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002a54:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <main+0x1780>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	4b87      	ldr	r3, [pc, #540]	@ (8002c78 <main+0x1780>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a62:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002a64:	4b85      	ldr	r3, [pc, #532]	@ (8002c7c <main+0x1784>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	4b84      	ldr	r3, [pc, #528]	@ (8002c7c <main+0x1784>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a72:	615a      	str	r2, [r3, #20]


		if((state_local & ACTIVATE_SW) != ACTIVATE_SW) //if the system is not active
 8002a74:	4b82      	ldr	r3, [pc, #520]	@ (8002c80 <main+0x1788>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <main+0x1592>
		{
			switch_case_state = 10;
 8002a80:	4b80      	ldr	r3, [pc, #512]	@ (8002c84 <main+0x178c>)
 8002a82:	220a      	movs	r2, #10
 8002a84:	701a      	strb	r2, [r3, #0]
			break;
 8002a86:	f000 bce9 	b.w	800345c <main+0x1f64>
		}

//Ignition Key Swtich Selected
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 8002a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c80 <main+0x1788>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d074      	beq.n	8002b80 <main+0x1688>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 8002a96:	4b7a      	ldr	r3, [pc, #488]	@ (8002c80 <main+0x1788>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d16e      	bne.n	8002b80 <main+0x1688>
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8002aa2:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <main+0x1788>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d168      	bne.n	8002b80 <main+0x1688>
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 8002aae:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <main+0x1788>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d162      	bne.n	8002b80 <main+0x1688>
				(state_local & O2_DEADMAN_SW) != O2_DEADMAN_SW) //is O2 deadman off
 8002aba:	4b71      	ldr	r3, [pc, #452]	@ (8002c80 <main+0x1788>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d15c      	bne.n	8002b80 <main+0x1688>
		{

			//Adding 'dump' flag to detect the change in interrupt state in key areas!
			//periodic 'dump' flag checks are needed along certain areas as to ensure state is checked regardless
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002ac6:	4b70      	ldr	r3, [pc, #448]	@ (8002c88 <main+0x1790>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <main+0x15e6>
 8002ace:	4b6d      	ldr	r3, [pc, #436]	@ (8002c84 <main+0x178c>)
 8002ad0:	220a      	movs	r2, #10
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c88 <main+0x1790>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	f000 bcbf 	b.w	800345c <main+0x1f64>
			else{__asm("NOP");}
 8002ade:	bf00      	nop
			//does nothing when false condition is set - ie when dump button has not been pressed!
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c8c <main+0x1794>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	4b69      	ldr	r3, [pc, #420]	@ (8002c8c <main+0x1794>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aee:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 8002af0:	4b67      	ldr	r3, [pc, #412]	@ (8002c90 <main+0x1798>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	4b66      	ldr	r3, [pc, #408]	@ (8002c90 <main+0x1798>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002afe:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 8002b00:	4b64      	ldr	r3, [pc, #400]	@ (8002c94 <main+0x179c>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <main+0x179c>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f022 0220 	bic.w	r2, r2, #32
 8002b0e:	615a      	str	r2, [r3, #20]
			led_o2.port->ODR &= ~(O2_LED);
 8002b10:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <main+0x17a0>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	4b60      	ldr	r3, [pc, #384]	@ (8002c98 <main+0x17a0>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b1e:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002b20:	4b5e      	ldr	r3, [pc, #376]	@ (8002c9c <main+0x17a4>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	4b5d      	ldr	r3, [pc, #372]	@ (8002c9c <main+0x17a4>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b2e:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 8002b30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <main+0x17a8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca0 <main+0x17a8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3e:	615a      	str	r2, [r3, #20]


			Ignition1_ARM.port->ODR |= IGNITION1_ARM;
 8002b40:	4b58      	ldr	r3, [pc, #352]	@ (8002ca4 <main+0x17ac>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	4b57      	ldr	r3, [pc, #348]	@ (8002ca4 <main+0x17ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b4e:	615a      	str	r2, [r3, #20]
			Ignition2_ARM.port->ODR |= IGNITION2_ARM;
 8002b50:	4b55      	ldr	r3, [pc, #340]	@ (8002ca8 <main+0x17b0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <main+0x17b0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	615a      	str	r2, [r3, #20]
//Ignition Rotary Switch Selected
			if((state_local & IGNITE_DEADMAN_SW) == IGNITE_DEADMAN_SW) //is IGNITE button pressed!
 8002b60:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <main+0x1788>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <main+0x167e>
			{
				switch_case_state = 0x80;  //IGNITE state
 8002b6c:	4b45      	ldr	r3, [pc, #276]	@ (8002c84 <main+0x178c>)
 8002b6e:	2280      	movs	r2, #128	@ 0x80
 8002b70:	701a      	strb	r2, [r3, #0]
				break;
 8002b72:	f000 bc73 	b.w	800345c <main+0x1f64>
			}
//Ignition Key Switch but NO Ignition Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002b76:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <main+0x178c>)
 8002b78:	2209      	movs	r2, #9
 8002b7a:	701a      	strb	r2, [r3, #0]
				break;
 8002b7c:	f000 bc6e 	b.w	800345c <main+0x1f64>
			}
		}


//Both Keyswitches for N2O and O2 are triggered
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002b80:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <main+0x1788>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d017      	beq.n	8002bbc <main+0x16c4>
				(state_local & O2_ISO_SW) == O2_ISO_SW) //error check if both ISO switches are triggered for N20 and O2
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c80 <main+0x1788>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d011      	beq.n	8002bbc <main+0x16c4>
		{
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002b98:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <main+0x1790>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <main+0x16b8>
 8002ba0:	4b38      	ldr	r3, [pc, #224]	@ (8002c84 <main+0x178c>)
 8002ba2:	220a      	movs	r2, #10
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <main+0x1790>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	f000 bc56 	b.w	800345c <main+0x1f64>
			else{__asm("NOP");}
 8002bb0:	bf00      	nop

			//if local dump flag has been triggered REGARDLESS of input control state!
			switch_case_state = 10;
 8002bb2:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <main+0x178c>)
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	701a      	strb	r2, [r3, #0]
			break;
 8002bb8:	f000 bc50 	b.w	800345c <main+0x1f64>
		}


//N2O Keyswitch
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002bbc:	4b30      	ldr	r3, [pc, #192]	@ (8002c80 <main+0x1788>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d022      	beq.n	8002c0e <main+0x1716>
				(state_local & O2_ISO_SW) != O2_ISO_SW)
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <main+0x1788>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11c      	bne.n	8002c0e <main+0x1716>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c88 <main+0x1790>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <main+0x16f4>
 8002bdc:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <main+0x178c>)
 8002bde:	220a      	movs	r2, #10
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	4b29      	ldr	r3, [pc, #164]	@ (8002c88 <main+0x1790>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	f000 bc38 	b.w	800345c <main+0x1f64>
			else{__asm("NOP");}
 8002bec:	bf00      	nop

//N2O Rotary Switch
			if((state_local& N2O_DEADMAN_SW) == N2O_DEADMAN_SW)
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <main+0x1788>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <main+0x170c>
			{
				switch_case_state = 7; // N2O Fill State
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <main+0x178c>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	701a      	strb	r2, [r3, #0]
				break;
 8002c00:	f000 bc2c 	b.w	800345c <main+0x1f64>
			}
//N2O Keyswitch but NO N2O Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <main+0x178c>)
 8002c06:	2209      	movs	r2, #9
 8002c08:	701a      	strb	r2, [r3, #0]
				break;
 8002c0a:	f000 bc27 	b.w	800345c <main+0x1f64>
			}
		}


//O2 Keyswitch
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <main+0x1788>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d021      	beq.n	8002c5e <main+0x1766>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW)
 8002c1a:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <main+0x1788>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11b      	bne.n	8002c5e <main+0x1766>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002c26:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <main+0x1790>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <main+0x1746>
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <main+0x178c>)
 8002c30:	220a      	movs	r2, #10
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <main+0x1790>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	f000 bc0f 	b.w	800345c <main+0x1f64>
			else{__asm("NOP");}
 8002c3e:	bf00      	nop

//O2 Rotary Switch
			if((state_local & O2_DEADMAN_SW) == O2_DEADMAN_SW)
 8002c40:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <main+0x1788>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <main+0x175e>
			{
				switch_case_state = 8;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <main+0x178c>)
 8002c4e:	2208      	movs	r2, #8
 8002c50:	701a      	strb	r2, [r3, #0]
				break;
 8002c52:	f000 bc03 	b.w	800345c <main+0x1f64>
			}
//O2 Keyswitch but NO O2 Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <main+0x178c>)
 8002c58:	2209      	movs	r2, #9
 8002c5a:	701a      	strb	r2, [r3, #0]
				break;
 8002c5c:	e3fe      	b.n	800345c <main+0x1f64>
		}

//If power is ON but other bits are off
		else
		{
			switch_case_state = 9; // Neutral state
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <main+0x178c>)
 8002c60:	2209      	movs	r2, #9
 8002c62:	701a      	strb	r2, [r3, #0]
			break;
 8002c64:	e3fa      	b.n	800345c <main+0x1f64>
 8002c66:	bf00      	nop
 8002c68:	20000378 	.word	0x20000378
 8002c6c:	20000390 	.word	0x20000390
 8002c70:	200003a8 	.word	0x200003a8
 8002c74:	200003c0 	.word	0x200003c0
 8002c78:	200003d8 	.word	0x200003d8
 8002c7c:	200003f0 	.word	0x200003f0
 8002c80:	200000c2 	.word	0x200000c2
 8002c84:	200000c0 	.word	0x200000c0
 8002c88:	200000c7 	.word	0x200000c7
 8002c8c:	20000210 	.word	0x20000210
 8002c90:	200001f8 	.word	0x200001f8
 8002c94:	20000348 	.word	0x20000348
 8002c98:	20000360 	.word	0x20000360
 8002c9c:	200001c8 	.word	0x200001c8
 8002ca0:	200001b0 	.word	0x200001b0
 8002ca4:	20000288 	.word	0x20000288
 8002ca8:	200002b8 	.word	0x200002b8

//**************************N2O FILL *************************************************************
	case 7:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002cac:	4b53      	ldr	r3, [pc, #332]	@ (8002dfc <main+0x1904>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	4b52      	ldr	r3, [pc, #328]	@ (8002dfc <main+0x1904>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cba:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002cbc:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <main+0x1908>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e00 <main+0x1908>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cca:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <main+0x190c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8002e04 <main+0x190c>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cda:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <main+0x1910>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	4b49      	ldr	r3, [pc, #292]	@ (8002e08 <main+0x1910>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cea:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002cec:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <main+0x1914>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	4b46      	ldr	r3, [pc, #280]	@ (8002e0c <main+0x1914>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfa:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002cfc:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <main+0x1918>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <main+0x1918>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d0a:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 14;
 8002d0c:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <main+0x191c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002d12:	4b41      	ldr	r3, [pc, #260]	@ (8002e18 <main+0x1920>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	4b3f      	ldr	r3, [pc, #252]	@ (8002e18 <main+0x1920>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d20:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002d22:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <main+0x1924>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	4b3c      	ldr	r3, [pc, #240]	@ (8002e1c <main+0x1924>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d30:	615a      	str	r2, [r3, #20]

		//Ensure O2 Fill is not filling
		led_o2.port->ODR &= ~(O2_LED);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <main+0x1928>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	4b39      	ldr	r3, [pc, #228]	@ (8002e20 <main+0x1928>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d40:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002d42:	4b38      	ldr	r3, [pc, #224]	@ (8002e24 <main+0x192c>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <main+0x192c>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d50:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8002d52:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <main+0x1930>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	4b33      	ldr	r3, [pc, #204]	@ (8002e28 <main+0x1930>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d60:	615a      	str	r2, [r3, #20]

		//Ensure igntion is not igniting
		Ignition1_ARM.port->ODR |= (IGNITION2_ARM);
 8002d62:	4b32      	ldr	r3, [pc, #200]	@ (8002e2c <main+0x1934>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <main+0x1934>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f042 0208 	orr.w	r2, r2, #8
 8002d70:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR |= (IGNITION2_OP);
 8002d72:	4b2f      	ldr	r3, [pc, #188]	@ (8002e30 <main+0x1938>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <main+0x1938>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f042 0204 	orr.w	r2, r2, #4
 8002d80:	615a      	str	r2, [r3, #20]

		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002d82:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <main+0x193c>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	4b2a      	ldr	r3, [pc, #168]	@ (8002e34 <main+0x193c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f042 0208 	orr.w	r2, r2, #8
 8002d90:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002d92:	4b29      	ldr	r3, [pc, #164]	@ (8002e38 <main+0x1940>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <main+0x1940>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f042 0204 	orr.w	r2, r2, #4
 8002da0:	615a      	str	r2, [r3, #20]

		CH4_ARM.port->ODR &= ~(CH4_Arm);
 8002da2:	4b26      	ldr	r3, [pc, #152]	@ (8002e3c <main+0x1944>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <main+0x1944>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db0:	615a      	str	r2, [r3, #20]
		CH4_OP.port->ODR &= ~(CH4_Operate);
 8002db2:	4b23      	ldr	r3, [pc, #140]	@ (8002e40 <main+0x1948>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <main+0x1948>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002dc0:	615a      	str	r2, [r3, #20]

		//Enable N2O Fill
		led_n2o.port->ODR|=N2O_LED;
 8002dc2:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <main+0x194c>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <main+0x194c>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f042 0220 	orr.w	r2, r2, #32
 8002dd0:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR |= CH3_Arm;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <main+0x1950>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <main+0x1950>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002de0:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR |= CH3_Operate;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <main+0x1954>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <main+0x1954>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df0:	615a      	str	r2, [r3, #20]
		switch_case_state = 0;
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <main+0x1958>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
		break;
 8002df8:	e330      	b.n	800345c <main+0x1f64>
 8002dfa:	bf00      	nop
 8002dfc:	20000378 	.word	0x20000378
 8002e00:	20000390 	.word	0x20000390
 8002e04:	200003a8 	.word	0x200003a8
 8002e08:	200003c0 	.word	0x200003c0
 8002e0c:	200003d8 	.word	0x200003d8
 8002e10:	200003f0 	.word	0x200003f0
 8002e14:	200000c4 	.word	0x200000c4
 8002e18:	20000180 	.word	0x20000180
 8002e1c:	20000168 	.word	0x20000168
 8002e20:	20000360 	.word	0x20000360
 8002e24:	200001c8 	.word	0x200001c8
 8002e28:	200001b0 	.word	0x200001b0
 8002e2c:	20000288 	.word	0x20000288
 8002e30:	200002a0 	.word	0x200002a0
 8002e34:	200002b8 	.word	0x200002b8
 8002e38:	200002d0 	.word	0x200002d0
 8002e3c:	20000258 	.word	0x20000258
 8002e40:	20000240 	.word	0x20000240
 8002e44:	20000348 	.word	0x20000348
 8002e48:	20000210 	.word	0x20000210
 8002e4c:	200001f8 	.word	0x200001f8
 8002e50:	200000c0 	.word	0x200000c0

//**************************O2 FILL*************************************************************
	case 8:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002e54:	4b53      	ldr	r3, [pc, #332]	@ (8002fa4 <main+0x1aac>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	4b52      	ldr	r3, [pc, #328]	@ (8002fa4 <main+0x1aac>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e62:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002e64:	4b50      	ldr	r3, [pc, #320]	@ (8002fa8 <main+0x1ab0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa8 <main+0x1ab0>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e72:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002e74:	4b4d      	ldr	r3, [pc, #308]	@ (8002fac <main+0x1ab4>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8002fac <main+0x1ab4>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e82:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002e84:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <main+0x1ab8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b49      	ldr	r3, [pc, #292]	@ (8002fb0 <main+0x1ab8>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e92:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002e94:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <main+0x1abc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <main+0x1abc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea2:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002ea4:	4b44      	ldr	r3, [pc, #272]	@ (8002fb8 <main+0x1ac0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <main+0x1ac0>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 13;
 8002eb4:	4b41      	ldr	r3, [pc, #260]	@ (8002fbc <main+0x1ac4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	801a      	strh	r2, [r3, #0]

		//Ensure Ignition is not igniting
		Ignition1_ARM.port->ODR |= (IGNITION2_ARM);
 8002eba:	4b41      	ldr	r3, [pc, #260]	@ (8002fc0 <main+0x1ac8>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <main+0x1ac8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f042 0208 	orr.w	r2, r2, #8
 8002ec8:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR |= (IGNITION2_OP);
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <main+0x1acc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <main+0x1acc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f042 0204 	orr.w	r2, r2, #4
 8002ed8:	615a      	str	r2, [r3, #20]

		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002eda:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc8 <main+0x1ad0>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <main+0x1ad0>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f042 0208 	orr.w	r2, r2, #8
 8002ee8:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002eea:	4b38      	ldr	r3, [pc, #224]	@ (8002fcc <main+0x1ad4>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <main+0x1ad4>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f042 0204 	orr.w	r2, r2, #4
 8002ef8:	615a      	str	r2, [r3, #20]

		CH4_ARM.port->ODR &= ~(CH4_Arm);
 8002efa:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <main+0x1ad8>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <main+0x1ad8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f08:	615a      	str	r2, [r3, #20]
		CH4_OP.port->ODR &= ~(CH4_Operate);
 8002f0a:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <main+0x1adc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	4b30      	ldr	r3, [pc, #192]	@ (8002fd4 <main+0x1adc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f18:	615a      	str	r2, [r3, #20]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <main+0x1ae0>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <main+0x1ae0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f28:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fdc <main+0x1ae4>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <main+0x1ae4>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f38:	615a      	str	r2, [r3, #20]

		//Ensure N2O Fill is not filling
		led_n2o.port->ODR &= ~(N2O_LED);
 8002f3a:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <main+0x1ae8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <main+0x1ae8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f022 0220 	bic.w	r2, r2, #32
 8002f48:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002f4a:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <main+0x1aec>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	4b24      	ldr	r3, [pc, #144]	@ (8002fe4 <main+0x1aec>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f58:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002f5a:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <main+0x1af0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	4b21      	ldr	r3, [pc, #132]	@ (8002fe8 <main+0x1af0>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f68:	615a      	str	r2, [r3, #20]

		//Enable O2 to flow
		led_o2.port->ODR|=O2_LED;
 8002f6a:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <main+0x1af4>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <main+0x1af4>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f78:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR |= CH2_Arm;
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <main+0x1af8>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <main+0x1af8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f88:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR |= CH2_Operate;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <main+0x1afc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <main+0x1afc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f98:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8002f9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <main+0x1b00>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
		break;
 8002fa0:	e25c      	b.n	800345c <main+0x1f64>
 8002fa2:	bf00      	nop
 8002fa4:	20000378 	.word	0x20000378
 8002fa8:	20000390 	.word	0x20000390
 8002fac:	200003a8 	.word	0x200003a8
 8002fb0:	200003c0 	.word	0x200003c0
 8002fb4:	200003d8 	.word	0x200003d8
 8002fb8:	200003f0 	.word	0x200003f0
 8002fbc:	200000c4 	.word	0x200000c4
 8002fc0:	20000288 	.word	0x20000288
 8002fc4:	200002a0 	.word	0x200002a0
 8002fc8:	200002b8 	.word	0x200002b8
 8002fcc:	200002d0 	.word	0x200002d0
 8002fd0:	20000258 	.word	0x20000258
 8002fd4:	20000240 	.word	0x20000240
 8002fd8:	20000180 	.word	0x20000180
 8002fdc:	20000168 	.word	0x20000168
 8002fe0:	20000348 	.word	0x20000348
 8002fe4:	20000210 	.word	0x20000210
 8002fe8:	200001f8 	.word	0x200001f8
 8002fec:	20000360 	.word	0x20000360
 8002ff0:	200001c8 	.word	0x200001c8
 8002ff4:	200001b0 	.word	0x200001b0
 8002ff8:	200000c0 	.word	0x200000c0

//**************************NEUTRAL STATE*************************************************************
	case 9:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8002ffc:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <main+0x1c4c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	4b50      	ldr	r3, [pc, #320]	@ (8003144 <main+0x1c4c>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800300a:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 800300c:	4b4e      	ldr	r3, [pc, #312]	@ (8003148 <main+0x1c50>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	4b4d      	ldr	r3, [pc, #308]	@ (8003148 <main+0x1c50>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800301a:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 800301c:	4b4b      	ldr	r3, [pc, #300]	@ (800314c <main+0x1c54>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <main+0x1c54>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800302a:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 800302c:	4b48      	ldr	r3, [pc, #288]	@ (8003150 <main+0x1c58>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <main+0x1c58>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800303a:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 800303c:	4b45      	ldr	r3, [pc, #276]	@ (8003154 <main+0x1c5c>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <main+0x1c5c>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800304a:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 800304c:	4b42      	ldr	r3, [pc, #264]	@ (8003158 <main+0x1c60>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <main+0x1c60>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800305a:	615a      	str	r2, [r3, #20]


		//Turn OFF ignition coil relays
		Ignition1_ARM.port->ODR |= (IGNITION2_ARM);
 800305c:	4b3f      	ldr	r3, [pc, #252]	@ (800315c <main+0x1c64>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	4b3e      	ldr	r3, [pc, #248]	@ (800315c <main+0x1c64>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR |= (IGNITION2_OP);
 800306c:	4b3c      	ldr	r3, [pc, #240]	@ (8003160 <main+0x1c68>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <main+0x1c68>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f042 0204 	orr.w	r2, r2, #4
 800307a:	615a      	str	r2, [r3, #20]

		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 800307c:	4b39      	ldr	r3, [pc, #228]	@ (8003164 <main+0x1c6c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <main+0x1c6c>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 800308c:	4b36      	ldr	r3, [pc, #216]	@ (8003168 <main+0x1c70>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <main+0x1c70>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f042 0204 	orr.w	r2, r2, #4
 800309a:	615a      	str	r2, [r3, #20]

		CH4_ARM.port->ODR &= ~(CH4_Arm);
 800309c:	4b33      	ldr	r3, [pc, #204]	@ (800316c <main+0x1c74>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	4b32      	ldr	r3, [pc, #200]	@ (800316c <main+0x1c74>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030aa:	615a      	str	r2, [r3, #20]
		CH4_OP.port->ODR &= ~(CH4_Operate);
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <main+0x1c78>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003170 <main+0x1c78>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030ba:	615a      	str	r2, [r3, #20]


		//Ensure PURGE is not purging
		CH1_OP.port->ODR |= (CH1_Operate);
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <main+0x1c7c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <main+0x1c7c>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030ca:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= (CH1_Arm);
 80030cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003178 <main+0x1c80>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	4b29      	ldr	r3, [pc, #164]	@ (8003178 <main+0x1c80>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030da:	615a      	str	r2, [r3, #20]

		//Ensure N2O is not filling
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <main+0x1c84>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	4b26      	ldr	r3, [pc, #152]	@ (800317c <main+0x1c84>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030ea:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 80030ec:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <main+0x1c88>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <main+0x1c88>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030fa:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 80030fc:	4b21      	ldr	r3, [pc, #132]	@ (8003184 <main+0x1c8c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	4b20      	ldr	r3, [pc, #128]	@ (8003184 <main+0x1c8c>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f022 0220 	bic.w	r2, r2, #32
 800310a:	615a      	str	r2, [r3, #20]

		//Ensure O2 is not filling
		led_o2.port->ODR &= ~(O2_LED);
 800310c:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <main+0x1c90>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <main+0x1c90>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800311a:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 800311c:	4b1b      	ldr	r3, [pc, #108]	@ (800318c <main+0x1c94>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <main+0x1c94>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800312a:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 800312c:	4b18      	ldr	r3, [pc, #96]	@ (8003190 <main+0x1c98>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <main+0x1c98>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313a:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 800313c:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <main+0x1c9c>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
		break;
 8003142:	e18b      	b.n	800345c <main+0x1f64>
 8003144:	20000378 	.word	0x20000378
 8003148:	20000390 	.word	0x20000390
 800314c:	200003a8 	.word	0x200003a8
 8003150:	200003c0 	.word	0x200003c0
 8003154:	200003d8 	.word	0x200003d8
 8003158:	200003f0 	.word	0x200003f0
 800315c:	20000288 	.word	0x20000288
 8003160:	200002a0 	.word	0x200002a0
 8003164:	200002b8 	.word	0x200002b8
 8003168:	200002d0 	.word	0x200002d0
 800316c:	20000258 	.word	0x20000258
 8003170:	20000240 	.word	0x20000240
 8003174:	20000168 	.word	0x20000168
 8003178:	20000180 	.word	0x20000180
 800317c:	20000210 	.word	0x20000210
 8003180:	200001f8 	.word	0x200001f8
 8003184:	20000348 	.word	0x20000348
 8003188:	20000360 	.word	0x20000360
 800318c:	200001c8 	.word	0x200001c8
 8003190:	200001b0 	.word	0x200001b0
 8003194:	200000c0 	.word	0x200000c0

//**************************PURGE STATE*************************************************************
	case 10:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8003198:	4b71      	ldr	r3, [pc, #452]	@ (8003360 <main+0x1e68>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	4b70      	ldr	r3, [pc, #448]	@ (8003360 <main+0x1e68>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031a6:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 80031a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003364 <main+0x1e6c>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003364 <main+0x1e6c>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b6:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 80031b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003368 <main+0x1e70>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	4b6a      	ldr	r3, [pc, #424]	@ (8003368 <main+0x1e70>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031c6:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 80031c8:	4b68      	ldr	r3, [pc, #416]	@ (800336c <main+0x1e74>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	4b67      	ldr	r3, [pc, #412]	@ (800336c <main+0x1e74>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d6:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 80031d8:	4b65      	ldr	r3, [pc, #404]	@ (8003370 <main+0x1e78>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	4b64      	ldr	r3, [pc, #400]	@ (8003370 <main+0x1e78>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e6:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 80031e8:	4b62      	ldr	r3, [pc, #392]	@ (8003374 <main+0x1e7c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	4b61      	ldr	r3, [pc, #388]	@ (8003374 <main+0x1e7c>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	615a      	str	r2, [r3, #20]
		//Presuming relay 1 is the DUMP relay!
		//PURGE is NO -> output a low to purge
		//output a high to stop purging!

		//Ensure Ignition is not igniting
		Ignition1_ARM.port->ODR |= (IGNITION2_ARM);
 80031f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003378 <main+0x1e80>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003378 <main+0x1e80>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f042 0208 	orr.w	r2, r2, #8
 8003206:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR |= (IGNITION2_OP);
 8003208:	4b5c      	ldr	r3, [pc, #368]	@ (800337c <main+0x1e84>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <main+0x1e84>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f042 0204 	orr.w	r2, r2, #4
 8003216:	615a      	str	r2, [r3, #20]

		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8003218:	4b59      	ldr	r3, [pc, #356]	@ (8003380 <main+0x1e88>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	4b58      	ldr	r3, [pc, #352]	@ (8003380 <main+0x1e88>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8003228:	4b56      	ldr	r3, [pc, #344]	@ (8003384 <main+0x1e8c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	4b55      	ldr	r3, [pc, #340]	@ (8003384 <main+0x1e8c>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f042 0204 	orr.w	r2, r2, #4
 8003236:	615a      	str	r2, [r3, #20]

		//Turn off N2O Solenoid and turn off LED
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8003238:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <main+0x1e90>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	4b52      	ldr	r3, [pc, #328]	@ (8003388 <main+0x1e90>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003246:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8003248:	4b50      	ldr	r3, [pc, #320]	@ (800338c <main+0x1e94>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	4b4f      	ldr	r3, [pc, #316]	@ (800338c <main+0x1e94>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003256:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8003258:	4b4d      	ldr	r3, [pc, #308]	@ (8003390 <main+0x1e98>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	4b4c      	ldr	r3, [pc, #304]	@ (8003390 <main+0x1e98>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f022 0220 	bic.w	r2, r2, #32
 8003266:	615a      	str	r2, [r3, #20]

		//Turn off O2 Solenoid and turn off LED
		led_o2.port->ODR &= ~(O2_LED);
 8003268:	4b4a      	ldr	r3, [pc, #296]	@ (8003394 <main+0x1e9c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	4b49      	ldr	r3, [pc, #292]	@ (8003394 <main+0x1e9c>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003276:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003278:	4b47      	ldr	r3, [pc, #284]	@ (8003398 <main+0x1ea0>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	4b46      	ldr	r3, [pc, #280]	@ (8003398 <main+0x1ea0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003286:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8003288:	4b44      	ldr	r3, [pc, #272]	@ (800339c <main+0x1ea4>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	4b43      	ldr	r3, [pc, #268]	@ (800339c <main+0x1ea4>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003296:	615a      	str	r2, [r3, #20]

		//Power off PURGE solenoid therefore starting purge
		CH1_ARM.port->ODR &= ~(CH1_Arm);
 8003298:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <main+0x1ea8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	4b40      	ldr	r3, [pc, #256]	@ (80033a0 <main+0x1ea8>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032a6:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR &= ~(CH1_Operate);
 80032a8:	4b3e      	ldr	r3, [pc, #248]	@ (80033a4 <main+0x1eac>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <main+0x1eac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032b6:	615a      	str	r2, [r3, #20]

		switch_case_state = 0;
 80032b8:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <main+0x1eb0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
		break;
 80032be:	e0cd      	b.n	800345c <main+0x1f64>

		//Disable IRQs - we are igniting, nothing can stop this....
		//__disable_irq();

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <main+0x1e68>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	4b26      	ldr	r3, [pc, #152]	@ (8003360 <main+0x1e68>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ce:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <main+0x1e6c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <main+0x1e6c>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032de:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 80032e0:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <main+0x1e70>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <main+0x1e70>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ee:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 80032f0:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <main+0x1e74>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <main+0x1e74>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fe:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <main+0x1e78>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <main+0x1e78>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330e:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8003310:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <main+0x1e7c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <main+0x1e7c>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331e:	615a      	str	r2, [r3, #20]

		//Check O2 Fill status - as we check for igniton first in case 4 - we need to check O2 again to ensure that we actuate correctly
		if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 8003320:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <main+0x1eb4>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d041      	beq.n	80033b0 <main+0x1eb8>
			//Turn ON O2 Solenoid and turn on LED
			led_o2.port->ODR |= (O2_LED);
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <main+0x1e9c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b18      	ldr	r3, [pc, #96]	@ (8003394 <main+0x1e9c>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800333a:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm);
 800333c:	4b16      	ldr	r3, [pc, #88]	@ (8003398 <main+0x1ea0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <main+0x1ea0>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800334a:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate);
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <main+0x1ea4>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <main+0x1ea4>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800335a:	615a      	str	r2, [r3, #20]
 800335c:	e040      	b.n	80033e0 <main+0x1ee8>
 800335e:	bf00      	nop
 8003360:	20000378 	.word	0x20000378
 8003364:	20000390 	.word	0x20000390
 8003368:	200003a8 	.word	0x200003a8
 800336c:	200003c0 	.word	0x200003c0
 8003370:	200003d8 	.word	0x200003d8
 8003374:	200003f0 	.word	0x200003f0
 8003378:	20000288 	.word	0x20000288
 800337c:	200002a0 	.word	0x200002a0
 8003380:	200002b8 	.word	0x200002b8
 8003384:	200002d0 	.word	0x200002d0
 8003388:	20000210 	.word	0x20000210
 800338c:	200001f8 	.word	0x200001f8
 8003390:	20000348 	.word	0x20000348
 8003394:	20000360 	.word	0x20000360
 8003398:	200001c8 	.word	0x200001c8
 800339c:	200001b0 	.word	0x200001b0
 80033a0:	20000180 	.word	0x20000180
 80033a4:	20000168 	.word	0x20000168
 80033a8:	200000c0 	.word	0x200000c0
 80033ac:	200000c1 	.word	0x200000c1
		}
		else {
			//Turn off O2 Solenoid and turn off LED
			led_o2.port->ODR &= ~(O2_LED);
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <main+0x1f68>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003460 <main+0x1f68>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033be:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 80033c0:	4b28      	ldr	r3, [pc, #160]	@ (8003464 <main+0x1f6c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <main+0x1f6c>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033ce:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 80033d0:	4b25      	ldr	r3, [pc, #148]	@ (8003468 <main+0x1f70>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <main+0x1f70>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033de:	615a      	str	r2, [r3, #20]
		}

		//Ensure N2O LED are OFF
		led_n2o.port->ODR &= ~(N2O_LED);
 80033e0:	4b22      	ldr	r3, [pc, #136]	@ (800346c <main+0x1f74>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	4b21      	ldr	r3, [pc, #132]	@ (800346c <main+0x1f74>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f022 0220 	bic.w	r2, r2, #32
 80033ee:	615a      	str	r2, [r3, #20]

		//Ensure N2O solenoid is OFF
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 80033f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003470 <main+0x1f78>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003470 <main+0x1f78>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033fe:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8003400:	4b1c      	ldr	r3, [pc, #112]	@ (8003474 <main+0x1f7c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <main+0x1f7c>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340e:	615a      	str	r2, [r3, #20]

		//Ensure the DUMP solenoid is not dumping
		CH1_ARM.port->ODR |= (CH1_Arm);
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <main+0x1f80>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <main+0x1f80>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800341e:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8003420:	4b16      	ldr	r3, [pc, #88]	@ (800347c <main+0x1f84>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <main+0x1f84>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800342e:	615a      	str	r2, [r3, #20]


		//Spark Generation Enable Relay

		 CH4_ARM.port->ODR |= (CH4_Arm);
 8003430:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <main+0x1f88>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <main+0x1f88>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800343e:	615a      	str	r2, [r3, #20]
		 CH4_OP.port->ODR |= (CH4_Operate);
 8003440:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <main+0x1f8c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <main+0x1f8c>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	615a      	str	r2, [r3, #20]


		//Manually removes "ignition" state bit from last read LoRa packet info
		//state &= ~(0x02 <<2); //this if more so for remote control 0bxxxx11xx become 0
		switch_case_state = 0;
 8003450:	4b0d      	ldr	r3, [pc, #52]	@ (8003488 <main+0x1f90>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
		//turns of the ignite state once done!
		//state cannot be triggered more than once sequentially!
		//__enable_irq();
		break;
 8003456:	bf00      	nop
 8003458:	f7fe bc7a 	b.w	8001d50 <main+0x858>
	switch(switch_case_state){
 800345c:	f7fe bc78 	b.w	8001d50 <main+0x858>
 8003460:	20000360 	.word	0x20000360
 8003464:	200001c8 	.word	0x200001c8
 8003468:	200001b0 	.word	0x200001b0
 800346c:	20000348 	.word	0x20000348
 8003470:	20000210 	.word	0x20000210
 8003474:	200001f8 	.word	0x200001f8
 8003478:	20000180 	.word	0x20000180
 800347c:	20000168 	.word	0x20000168
 8003480:	20000258 	.word	0x20000258
 8003484:	20000240 	.word	0x20000240
 8003488:	200000c0 	.word	0x200000c0

0800348c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
 **/
void SystemClock_Config(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b094      	sub	sp, #80	@ 0x50
 8003490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003492:	f107 0320 	add.w	r3, r7, #32
 8003496:	2230      	movs	r2, #48	@ 0x30
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f003 f972 	bl	8006784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <SystemClock_Config+0xd8>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003564 <SystemClock_Config+0xd8>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6413      	str	r3, [r2, #64]	@ 0x40
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <SystemClock_Config+0xd8>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034cc:	2300      	movs	r3, #0
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	4b25      	ldr	r3, [pc, #148]	@ (8003568 <SystemClock_Config+0xdc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <SystemClock_Config+0xdc>)
 80034d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <SystemClock_Config+0xdc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034e8:	2302      	movs	r3, #2
 80034ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034ec:	2301      	movs	r3, #1
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034f0:	2310      	movs	r3, #16
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034f4:	2302      	movs	r3, #2
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034fc:	2308      	movs	r3, #8
 80034fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003500:	23b4      	movs	r3, #180	@ 0xb4
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003504:	2302      	movs	r3, #2
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003508:	2304      	movs	r3, #4
 800350a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800350c:	f107 0320 	add.w	r3, r7, #32
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fcf3 	bl	8005efc <HAL_RCC_OscConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800351c:	f000 fbb4 	bl	8003c88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003520:	f002 fc9c 	bl	8005e5c <HAL_PWREx_EnableOverDrive>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800352a:	f000 fbad 	bl	8003c88 <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800352e:	230f      	movs	r3, #15
 8003530:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003532:	2302      	movs	r3, #2
 8003534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800353a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800353e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	2105      	movs	r1, #5
 800354c:	4618      	mov	r0, r3
 800354e:	f002 ff4d 	bl	80063ec <HAL_RCC_ClockConfig>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003558:	f000 fb96 	bl	8003c88 <Error_Handler>
  }
}
 800355c:	bf00      	nop
 800355e:	3750      	adds	r7, #80	@ 0x50
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000

0800356c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b08d      	sub	sp, #52	@ 0x34
 8003570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003572:	f107 031c 	add.w	r3, r7, #28
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	60da      	str	r2, [r3, #12]
 8003580:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <MX_GPIO_Init+0xcc>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	4a2b      	ldr	r2, [pc, #172]	@ (8003638 <MX_GPIO_Init+0xcc>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6313      	str	r3, [r2, #48]	@ 0x30
 8003592:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <MX_GPIO_Init+0xcc>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b25      	ldr	r3, [pc, #148]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a24      	ldr	r2, [pc, #144]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035a8:	f043 0320 	orr.w	r3, r3, #32
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	4a16      	ldr	r2, [pc, #88]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003638 <MX_GPIO_Init+0xcc>)
 80035fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <MX_GPIO_Init+0xcc>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <MX_GPIO_Init+0xcc>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <MX_GPIO_Init+0xcc>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6313      	str	r3, [r2, #48]	@ 0x30
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <MX_GPIO_Init+0xcc>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]

}
 800362a:	bf00      	nop
 800362c:	3734      	adds	r7, #52	@ 0x34
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <MX_I2C2_Init>:


/* USER CODE BEGIN 4 */

static void MX_I2C2_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003640:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <MX_I2C2_Init+0x74>)
 8003642:	4a1c      	ldr	r2, [pc, #112]	@ (80036b4 <MX_I2C2_Init+0x78>)
 8003644:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003646:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <MX_I2C2_Init+0x74>)
 8003648:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <MX_I2C2_Init+0x7c>)
 800364a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800364c:	4b18      	ldr	r3, [pc, #96]	@ (80036b0 <MX_I2C2_Init+0x74>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003652:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <MX_I2C2_Init+0x74>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003658:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <MX_I2C2_Init+0x74>)
 800365a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800365e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003660:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <MX_I2C2_Init+0x74>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003666:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <MX_I2C2_Init+0x74>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800366c:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <MX_I2C2_Init+0x74>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003672:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <MX_I2C2_Init+0x74>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003678:	480d      	ldr	r0, [pc, #52]	@ (80036b0 <MX_I2C2_Init+0x74>)
 800367a:	f001 fb79 	bl	8004d70 <HAL_I2C_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003684:	f000 fb00 	bl	8003c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003688:	2100      	movs	r1, #0
 800368a:	4809      	ldr	r0, [pc, #36]	@ (80036b0 <MX_I2C2_Init+0x74>)
 800368c:	f002 fb6a 	bl	8005d64 <HAL_I2CEx_ConfigAnalogFilter>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003696:	f000 faf7 	bl	8003c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800369a:	2100      	movs	r1, #0
 800369c:	4804      	ldr	r0, [pc, #16]	@ (80036b0 <MX_I2C2_Init+0x74>)
 800369e:	f002 fb9d 	bl	8005ddc <HAL_I2CEx_ConfigDigitalFilter>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80036a8:	f000 faee 	bl	8003c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000006c 	.word	0x2000006c
 80036b4:	40005800 	.word	0x40005800
 80036b8:	000186a0 	.word	0x000186a0

080036bc <TIM1_UP_TIM10_IRQHandler>:
  /** Configure Digital filter
  */


void TIM1_UP_TIM10_IRQHandler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
	hardware_timer_count++;
 80036c0:	4b32      	ldr	r3, [pc, #200]	@ (800378c <TIM1_UP_TIM10_IRQHandler+0xd0>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b30      	ldr	r3, [pc, #192]	@ (800378c <TIM1_UP_TIM10_IRQHandler+0xd0>)
 80036ca:	701a      	strb	r2, [r3, #0]
	if(hardware_timer_count<5)
 80036cc:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <TIM1_UP_TIM10_IRQHandler+0xd0>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d806      	bhi.n	80036e2 <TIM1_UP_TIM10_IRQHandler+0x26>
	{
		   //Hardware Timer interrupt callback for LoRa RX
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 80036d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003790 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003790 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	6113      	str	r3, [r2, #16]

		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
		hardware_timer_count = 0;
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
	}
}
 80036e0:	e04f      	b.n	8003782 <TIM1_UP_TIM10_IRQHandler+0xc6>
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 80036e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003794 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036f0:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 80036f2:	4b29      	ldr	r3, [pc, #164]	@ (8003798 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003700:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8003702:	4b26      	ldr	r3, [pc, #152]	@ (800379c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f022 0220 	bic.w	r2, r2, #32
 8003710:	615a      	str	r2, [r3, #20]
		led_o2.port->ODR &= ~(O2_LED);
 8003712:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003720:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8003722:	4b20      	ldr	r3, [pc, #128]	@ (80037a4 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003730:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8003732:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <TIM1_UP_TIM10_IRQHandler+0xec>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	4b1b      	ldr	r3, [pc, #108]	@ (80037a8 <TIM1_UP_TIM10_IRQHandler+0xec>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003740:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= CH1_Arm;
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <TIM1_UP_TIM10_IRQHandler+0xf0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	4b18      	ldr	r3, [pc, #96]	@ (80037ac <TIM1_UP_TIM10_IRQHandler+0xf0>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003750:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= CH1_Operate;
 8003752:	4b17      	ldr	r3, [pc, #92]	@ (80037b0 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <TIM1_UP_TIM10_IRQHandler+0xf4>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003760:	615a      	str	r2, [r3, #20]
		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
 8003762:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 800376e:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 8003770:	4b06      	ldr	r3, [pc, #24]	@ (800378c <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	4a05      	ldr	r2, [pc, #20]	@ (8003790 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6113      	str	r3, [r2, #16]
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	200000c6 	.word	0x200000c6
 8003790:	40010000 	.word	0x40010000
 8003794:	20000210 	.word	0x20000210
 8003798:	200001f8 	.word	0x200001f8
 800379c:	20000348 	.word	0x20000348
 80037a0:	20000360 	.word	0x20000360
 80037a4:	200001c8 	.word	0x200001c8
 80037a8:	200001b0 	.word	0x200001b0
 80037ac:	20000180 	.word	0x20000180
 80037b0:	20000168 	.word	0x20000168
 80037b4:	200000c1 	.word	0x200000c1

080037b8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	HAL_Delay(2); //200us delay to prevent debouncing
 80037bc:	2002      	movs	r0, #2
 80037be:	f001 f821 	bl	8004804 <HAL_Delay>
   	if(EXTI->PR & EXTI_PR_PR1) //if the rising edge has been detected by pin 2
 80037c2:	4b13      	ldr	r3, [pc, #76]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01d      	beq.n	800380a <EXTI1_IRQHandler+0x52>
   	{
   		EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 80037ce:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 80037d4:	f023 0302 	bic.w	r3, r3, #2
 80037d8:	6153      	str	r3, [r2, #20]
   		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == LOCAL_CONTROL_SW)
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <EXTI1_IRQHandler+0x5c>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e8:	d109      	bne.n	80037fe <EXTI1_IRQHandler+0x46>
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4a08      	ldr	r2, [pc, #32]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 80037f0:	f023 0302 	bic.w	r3, r3, #2
 80037f4:	6153      	str	r3, [r2, #20]
			dump_flag = 1; //tells program manual dump flag has been set!
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <EXTI1_IRQHandler+0x60>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
   		else
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
   		}
   	}
}
 80037fc:	e005      	b.n	800380a <EXTI1_IRQHandler+0x52>
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 80037fe:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4a03      	ldr	r2, [pc, #12]	@ (8003810 <EXTI1_IRQHandler+0x58>)
 8003804:	f023 0302 	bic.w	r3, r3, #2
 8003808:	6153      	str	r3, [r2, #20]
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40013c00 	.word	0x40013c00
 8003814:	20000420 	.word	0x20000420
 8003818:	200000c7 	.word	0x200000c7

0800381c <EXTI3_IRQHandler>:


//ambient temperature alert!
void EXTI3_IRQHandler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  	if(EXTI->PR & EXTI_PR_PR3) //if the rising edge has been detected by pin 2
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <EXTI3_IRQHandler+0x28>)
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <EXTI3_IRQHandler+0x1c>
  	{
  		EXTI->PR &= ~EXTI_PR_PR3; //resets the flag
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <EXTI3_IRQHandler+0x28>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <EXTI3_IRQHandler+0x28>)
 8003832:	f023 0308 	bic.w	r3, r3, #8
 8003836:	6153      	str	r3, [r2, #20]
  		//do something here
  	}
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40013c00 	.word	0x40013c00

08003848 <EXTI9_5_IRQHandler>:



// LoRa DIO Interrupt
void EXTI9_5_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	   *  5) Proceed
	   */
	//  test_rx_interrupt++;
	 // uint8_t transmit_state = 0;
 	// SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
	EXTI->PR &= ~0x1F0; //resets the flag
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <EXTI9_5_IRQHandler+0x20>)
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <EXTI9_5_IRQHandler+0x20>)
 8003852:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8003856:	6153      	str	r3, [r2, #20]
	triggerRX= true;
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <EXTI9_5_IRQHandler+0x24>)
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 800385e:	2017      	movs	r0, #23
 8003860:	f7fd fdfc 	bl	800145c <__NVIC_DisableIRQ>

}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40013c00 	.word	0x40013c00
 800386c:	200000ca 	.word	0x200000ca

08003870 <RX_Receive>:

void RX_Receive(void)
{
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b08a      	sub	sp, #40	@ 0x28
 8003874:	af00      	add	r7, sp, #0
	//__disable_irq(); //uncomment after testing!!
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 8003876:	2017      	movs	r0, #23
 8003878:	f7fd fdf0 	bl	800145c <__NVIC_DisableIRQ>
	//__NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn); //Disable IQR for LoRa Hardware Timer

	HAL_Delay(350); //important!!
 800387c:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8003880:	f000 ffc0 	bl	8004804 <HAL_Delay>


	bool RX_result = SX1272_readReceive(&lora, pointerdata, LORA_MSG_LENGTH);
 8003884:	2220      	movs	r2, #32
 8003886:	4977      	ldr	r1, [pc, #476]	@ (8003a64 <RX_Receive+0x1f4>)
 8003888:	4877      	ldr	r0, [pc, #476]	@ (8003a68 <RX_Receive+0x1f8>)
 800388a:	f7fd fd12 	bl	80012b2 <SX1272_readReceive>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	triggerRX = false;
 8003894:	4b75      	ldr	r3, [pc, #468]	@ (8003a6c <RX_Receive+0x1fc>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
	GSE_Command.id= pointerdata[0];
 800389a:	4b72      	ldr	r3, [pc, #456]	@ (8003a64 <RX_Receive+0x1f4>)
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	4b74      	ldr	r3, [pc, #464]	@ (8003a70 <RX_Receive+0x200>)
 80038a0:	701a      	strb	r2, [r3, #0]
	GSE_Command.data[0]= pointerdata[1];
 80038a2:	4b70      	ldr	r3, [pc, #448]	@ (8003a64 <RX_Receive+0x1f4>)
 80038a4:	785a      	ldrb	r2, [r3, #1]
 80038a6:	4b72      	ldr	r3, [pc, #456]	@ (8003a70 <RX_Receive+0x200>)
 80038a8:	705a      	strb	r2, [r3, #1]
	GSE_Command.data[1]= pointerdata[2];
 80038aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003a64 <RX_Receive+0x1f4>)
 80038ac:	789a      	ldrb	r2, [r3, #2]
 80038ae:	4b70      	ldr	r3, [pc, #448]	@ (8003a70 <RX_Receive+0x200>)
 80038b0:	709a      	strb	r2, [r3, #2]


	if(GSE_Command.id != 0x02)
 80038b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a70 <RX_Receive+0x200>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d00a      	beq.n	80038d0 <RX_Receive+0x60>
	{
		lora_error = ERROR_INVALID_PACKET_ID;
 80038ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003a74 <RX_Receive+0x204>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 80038c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a78 <RX_Receive+0x208>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a78 <RX_Receive+0x208>)
 80038ca:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 80038cc:	bf00      	nop
		__asm("NOP");
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
	}


}
 80038ce:	e1bf      	b.n	8003c50 <RX_Receive+0x3e0>
	else if ((GSE_Command.data[0] & GSE_Command.data[1]) == 0x00)
 80038d0:	4b67      	ldr	r3, [pc, #412]	@ (8003a70 <RX_Receive+0x200>)
 80038d2:	785a      	ldrb	r2, [r3, #1]
 80038d4:	4b66      	ldr	r3, [pc, #408]	@ (8003a70 <RX_Receive+0x200>)
 80038d6:	789b      	ldrb	r3, [r3, #2]
 80038d8:	4013      	ands	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f040 81aa 	bne.w	8003c36 <RX_Receive+0x3c6>
		led_power.port->ODR |= PWR_LED; //Turn ON LED
 80038e2:	4b66      	ldr	r3, [pc, #408]	@ (8003a7c <RX_Receive+0x20c>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	4b64      	ldr	r3, [pc, #400]	@ (8003a7c <RX_Receive+0x20c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	615a      	str	r2, [r3, #20]
		lora_error_test++;
 80038f2:	4b63      	ldr	r3, [pc, #396]	@ (8003a80 <RX_Receive+0x210>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b61      	ldr	r3, [pc, #388]	@ (8003a80 <RX_Receive+0x210>)
 80038fc:	701a      	strb	r2, [r3, #0]
		state = GSE_Command.data[0];
 80038fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003a70 <RX_Receive+0x200>)
 8003900:	785a      	ldrb	r2, [r3, #1]
 8003902:	4b60      	ldr	r3, [pc, #384]	@ (8003a84 <RX_Receive+0x214>)
 8003904:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 8003906:	4b5c      	ldr	r3, [pc, #368]	@ (8003a78 <RX_Receive+0x208>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
		uint8_t transmit_state = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		switch(TX_Packet_Flag)
 8003912:	4b5d      	ldr	r3, [pc, #372]	@ (8003a88 <RX_Receive+0x218>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <RX_Receive+0xb2>
 800391a:	2b01      	cmp	r3, #1
 800391c:	f000 80c6 	beq.w	8003aac <RX_Receive+0x23c>
 8003920:	e158      	b.n	8003bd4 <RX_Receive+0x364>
				packet = Dummy_Transmit();
 8003922:	4c5a      	ldr	r4, [pc, #360]	@ (8003a8c <RX_Receive+0x21c>)
 8003924:	463b      	mov	r3, r7
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fb8a 	bl	8001040 <Dummy_Transmit>
 800392c:	4625      	mov	r5, r4
 800392e:	463c      	mov	r4, r7
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	6861      	ldr	r1, [r4, #4]
 8003934:	68a2      	ldr	r2, [r4, #8]
 8003936:	68e3      	ldr	r3, [r4, #12]
 8003938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393a:	6920      	ldr	r0, [r4, #16]
 800393c:	6961      	ldr	r1, [r4, #20]
 800393e:	69a2      	ldr	r2, [r4, #24]
 8003940:	69e3      	ldr	r3, [r4, #28]
 8003942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x06;
 8003944:	4b51      	ldr	r3, [pc, #324]	@ (8003a8c <RX_Receive+0x21c>)
 8003946:	2206      	movs	r2, #6
 8003948:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 800394a:	4b49      	ldr	r3, [pc, #292]	@ (8003a70 <RX_Receive+0x200>)
 800394c:	785a      	ldrb	r2, [r3, #1]
 800394e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a8c <RX_Receive+0x21c>)
 8003950:	705a      	strb	r2, [r3, #1]
				floatPtr = (uint8_t *) &TRANSDUCER_1.read_value_bar;
 8003952:	4b4f      	ldr	r3, [pc, #316]	@ (8003a90 <RX_Receive+0x220>)
 8003954:	623b      	str	r3, [r7, #32]
				packet.data[1] = floatPtr[3];
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	78da      	ldrb	r2, [r3, #3]
 800395a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a8c <RX_Receive+0x21c>)
 800395c:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	789a      	ldrb	r2, [r3, #2]
 8003962:	4b4a      	ldr	r3, [pc, #296]	@ (8003a8c <RX_Receive+0x21c>)
 8003964:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	785a      	ldrb	r2, [r3, #1]
 800396a:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <RX_Receive+0x21c>)
 800396c:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	4b46      	ldr	r3, [pc, #280]	@ (8003a8c <RX_Receive+0x21c>)
 8003974:	715a      	strb	r2, [r3, #5]
				floatPtr = (uint8_t *) &TRANSDUCER_2.read_value_bar;
 8003976:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <RX_Receive+0x224>)
 8003978:	623b      	str	r3, [r7, #32]
				packet.data[5] = floatPtr[3];
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	78da      	ldrb	r2, [r3, #3]
 800397e:	4b43      	ldr	r3, [pc, #268]	@ (8003a8c <RX_Receive+0x21c>)
 8003980:	719a      	strb	r2, [r3, #6]
				packet.data[6] = floatPtr[2];
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	789a      	ldrb	r2, [r3, #2]
 8003986:	4b41      	ldr	r3, [pc, #260]	@ (8003a8c <RX_Receive+0x21c>)
 8003988:	71da      	strb	r2, [r3, #7]
				packet.data[7] = floatPtr[1];
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	785a      	ldrb	r2, [r3, #1]
 800398e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a8c <RX_Receive+0x21c>)
 8003990:	721a      	strb	r2, [r3, #8]
				packet.data[8] = floatPtr[0];
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	4b3d      	ldr	r3, [pc, #244]	@ (8003a8c <RX_Receive+0x21c>)
 8003998:	725a      	strb	r2, [r3, #9]
				floatPtr = (uint8_t *) &TRANSDUCER_3.read_value_bar;
 800399a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a98 <RX_Receive+0x228>)
 800399c:	623b      	str	r3, [r7, #32]
				packet.data[9] = floatPtr[3];
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	78da      	ldrb	r2, [r3, #3]
 80039a2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a8c <RX_Receive+0x21c>)
 80039a4:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	789a      	ldrb	r2, [r3, #2]
 80039aa:	4b38      	ldr	r3, [pc, #224]	@ (8003a8c <RX_Receive+0x21c>)
 80039ac:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	785a      	ldrb	r2, [r3, #1]
 80039b2:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <RX_Receive+0x21c>)
 80039b4:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <RX_Receive+0x21c>)
 80039bc:	735a      	strb	r2, [r3, #13]
				floatPtr = (uint8_t *) &THERMOCOUPLE_1.temp;
 80039be:	4b37      	ldr	r3, [pc, #220]	@ (8003a9c <RX_Receive+0x22c>)
 80039c0:	623b      	str	r3, [r7, #32]
				packet.data[13] = floatPtr[3];
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	78da      	ldrb	r2, [r3, #3]
 80039c6:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <RX_Receive+0x21c>)
 80039c8:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	789a      	ldrb	r2, [r3, #2]
 80039ce:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <RX_Receive+0x21c>)
 80039d0:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	785a      	ldrb	r2, [r3, #1]
 80039d6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <RX_Receive+0x21c>)
 80039d8:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <RX_Receive+0x21c>)
 80039e0:	745a      	strb	r2, [r3, #17]
				floatPtr = (uint8_t *) &THERMOCOUPLE_2.temp;
 80039e2:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <RX_Receive+0x230>)
 80039e4:	623b      	str	r3, [r7, #32]
				packet.data[17] = floatPtr[3];
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	78da      	ldrb	r2, [r3, #3]
 80039ea:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <RX_Receive+0x21c>)
 80039ec:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	789a      	ldrb	r2, [r3, #2]
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <RX_Receive+0x21c>)
 80039f4:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	785a      	ldrb	r2, [r3, #1]
 80039fa:	4b24      	ldr	r3, [pc, #144]	@ (8003a8c <RX_Receive+0x21c>)
 80039fc:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b22      	ldr	r3, [pc, #136]	@ (8003a8c <RX_Receive+0x21c>)
 8003a04:	755a      	strb	r2, [r3, #21]
				floatPtr = (uint8_t *) &THERMOCOUPLE_3.temp;
 8003a06:	4b27      	ldr	r3, [pc, #156]	@ (8003aa4 <RX_Receive+0x234>)
 8003a08:	623b      	str	r3, [r7, #32]
				packet.data[21] = floatPtr[3];
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	78da      	ldrb	r2, [r3, #3]
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a8c <RX_Receive+0x21c>)
 8003a10:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	789a      	ldrb	r2, [r3, #2]
 8003a16:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <RX_Receive+0x21c>)
 8003a18:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	785a      	ldrb	r2, [r3, #1]
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <RX_Receive+0x21c>)
 8003a20:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	4b19      	ldr	r3, [pc, #100]	@ (8003a8c <RX_Receive+0x21c>)
 8003a28:	765a      	strb	r2, [r3, #25]
				floatPtr = (uint8_t *) &THERMOCOUPLE_4.temp;
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa8 <RX_Receive+0x238>)
 8003a2c:	623b      	str	r3, [r7, #32]
				packet.data[25] = floatPtr[3];
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	78da      	ldrb	r2, [r3, #3]
 8003a32:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <RX_Receive+0x21c>)
 8003a34:	769a      	strb	r2, [r3, #26]
				packet.data[26] = floatPtr[2];
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	789a      	ldrb	r2, [r3, #2]
 8003a3a:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <RX_Receive+0x21c>)
 8003a3c:	76da      	strb	r2, [r3, #27]
				packet.data[27] = floatPtr[1];
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	785a      	ldrb	r2, [r3, #1]
 8003a42:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <RX_Receive+0x21c>)
 8003a44:	771a      	strb	r2, [r3, #28]
				packet.data[28] = floatPtr[0];
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <RX_Receive+0x21c>)
 8003a4c:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <RX_Receive+0x21c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 8003a54:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <RX_Receive+0x21c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 1;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <RX_Receive+0x218>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
				break;
 8003a60:	e0bb      	b.n	8003bda <RX_Receive+0x36a>
 8003a62:	bf00      	nop
 8003a64:	200000cc 	.word	0x200000cc
 8003a68:	200000f0 	.word	0x200000f0
 8003a6c:	200000ca 	.word	0x200000ca
 8003a70:	20000130 	.word	0x20000130
 8003a74:	200000c9 	.word	0x200000c9
 8003a78:	200000c6 	.word	0x200000c6
 8003a7c:	200002e8 	.word	0x200002e8
 8003a80:	200000ec 	.word	0x200000ec
 8003a84:	200000c1 	.word	0x200000c1
 8003a88:	200000c8 	.word	0x200000c8
 8003a8c:	20000110 	.word	0x20000110
 8003a90:	20000548 	.word	0x20000548
 8003a94:	20000554 	.word	0x20000554
 8003a98:	20000560 	.word	0x20000560
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	20000018 	.word	0x20000018
 8003aa4:	20000020 	.word	0x20000020
 8003aa8:	20000028 	.word	0x20000028
				packet = Dummy_Transmit();
 8003aac:	4c6a      	ldr	r4, [pc, #424]	@ (8003c58 <RX_Receive+0x3e8>)
 8003aae:	463b      	mov	r3, r7
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd fac5 	bl	8001040 <Dummy_Transmit>
 8003ab6:	4625      	mov	r5, r4
 8003ab8:	463c      	mov	r4, r7
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	6861      	ldr	r1, [r4, #4]
 8003abe:	68a2      	ldr	r2, [r4, #8]
 8003ac0:	68e3      	ldr	r3, [r4, #12]
 8003ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac4:	6920      	ldr	r0, [r4, #16]
 8003ac6:	6961      	ldr	r1, [r4, #20]
 8003ac8:	69a2      	ldr	r2, [r4, #24]
 8003aca:	69e3      	ldr	r3, [r4, #28]
 8003acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x07;
 8003ace:	4b62      	ldr	r3, [pc, #392]	@ (8003c58 <RX_Receive+0x3e8>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 8003ad4:	4b61      	ldr	r3, [pc, #388]	@ (8003c5c <RX_Receive+0x3ec>)
 8003ad6:	785a      	ldrb	r2, [r3, #1]
 8003ad8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c58 <RX_Receive+0x3e8>)
 8003ada:	705a      	strb	r2, [r3, #1]
				floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 8003adc:	4b60      	ldr	r3, [pc, #384]	@ (8003c60 <RX_Receive+0x3f0>)
 8003ade:	623b      	str	r3, [r7, #32]
				packet.data[1] = floatPtr[3];
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	78da      	ldrb	r2, [r3, #3]
 8003ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c58 <RX_Receive+0x3e8>)
 8003ae6:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	789a      	ldrb	r2, [r3, #2]
 8003aec:	4b5a      	ldr	r3, [pc, #360]	@ (8003c58 <RX_Receive+0x3e8>)
 8003aee:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	785a      	ldrb	r2, [r3, #1]
 8003af4:	4b58      	ldr	r3, [pc, #352]	@ (8003c58 <RX_Receive+0x3e8>)
 8003af6:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	4b56      	ldr	r3, [pc, #344]	@ (8003c58 <RX_Receive+0x3e8>)
 8003afe:	715a      	strb	r2, [r3, #5]
				packet.data[5] = 0x00;
 8003b00:	4b55      	ldr	r3, [pc, #340]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	719a      	strb	r2, [r3, #6]
				packet.data[6] = 0x00;
 8003b06:	4b54      	ldr	r3, [pc, #336]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	71da      	strb	r2, [r3, #7]
				packet.data[7] = 0x00;
 8003b0c:	4b52      	ldr	r3, [pc, #328]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	721a      	strb	r2, [r3, #8]
				packet.data[8] = 0x00;
 8003b12:	4b51      	ldr	r3, [pc, #324]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	725a      	strb	r2, [r3, #9]
				floatPtr = (uint8_t *) &LOADCELL_1.read_value_weight;
 8003b18:	4b52      	ldr	r3, [pc, #328]	@ (8003c64 <RX_Receive+0x3f4>)
 8003b1a:	623b      	str	r3, [r7, #32]
				packet.data[9] = floatPtr[3];
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	78da      	ldrb	r2, [r3, #3]
 8003b20:	4b4d      	ldr	r3, [pc, #308]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b22:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	789a      	ldrb	r2, [r3, #2]
 8003b28:	4b4b      	ldr	r3, [pc, #300]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b2a:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	785a      	ldrb	r2, [r3, #1]
 8003b30:	4b49      	ldr	r3, [pc, #292]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b32:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b3a:	735a      	strb	r2, [r3, #13]
				floatPtr = (uint8_t *) &LOADCELL_2.read_value_weight;
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <RX_Receive+0x3f8>)
 8003b3e:	623b      	str	r3, [r7, #32]
				packet.data[13] = floatPtr[3];
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	78da      	ldrb	r2, [r3, #3]
 8003b44:	4b44      	ldr	r3, [pc, #272]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b46:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	789a      	ldrb	r2, [r3, #2]
 8003b4c:	4b42      	ldr	r3, [pc, #264]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b4e:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	785a      	ldrb	r2, [r3, #1]
 8003b54:	4b40      	ldr	r3, [pc, #256]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b56:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b5e:	745a      	strb	r2, [r3, #17]
				floatPtr = (uint8_t *) &LOADCELL_3.read_value_weight;
 8003b60:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <RX_Receive+0x3fc>)
 8003b62:	623b      	str	r3, [r7, #32]
				packet.data[17] = floatPtr[3];
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	78da      	ldrb	r2, [r3, #3]
 8003b68:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b6a:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	789a      	ldrb	r2, [r3, #2]
 8003b70:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b72:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	785a      	ldrb	r2, [r3, #1]
 8003b78:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b7a:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b82:	755a      	strb	r2, [r3, #21]
				floatPtr = (uint8_t *) &LOADCELL_4.read_value_weight;
 8003b84:	4b3a      	ldr	r3, [pc, #232]	@ (8003c70 <RX_Receive+0x400>)
 8003b86:	623b      	str	r3, [r7, #32]
				packet.data[21] = floatPtr[3];
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	78da      	ldrb	r2, [r3, #3]
 8003b8c:	4b32      	ldr	r3, [pc, #200]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b8e:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	789a      	ldrb	r2, [r3, #2]
 8003b94:	4b30      	ldr	r3, [pc, #192]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b96:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	785a      	ldrb	r2, [r3, #1]
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <RX_Receive+0x3e8>)
 8003b9e:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c58 <RX_Receive+0x3e8>)
 8003ba6:	765a      	strb	r2, [r3, #25]
				packet.data[25] = 0x00;
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c58 <RX_Receive+0x3e8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	769a      	strb	r2, [r3, #26]
				packet.data[26] = 0x00;
 8003bae:	4b2a      	ldr	r3, [pc, #168]	@ (8003c58 <RX_Receive+0x3e8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	76da      	strb	r2, [r3, #27]
				packet.data[27] = 0x00;
 8003bb4:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <RX_Receive+0x3e8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	771a      	strb	r2, [r3, #28]
				packet.data[28] = 0x00;
 8003bba:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <RX_Receive+0x3e8>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 8003bc0:	4b25      	ldr	r3, [pc, #148]	@ (8003c58 <RX_Receive+0x3e8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 8003bc6:	4b24      	ldr	r3, [pc, #144]	@ (8003c58 <RX_Receive+0x3e8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 0;
 8003bcc:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <RX_Receive+0x404>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
				break;
 8003bd2:	e002      	b.n	8003bda <RX_Receive+0x36a>
				lora_error = ERROR_SYSTEM_STATE_FAILED;
 8003bd4:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <RX_Receive+0x408>)
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	701a      	strb	r2, [r3, #0]
		RF_SW.port->ODR &= ~(GPIO_ODR_OD10);
 8003bda:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <RX_Receive+0x40c>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <RX_Receive+0x40c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be8:	615a      	str	r2, [r3, #20]
		SX1272_transmit(&lora, (uint8_t*) &packet);
 8003bea:	491b      	ldr	r1, [pc, #108]	@ (8003c58 <RX_Receive+0x3e8>)
 8003bec:	4824      	ldr	r0, [pc, #144]	@ (8003c80 <RX_Receive+0x410>)
 8003bee:	f7fd fb01 	bl	80011f4 <SX1272_transmit>
	  		transmit_state = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 8003bf2:	2112      	movs	r1, #18
 8003bf4:	4822      	ldr	r0, [pc, #136]	@ (8003c80 <RX_Receive+0x410>)
 8003bf6:	f7fd fbdd 	bl	80013b4 <SX1272_readRegister>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	  	}while((transmit_state & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 8003c00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f2      	beq.n	8003bf2 <RX_Receive+0x382>
	  	RF_SW.port->ODR |= (GPIO_ODR_OD10);
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <RX_Receive+0x40c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <RX_Receive+0x40c>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c1a:	615a      	str	r2, [r3, #20]
	  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	2112      	movs	r1, #18
 8003c20:	4817      	ldr	r0, [pc, #92]	@ (8003c80 <RX_Receive+0x410>)
 8003c22:	f7fd fb93 	bl	800134c <SX1272_writeRegister>
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 8003c26:	2105      	movs	r1, #5
 8003c28:	4815      	ldr	r0, [pc, #84]	@ (8003c80 <RX_Receive+0x410>)
 8003c2a:	f7fd fa6f 	bl	800110c <_SX1272_setMode>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c2e:	2017      	movs	r0, #23
 8003c30:	f7fd fbf6 	bl	8001420 <__NVIC_EnableIRQ>
}
 8003c34:	e00c      	b.n	8003c50 <RX_Receive+0x3e0>
		lora_error = ERROR_INVALID_PACKET_DATA;
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <RX_Receive+0x408>)
 8003c38:	2202      	movs	r2, #2
 8003c3a:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <RX_Receive+0x414>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <RX_Receive+0x414>)
 8003c46:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8003c48:	bf00      	nop
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c4a:	2017      	movs	r0, #23
 8003c4c:	f7fd fbe8 	bl	8001420 <__NVIC_EnableIRQ>
}
 8003c50:	bf00      	nop
 8003c52:	3728      	adds	r7, #40	@ 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	20000110 	.word	0x20000110
 8003c5c:	20000130 	.word	0x20000130
 8003c60:	20000008 	.word	0x20000008
 8003c64:	20000578 	.word	0x20000578
 8003c68:	20000584 	.word	0x20000584
 8003c6c:	20000590 	.word	0x20000590
 8003c70:	2000059c 	.word	0x2000059c
 8003c74:	200000c8 	.word	0x200000c8
 8003c78:	200000c9 	.word	0x200000c9
 8003c7c:	200004e0 	.word	0x200004e0
 8003c80:	200000f0 	.word	0x200000f0
 8003c84:	200000c6 	.word	0x200000c6

08003c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c8c:	b672      	cpsid	i
}
 8003c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {__asm("NOP");}
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <Error_Handler+0x8>

08003c94 <get_temp>:





i2c_comms_result get_temp(TEMP_SENSE *temp_sense){
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b090      	sub	sp, #64	@ 0x40
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

	i2c_comms_result result;

	//If its not a thermocouple, its the SMD temp sense
	if(temp_sense -> thermocouple_type == 0x00){
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	78db      	ldrb	r3, [r3, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d154      	bne.n	8003d50 <get_temp+0xbc>

		uint8_t buf[4];
		buf[0] = 0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	743b      	strb	r3, [r7, #16]
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, temp_sense -> ADDR, buf[0], 1, 100);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	7c3b      	ldrb	r3, [r7, #16]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2364      	movs	r3, #100	@ 0x64
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	485d      	ldr	r0, [pc, #372]	@ (8003e30 <get_temp+0x19c>)
 8003cbc:	f001 f99c 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (ret != HAL_OK){
 8003cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <get_temp+0x40>
			  result.comms_ok = false;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	753b      	strb	r3, [r7, #20]
 8003cd2:	e09e      	b.n	8003e12 <get_temp+0x17e>
		}
		else {
			  ret = HAL_I2C_Master_Receive(&hi2c2, temp_sense -> ADDR, result.return_value, 2, 100);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f107 0314 	add.w	r3, r7, #20
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	2364      	movs	r3, #100	@ 0x64
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	4852      	ldr	r0, [pc, #328]	@ (8003e30 <get_temp+0x19c>)
 8003ce8:	f001 fa84 	bl	80051f4 <HAL_I2C_Master_Receive>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			  if (ret != HAL_OK){
 8003cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <get_temp+0x6c>
				  result.comms_ok = false;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	753b      	strb	r3, [r7, #20]
 8003cfe:	e088      	b.n	8003e12 <get_temp+0x17e>
			  }
			  else{

				  uint16_t val = ((int16_t)result.return_value[0]<<4) | (result.return_value[1] >> 4);
 8003d00:	7dbb      	ldrb	r3, [r7, #22]
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	b21a      	sxth	r2, r3
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				  float temp = val/16;
 8003d16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d24:	edc7 7a03 	vstr	s15, [r7, #12]
				  uint8_t * tempPointer = (uint8_t *) &temp;
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
				  result.return_value[0] = tempPointer[0];
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	75bb      	strb	r3, [r7, #22]
				  result.return_value[1] = tempPointer[1];
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	75fb      	strb	r3, [r7, #23]
				  result.return_value[2] = tempPointer[2];
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	789b      	ldrb	r3, [r3, #2]
 8003d3e:	763b      	strb	r3, [r7, #24]
				  result.return_value[3] = tempPointer[3];
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	78db      	ldrb	r3, [r3, #3]
 8003d44:	767b      	strb	r3, [r7, #25]
				  result.return_length = 0x04;
 8003d46:	2304      	movs	r3, #4
 8003d48:	757b      	strb	r3, [r7, #21]

				  result.comms_ok = true;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	753b      	strb	r3, [r7, #20]
 8003d4e:	e060      	b.n	8003e12 <get_temp+0x17e>
	}

	//Its got a thermocouple type, therefore, lets get the thermocouple hot junc temp
	else{
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, (temp_sense -> ADDR | 0x00), 0x00, 1, 100); //Write to thermocouple IC, to move pointer to hot junc reg
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	2364      	movs	r3, #100	@ 0x64
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4834      	ldr	r0, [pc, #208]	@ (8003e30 <get_temp+0x19c>)
 8003d60:	f001 f94a 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (ret != HAL_OK){
 8003d6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <get_temp+0xe4>
			result.comms_ok = false;
 8003d72:	2300      	movs	r3, #0
 8003d74:	753b      	strb	r3, [r7, #20]
 8003d76:	e04c      	b.n	8003e12 <get_temp+0x17e>
		}
		else {
			ret = HAL_I2C_Master_Receive(&hi2c2, (temp_sense -> ADDR | 0x01), result.return_value, 2, 100);	//Read 2 bytes from the hot junc reg into return val
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	2364      	movs	r3, #100	@ 0x64
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2302      	movs	r3, #2
 8003d90:	4827      	ldr	r0, [pc, #156]	@ (8003e30 <get_temp+0x19c>)
 8003d92:	f001 fa2f 	bl	80051f4 <HAL_I2C_Master_Receive>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (ret != HAL_OK){
 8003d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <get_temp+0x116>
				result.comms_ok = false;
 8003da4:	2300      	movs	r3, #0
 8003da6:	753b      	strb	r3, [r7, #20]
 8003da8:	e033      	b.n	8003e12 <get_temp+0x17e>
			}
			else{

				uint16_t val = ((int16_t)result.return_value[0] * 16) | (result.return_value[1]);
 8003daa:	7dbb      	ldrb	r3, [r7, #22]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b21a      	sxth	r2, r3
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	86bb      	strh	r3, [r7, #52]	@ 0x34
				float temp = val/16;
 8003dbc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dca:	edc7 7a02 	vstr	s15, [r7, #8]
				if ((result.return_value[0] & 0x80) == 0x80){ //If the temp is < 0deg
 8003dce:	7dbb      	ldrb	r3, [r7, #22]
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da08      	bge.n	8003de8 <get_temp+0x154>
					temp = temp - 4096;
 8003dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dda:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003e34 <get_temp+0x1a0>
 8003dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003de2:	edc7 7a02 	vstr	s15, [r7, #8]
 8003de6:	e001      	b.n	8003dec <get_temp+0x158>
				}
				else{
					temp = temp; //If temp is >= 0deg, dont need to do anything
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	60bb      	str	r3, [r7, #8]
				}

				uint8_t * tempPointer = (uint8_t *) &temp;
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
				result.return_value[0] = tempPointer[0];
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	75bb      	strb	r3, [r7, #22]
				result.return_value[1] = tempPointer[1];
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	75fb      	strb	r3, [r7, #23]
				result.return_value[2] = tempPointer[2];
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	789b      	ldrb	r3, [r3, #2]
 8003e02:	763b      	strb	r3, [r7, #24]
				result.return_value[3] = tempPointer[3];
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	78db      	ldrb	r3, [r3, #3]
 8003e08:	767b      	strb	r3, [r7, #25]
				result.return_length = 0x04;
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	757b      	strb	r3, [r7, #21]

				result.comms_ok = true;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	753b      	strb	r3, [r7, #20]
			}
		}
	}


	return result;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	461d      	mov	r5, r3
 8003e16:	f107 0414 	add.w	r4, r7, #20
 8003e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e1c:	6028      	str	r0, [r5, #0]
 8003e1e:	6069      	str	r1, [r5, #4]
 8003e20:	60aa      	str	r2, [r5, #8]
 8003e22:	60eb      	str	r3, [r5, #12]
 8003e24:	8823      	ldrh	r3, [r4, #0]
 8003e26:	822b      	strh	r3, [r5, #16]

};
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	3738      	adds	r7, #56	@ 0x38
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e30:	2000006c 	.word	0x2000006c
 8003e34:	45800000 	.word	0x45800000

08003e38 <THERMOCOUPLE_CONFIG>:


	return result;
}

THERMOCOUPLE_CONFIG(uint8_t ADDR, char THERMOCOUPLE_TYPE){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	4603      	mov	r3, r0
 8003e40:	460a      	mov	r2, r1
 8003e42:	71fb      	strb	r3, [r7, #7]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef ret;
	uint8_t buf[2];
	buf[0] = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	733b      	strb	r3, [r7, #12]
	buf[1] = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	737b      	strb	r3, [r7, #13]

	if (THERMOCOUPLE_TYPE == 'K'){
 8003e50:	79bb      	ldrb	r3, [r7, #6]
 8003e52:	2b4b      	cmp	r3, #75	@ 0x4b
 8003e54:	d102      	bne.n	8003e5c <THERMOCOUPLE_CONFIG+0x24>
		buf[1] |= 0b000 << 4;
 8003e56:	7b7b      	ldrb	r3, [r7, #13]
 8003e58:	737b      	strb	r3, [r7, #13]
 8003e5a:	e03d      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'J'){
 8003e5c:	79bb      	ldrb	r3, [r7, #6]
 8003e5e:	2b4a      	cmp	r3, #74	@ 0x4a
 8003e60:	d105      	bne.n	8003e6e <THERMOCOUPLE_CONFIG+0x36>
		buf[1] |= 0b001 << 4;
 8003e62:	7b7b      	ldrb	r3, [r7, #13]
 8003e64:	f043 0310 	orr.w	r3, r3, #16
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	737b      	strb	r3, [r7, #13]
 8003e6c:	e034      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'T'){
 8003e6e:	79bb      	ldrb	r3, [r7, #6]
 8003e70:	2b54      	cmp	r3, #84	@ 0x54
 8003e72:	d105      	bne.n	8003e80 <THERMOCOUPLE_CONFIG+0x48>
		buf[1] |= 0b010 << 4;
 8003e74:	7b7b      	ldrb	r3, [r7, #13]
 8003e76:	f043 0320 	orr.w	r3, r3, #32
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	737b      	strb	r3, [r7, #13]
 8003e7e:	e02b      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'N'){
 8003e80:	79bb      	ldrb	r3, [r7, #6]
 8003e82:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e84:	d105      	bne.n	8003e92 <THERMOCOUPLE_CONFIG+0x5a>
		buf[1] |= 0b011 << 4;
 8003e86:	7b7b      	ldrb	r3, [r7, #13]
 8003e88:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	737b      	strb	r3, [r7, #13]
 8003e90:	e022      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'S'){
 8003e92:	79bb      	ldrb	r3, [r7, #6]
 8003e94:	2b53      	cmp	r3, #83	@ 0x53
 8003e96:	d105      	bne.n	8003ea4 <THERMOCOUPLE_CONFIG+0x6c>
		buf[1] |= 0b100 << 4;
 8003e98:	7b7b      	ldrb	r3, [r7, #13]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	737b      	strb	r3, [r7, #13]
 8003ea2:	e019      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'E'){
 8003ea4:	79bb      	ldrb	r3, [r7, #6]
 8003ea6:	2b45      	cmp	r3, #69	@ 0x45
 8003ea8:	d105      	bne.n	8003eb6 <THERMOCOUPLE_CONFIG+0x7e>
		buf[1] |= 0b101 << 4;
 8003eaa:	7b7b      	ldrb	r3, [r7, #13]
 8003eac:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	737b      	strb	r3, [r7, #13]
 8003eb4:	e010      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'B'){
 8003eb6:	79bb      	ldrb	r3, [r7, #6]
 8003eb8:	2b42      	cmp	r3, #66	@ 0x42
 8003eba:	d105      	bne.n	8003ec8 <THERMOCOUPLE_CONFIG+0x90>
		buf[1] |= 0b110 << 4;
 8003ebc:	7b7b      	ldrb	r3, [r7, #13]
 8003ebe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	737b      	strb	r3, [r7, #13]
 8003ec6:	e007      	b.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
	}
	else if (THERMOCOUPLE_TYPE == 'R'){
 8003ec8:	79bb      	ldrb	r3, [r7, #6]
 8003eca:	2b52      	cmp	r3, #82	@ 0x52
 8003ecc:	d104      	bne.n	8003ed8 <THERMOCOUPLE_CONFIG+0xa0>
		buf[1] |= 0b111 << 4;
 8003ece:	7b7b      	ldrb	r3, [r7, #13]
 8003ed0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	737b      	strb	r3, [r7, #13]
	}
	else{
	}


	buf[0] = THERMO_REG_SENSOR_CONFIG;	//Pointer Addr
 8003ed8:	2305      	movs	r3, #5
 8003eda:	733b      	strb	r3, [r7, #12]
	buf[1] |= 0b00000100;			  	//Data for data reg at pointer addr
 8003edc:	7b7b      	ldrb	r3, [r7, #13]
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	f107 020c 	add.w	r2, r7, #12
 8003eee:	2364      	movs	r3, #100	@ 0x64
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	48ca      	ldr	r0, [pc, #808]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003ef6:	f001 f87f 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003efa:	4603      	mov	r3, r0
 8003efc:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	b299      	uxth	r1, r3
 8003f02:	f107 020c 	add.w	r2, r7, #12
 8003f06:	2364      	movs	r3, #100	@ 0x64
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	48c4      	ldr	r0, [pc, #784]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003f0e:	f001 f873 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100); //ADDR OR'ed with 0x01 for read command
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f107 020c 	add.w	r2, r7, #12
 8003f24:	2364      	movs	r3, #100	@ 0x64
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	48bd      	ldr	r0, [pc, #756]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003f2c:	f001 f962 	bl	80051f4 <HAL_I2C_Master_Receive>
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]

  	buf[0] = THERMO_REG_DEVICE_CONFIG;
 8003f34:	2306      	movs	r3, #6
 8003f36:	733b      	strb	r3, [r7, #12]
  	buf[1] = 0b00011100; //Coldjunc resolution = 0.0625deg, ADC res = 18bit, burst mode temp = 128 samples, shutdown mode = normal operation
 8003f38:	231c      	movs	r3, #28
 8003f3a:	737b      	strb	r3, [r7, #13]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	b299      	uxth	r1, r3
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	2364      	movs	r3, #100	@ 0x64
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2302      	movs	r3, #2
 8003f4a:	48b5      	ldr	r0, [pc, #724]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003f4c:	f001 f854 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	b299      	uxth	r1, r3
 8003f58:	f107 020c 	add.w	r2, r7, #12
 8003f5c:	2364      	movs	r3, #100	@ 0x64
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2301      	movs	r3, #1
 8003f62:	48af      	ldr	r0, [pc, #700]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003f64:	f001 f848 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	4619      	mov	r1, r3
 8003f76:	f107 020c 	add.w	r2, r7, #12
 8003f7a:	2364      	movs	r3, #100	@ 0x64
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	48a7      	ldr	r0, [pc, #668]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003f82:	f001 f937 	bl	80051f4 <HAL_I2C_Master_Receive>
 8003f86:	4603      	mov	r3, r0
 8003f88:	73fb      	strb	r3, [r7, #15]

 	buf[0] = THERMO_REG_ALERT1_LIMIT;
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	733b      	strb	r3, [r7, #12]
 	buf[1] = 0b01111111; //Coldjunc resolution = 0.0625deg, ADC res = 18bit, burst mode temp = 128 samples, shutdown mode = normal operation
 8003f8e:	237f      	movs	r3, #127	@ 0x7f
 8003f90:	737b      	strb	r3, [r7, #13]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	b299      	uxth	r1, r3
 8003f96:	f107 020c 	add.w	r2, r7, #12
 8003f9a:	2364      	movs	r3, #100	@ 0x64
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	489f      	ldr	r0, [pc, #636]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003fa2:	f001 f829 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	b299      	uxth	r1, r3
 8003fae:	f107 020c 	add.w	r2, r7, #12
 8003fb2:	2364      	movs	r3, #100	@ 0x64
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4899      	ldr	r0, [pc, #612]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003fba:	f001 f81d 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f107 020c 	add.w	r2, r7, #12
 8003fd0:	2364      	movs	r3, #100	@ 0x64
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4892      	ldr	r0, [pc, #584]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003fd8:	f001 f90c 	bl	80051f4 <HAL_I2C_Master_Receive>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]


  	buf[0] = THERMO_REG_ALERT2_LIMIT;
 8003fe0:	2311      	movs	r3, #17
 8003fe2:	733b      	strb	r3, [r7, #12]
  	buf[1] = 0b01111111; //Coldjunc resolution = 0.0625deg, ADC res = 18bit, burst mode temp = 128 samples, shutdown mode = normal operation
 8003fe4:	237f      	movs	r3, #127	@ 0x7f
 8003fe6:	737b      	strb	r3, [r7, #13]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	b299      	uxth	r1, r3
 8003fec:	f107 020c 	add.w	r2, r7, #12
 8003ff0:	2364      	movs	r3, #100	@ 0x64
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	488a      	ldr	r0, [pc, #552]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8003ff8:	f000 fffe 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	b299      	uxth	r1, r3
 8004004:	f107 020c 	add.w	r2, r7, #12
 8004008:	2364      	movs	r3, #100	@ 0x64
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2301      	movs	r3, #1
 800400e:	4884      	ldr	r0, [pc, #528]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004010:	f000 fff2 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	f107 020c 	add.w	r2, r7, #12
 8004026:	2364      	movs	r3, #100	@ 0x64
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	487c      	ldr	r0, [pc, #496]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 800402e:	f001 f8e1 	bl	80051f4 <HAL_I2C_Master_Receive>
 8004032:	4603      	mov	r3, r0
 8004034:	73fb      	strb	r3, [r7, #15]

  	buf[0] = THERMO_REG_ALERT3_LIMIT;
 8004036:	2312      	movs	r3, #18
 8004038:	733b      	strb	r3, [r7, #12]
  	buf[1] = 0b01111111; //Coldjunc resolution = 0.0625deg, ADC res = 18bit, burst mode temp = 128 samples, shutdown mode = normal operation
 800403a:	237f      	movs	r3, #127	@ 0x7f
 800403c:	737b      	strb	r3, [r7, #13]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	b299      	uxth	r1, r3
 8004042:	f107 020c 	add.w	r2, r7, #12
 8004046:	2364      	movs	r3, #100	@ 0x64
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2302      	movs	r3, #2
 800404c:	4874      	ldr	r0, [pc, #464]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 800404e:	f000 ffd3 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8004052:	4603      	mov	r3, r0
 8004054:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	b299      	uxth	r1, r3
 800405a:	f107 020c 	add.w	r2, r7, #12
 800405e:	2364      	movs	r3, #100	@ 0x64
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2301      	movs	r3, #1
 8004064:	486e      	ldr	r0, [pc, #440]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004066:	f000 ffc7 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 800406a:	4603      	mov	r3, r0
 800406c:	73fb      	strb	r3, [r7, #15]
  	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4619      	mov	r1, r3
 8004078:	f107 020c 	add.w	r2, r7, #12
 800407c:	2364      	movs	r3, #100	@ 0x64
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2301      	movs	r3, #1
 8004082:	4867      	ldr	r0, [pc, #412]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004084:	f001 f8b6 	bl	80051f4 <HAL_I2C_Master_Receive>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]

	buf[0] = THERMO_REG_ALERT4_LIMIT;
 800408c:	2313      	movs	r3, #19
 800408e:	733b      	strb	r3, [r7, #12]
	buf[1] = 0b01111111; //Coldjunc resolution = 0.0625deg, ADC res = 18bit, burst mode temp = 128 samples, shutdown mode = normal operation
 8004090:	237f      	movs	r3, #127	@ 0x7f
 8004092:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	b299      	uxth	r1, r3
 8004098:	f107 020c 	add.w	r2, r7, #12
 800409c:	2364      	movs	r3, #100	@ 0x64
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2302      	movs	r3, #2
 80040a2:	485f      	ldr	r0, [pc, #380]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80040a4:	f000 ffa8 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	b299      	uxth	r1, r3
 80040b0:	f107 020c 	add.w	r2, r7, #12
 80040b4:	2364      	movs	r3, #100	@ 0x64
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2301      	movs	r3, #1
 80040ba:	4859      	ldr	r0, [pc, #356]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80040bc:	f000 ff9c 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100); //ADDR OR'ed with 0x00 for write command, and then writing pointer to THERMO_REG_ID
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4619      	mov	r1, r3
 80040ce:	f107 020c 	add.w	r2, r7, #12
 80040d2:	2364      	movs	r3, #100	@ 0x64
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2301      	movs	r3, #1
 80040d8:	4851      	ldr	r0, [pc, #324]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80040da:	f001 f88b 	bl	80051f4 <HAL_I2C_Master_Receive>
 80040de:	4603      	mov	r3, r0
 80040e0:	73fb      	strb	r3, [r7, #15]

	buf[0] = THERMO_REG_ALERT1_CONFIG;
 80040e2:	2308      	movs	r3, #8
 80040e4:	733b      	strb	r3, [r7, #12]
	buf[1] = 0b00011101;
 80040e6:	231d      	movs	r3, #29
 80040e8:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100);
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	b299      	uxth	r1, r3
 80040ee:	f107 020c 	add.w	r2, r7, #12
 80040f2:	2364      	movs	r3, #100	@ 0x64
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2302      	movs	r3, #2
 80040f8:	4849      	ldr	r0, [pc, #292]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80040fa:	f000 ff7d 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100);
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	b299      	uxth	r1, r3
 8004106:	f107 020c 	add.w	r2, r7, #12
 800410a:	2364      	movs	r3, #100	@ 0x64
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2301      	movs	r3, #1
 8004110:	4843      	ldr	r0, [pc, #268]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004112:	f000 ff71 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8004116:	4603      	mov	r3, r0
 8004118:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100);
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4619      	mov	r1, r3
 8004124:	f107 020c 	add.w	r2, r7, #12
 8004128:	2364      	movs	r3, #100	@ 0x64
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2301      	movs	r3, #1
 800412e:	483c      	ldr	r0, [pc, #240]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004130:	f001 f860 	bl	80051f4 <HAL_I2C_Master_Receive>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]

	buf[0] = THERMO_REG_ALERT2_CONFIG;
 8004138:	2309      	movs	r3, #9
 800413a:	733b      	strb	r3, [r7, #12]
	buf[1] = 0b00011101;
 800413c:	231d      	movs	r3, #29
 800413e:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100);
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	b299      	uxth	r1, r3
 8004144:	f107 020c 	add.w	r2, r7, #12
 8004148:	2364      	movs	r3, #100	@ 0x64
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2302      	movs	r3, #2
 800414e:	4834      	ldr	r0, [pc, #208]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004150:	f000 ff52 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100);
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	b299      	uxth	r1, r3
 800415c:	f107 020c 	add.w	r2, r7, #12
 8004160:	2364      	movs	r3, #100	@ 0x64
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2301      	movs	r3, #1
 8004166:	482e      	ldr	r0, [pc, #184]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004168:	f000 ff46 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100);
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	f107 020c 	add.w	r2, r7, #12
 800417e:	2364      	movs	r3, #100	@ 0x64
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	2301      	movs	r3, #1
 8004184:	4826      	ldr	r0, [pc, #152]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004186:	f001 f835 	bl	80051f4 <HAL_I2C_Master_Receive>
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]

	buf[0] = THERMO_REG_ALERT3_CONFIG;
 800418e:	230a      	movs	r3, #10
 8004190:	733b      	strb	r3, [r7, #12]
	buf[1] = 0b00011101;
 8004192:	231d      	movs	r3, #29
 8004194:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	b299      	uxth	r1, r3
 800419a:	f107 020c 	add.w	r2, r7, #12
 800419e:	2364      	movs	r3, #100	@ 0x64
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2302      	movs	r3, #2
 80041a4:	481e      	ldr	r0, [pc, #120]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80041a6:	f000 ff27 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 80041aa:	4603      	mov	r3, r0
 80041ac:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	b299      	uxth	r1, r3
 80041b2:	f107 020c 	add.w	r2, r7, #12
 80041b6:	2364      	movs	r3, #100	@ 0x64
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2301      	movs	r3, #1
 80041bc:	4818      	ldr	r0, [pc, #96]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80041be:	f000 ff1b 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	4619      	mov	r1, r3
 80041d0:	f107 020c 	add.w	r2, r7, #12
 80041d4:	2364      	movs	r3, #100	@ 0x64
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2301      	movs	r3, #1
 80041da:	4811      	ldr	r0, [pc, #68]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80041dc:	f001 f80a 	bl	80051f4 <HAL_I2C_Master_Receive>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]

	buf[0] = THERMO_REG_ALERT4_CONFIG;
 80041e4:	230b      	movs	r3, #11
 80041e6:	733b      	strb	r3, [r7, #12]
	buf[1] = 0b00011101;
 80041e8:	231d      	movs	r3, #29
 80041ea:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 2, 100);
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	b299      	uxth	r1, r3
 80041f0:	f107 020c 	add.w	r2, r7, #12
 80041f4:	2364      	movs	r3, #100	@ 0x64
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2302      	movs	r3, #2
 80041fa:	4809      	ldr	r0, [pc, #36]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 80041fc:	f000 fefc 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	b299      	uxth	r1, r3
 8004208:	f107 020c 	add.w	r2, r7, #12
 800420c:	2364      	movs	r3, #100	@ 0x64
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2301      	movs	r3, #1
 8004212:	4803      	ldr	r0, [pc, #12]	@ (8004220 <THERMOCOUPLE_CONFIG+0x3e8>)
 8004214:	f000 fef0 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e002      	b.n	8004224 <THERMOCOUPLE_CONFIG+0x3ec>
 800421e:	bf00      	nop
 8004220:	2000006c 	.word	0x2000006c
	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 1, 100);
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	f107 020c 	add.w	r2, r7, #12
 8004232:	2364      	movs	r3, #100	@ 0x64
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2301      	movs	r3, #1
 8004238:	4804      	ldr	r0, [pc, #16]	@ (800424c <THERMOCOUPLE_CONFIG+0x414>)
 800423a:	f000 ffdb 	bl	80051f4 <HAL_I2C_Master_Receive>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]

	return;
 8004242:	bf00      	nop
}
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000006c 	.word	0x2000006c

08004250 <THERMOCOUPLE_GETTEMP>:


float THERMOCOUPLE_GETTEMP(uint8_t ADDR){
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	uint8_t buf[8];
	buf[0] = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	733b      	strb	r3, [r7, #12]
	buf[1] = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	737b      	strb	r3, [r7, #13]

  	buf[0] = THERMO_REG_HJ_TEMP;
 8004262:	2300      	movs	r3, #0
 8004264:	733b      	strb	r3, [r7, #12]
  	ret = HAL_I2C_Master_Transmit(&hi2c2, (ADDR | 0x00), buf, 1, 100); //Write to thermocouple IC, to move pointer to hot junc reg
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	b299      	uxth	r1, r3
 800426a:	f107 020c 	add.w	r2, r7, #12
 800426e:	2364      	movs	r3, #100	@ 0x64
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2301      	movs	r3, #1
 8004274:	481e      	ldr	r0, [pc, #120]	@ (80042f0 <THERMOCOUPLE_GETTEMP+0xa0>)
 8004276:	f000 febf 	bl	8004ff8 <HAL_I2C_Master_Transmit>
 800427a:	4603      	mov	r3, r0
 800427c:	76fb      	strb	r3, [r7, #27]
  	ret = HAL_I2C_Master_Receive(&hi2c2, (ADDR | 0x01), buf, 2, 100);	//Read 2 bytes from the hot junc reg into return val
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	4619      	mov	r1, r3
 8004288:	f107 020c 	add.w	r2, r7, #12
 800428c:	2364      	movs	r3, #100	@ 0x64
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2302      	movs	r3, #2
 8004292:	4817      	ldr	r0, [pc, #92]	@ (80042f0 <THERMOCOUPLE_GETTEMP+0xa0>)
 8004294:	f000 ffae 	bl	80051f4 <HAL_I2C_Master_Receive>
 8004298:	4603      	mov	r3, r0
 800429a:	76fb      	strb	r3, [r7, #27]

	float val = ((int16_t)buf[0] * 16) | (buf[1] / 16);
 800429c:	7b3b      	ldrb	r3, [r7, #12]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	7b7a      	ldrb	r2, [r7, #13]
 80042a2:	0912      	lsrs	r2, r2, #4
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	4313      	orrs	r3, r2
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b0:	edc7 7a05 	vstr	s15, [r7, #20]
	float temp = val;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	61fb      	str	r3, [r7, #28]
	if ((buf[0] & 0x80) == 0x80){ //If the temp is < 0deg
 80042b8:	7b3b      	ldrb	r3, [r7, #12]
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	da0e      	bge.n	80042de <THERMOCOUPLE_GETTEMP+0x8e>
		temp = temp - 4096;
 80042c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80042c4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80042f4 <THERMOCOUPLE_GETTEMP+0xa4>
 80042c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042cc:	edc7 7a07 	vstr	s15, [r7, #28]
		temp = temp * -1;
 80042d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80042d4:	eef1 7a67 	vneg.f32	s15, s15
 80042d8:	edc7 7a07 	vstr	s15, [r7, #28]
 80042dc:	e000      	b.n	80042e0 <THERMOCOUPLE_GETTEMP+0x90>
		}
	else{
		__asm("NOP");//If temp is >= 0deg, dont need to do anything
 80042de:	bf00      	nop
	}
	return temp;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	ee07 3a90 	vmov	s15, r3

}
 80042e6:	eeb0 0a67 	vmov.f32	s0, s15
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	2000006c 	.word	0x2000006c
 80042f4:	45800000 	.word	0x45800000

080042f8 <SPI_init>:
 *                   configuration.
 *
 * @return spi       Initialised SPI_t struct.
 **
 * =============================================================================== */
SPI_t SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b090      	sub	sp, #64	@ 0x40
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  // Early return error struct if peripheral is NULL
  if (interface == NULL)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <SPI_init+0x26>
    return (SPI_t){.interface = NULL};
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	461a      	mov	r2, r3
 800430e:	2300      	movs	r3, #0
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	6053      	str	r3, [r2, #4]
 8004314:	6093      	str	r3, [r2, #8]
 8004316:	60d3      	str	r3, [r2, #12]
 8004318:	6113      	str	r3, [r2, #16]
 800431a:	6153      	str	r3, [r2, #20]
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
  spi.transmit     = SPI_transmit;
  spi.updateConfig = SPI_updateConfig;

  return spi;
}
 800431c:	e034      	b.n	8004388 <SPI_init+0x90>
  SPI_t spi = {.interface = interface};
 800431e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	60da      	str	r2, [r3, #12]
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	615a      	str	r2, [r3, #20]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_updateConfig(&spi, config);
 8004334:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f8df 	bl	80044fe <SPI_updateConfig>
  spi.send         = (spi.config.DFF == SPI_DFF8) ? SPI_send8 : SPI_send16;
 8004340:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <SPI_init+0x5a>
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <SPI_init+0x98>)
 8004350:	e000      	b.n	8004354 <SPI_init+0x5c>
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <SPI_init+0x9c>)
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
 8004356:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <SPI_init+0x70>
 8004364:	4b0c      	ldr	r3, [pc, #48]	@ (8004398 <SPI_init+0xa0>)
 8004366:	e000      	b.n	800436a <SPI_init+0x72>
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <SPI_init+0xa4>)
 800436a:	637b      	str	r3, [r7, #52]	@ 0x34
  spi.transmit     = SPI_transmit;
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <SPI_init+0xa8>)
 800436e:	63bb      	str	r3, [r7, #56]	@ 0x38
  spi.updateConfig = SPI_updateConfig;
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <SPI_init+0xac>)
 8004372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return spi;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	461d      	mov	r5, r3
 8004378:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800437c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800437e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004384:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	3740      	adds	r7, #64	@ 0x40
 800438c:	46bd      	mov	sp, r7
 800438e:	bdb0      	pop	{r4, r5, r7, pc}
 8004390:	08004437 	.word	0x08004437
 8004394:	08004469 	.word	0x08004469
 8004398:	08004499 	.word	0x08004499
 800439c:	080044cd 	.word	0x080044cd
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	080044ff 	.word	0x080044ff

080043a8 <_SPI_init>:
 *                    configuration. @see SPI_Config
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
static void _SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  // Wait for any ongoing transactions to finish
  while (interface->SR & SPI_SR_BSY);
 80043b2:	bf00      	nop
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f9      	bne.n	80043b4 <_SPI_init+0xc>

  // Disable peripheral and update config
  config->SPE    = false;               // Make sure SPE is disabled in config
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	7813      	ldrb	r3, [r2, #0]
 80043c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043c8:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with configured values
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]

  // Re-enable peripheral
  config->SPE    = true;                // Set SPE back to true
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	7813      	ldrb	r3, [r2, #0]
 80043d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043dc:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with SPE enabled
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	601a      	str	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <SPI_transmit>:
 * @param  data 		Data payload to be sent to slave device.
 *
 * @retval response Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI_t *spi, uint16_t data) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response;
  spi->send(spi, data);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	887a      	ldrh	r2, [r7, #2]
 8004406:	4611      	mov	r1, r2
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
  spi->receive(spi, &response);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f107 020e 	add.w	r2, r7, #14
 8004414:	4611      	mov	r1, r2
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 800441a:	bf00      	nop
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f8      	bne.n	800441c <SPI_transmit+0x28>
  return response;
 800442a:	89fb      	ldrh	r3, [r7, #14]
 800442c:	b29b      	uxth	r3, r3
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <SPI_send8>:
 * @param  data The data to send.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI_t *spi, uint16_t data) {
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8004442:	bf00      	nop
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f8      	beq.n	8004444 <SPI_send8+0xe>
  spi->interface->DR = (uint8_t)data;
 8004452:	887b      	ldrh	r3, [r7, #2]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60da      	str	r2, [r3, #12]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <SPI_send16>:

static void SPI_send16(SPI_t *spi, uint16_t data) {
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8004474:	bf00      	nop
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f8      	beq.n	8004476 <SPI_send16+0xe>
  spi->interface->DR = data;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	887a      	ldrh	r2, [r7, #2]
 800448a:	60da      	str	r2, [r3, #12]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <SPI_receive8>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI_t *spi, volatile uint16_t *data) {
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 80044a2:	bf00      	nop
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f8      	beq.n	80044a4 <SPI_receive8+0xc>
  *data = (uint8_t)spi->interface->DR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	801a      	strh	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <SPI_receive16>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive16(SPI_t *spi, volatile uint16_t *data) {
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 80044d6:	bf00      	nop
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f8      	beq.n	80044d8 <SPI_receive16+0xc>
  *data = spi->interface->DR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	801a      	strh	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <SPI_updateConfig>:
 * @param   spi Pointer to SPI_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void SPI_updateConfig(SPI_t *spi, SPI_Config *config) {
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  // Initialise config with default values if passed NULL.
  if (config == NULL) {
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11d      	bne.n	800454a <SPI_updateConfig+0x4c>
    config = &SPI_CONFIG_DEFAULT;
 800450e:	2300      	movs	r3, #0
 8004510:	81bb      	strh	r3, [r7, #12]
 8004512:	7b3b      	ldrb	r3, [r7, #12]
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	733b      	strb	r3, [r7, #12]
 800451a:	7b3b      	ldrb	r3, [r7, #12]
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	733b      	strb	r3, [r7, #12]
 8004522:	7b3b      	ldrb	r3, [r7, #12]
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	733b      	strb	r3, [r7, #12]
 800452a:	7b3b      	ldrb	r3, [r7, #12]
 800452c:	2202      	movs	r2, #2
 800452e:	f362 03c5 	bfi	r3, r2, #3, #3
 8004532:	733b      	strb	r3, [r7, #12]
 8004534:	7b7b      	ldrb	r3, [r7, #13]
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	737b      	strb	r3, [r7, #13]
 800453c:	7b7b      	ldrb	r3, [r7, #13]
 800453e:	f043 0302 	orr.w	r3, r3, #2
 8004542:	737b      	strb	r3, [r7, #13]
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	603b      	str	r3, [r7, #0]
  }

  // Update peripheral with new config
  spi->config = *config;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	3304      	adds	r3, #4
 8004550:	8812      	ldrh	r2, [r2, #0]
 8004552:	801a      	strh	r2, [r3, #0]

  // Initialise SPI registers and enable peripheral
  _SPI_init(spi->interface, config);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff24 	bl	80043a8 <_SPI_init>
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	4a0f      	ldr	r2, [pc, #60]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800457c:	6453      	str	r3, [r2, #68]	@ 0x44
 800457e:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	@ 0x40
 800459a:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <HAL_MspInit+0x4c>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a19      	ldr	r2, [pc, #100]	@ (800463c <HAL_I2C_MspInit+0x84>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d12b      	bne.n	8004632 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	4b18      	ldr	r3, [pc, #96]	@ (8004640 <HAL_I2C_MspInit+0x88>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <HAL_I2C_MspInit+0x88>)
 80045e4:	f043 0320 	orr.w	r3, r3, #32
 80045e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ea:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <HAL_I2C_MspInit+0x88>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045f6:	2303      	movs	r3, #3
 80045f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045fa:	2312      	movs	r3, #18
 80045fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004602:	2303      	movs	r3, #3
 8004604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004606:	2304      	movs	r3, #4
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800460a:	f107 0314 	add.w	r3, r7, #20
 800460e:	4619      	mov	r1, r3
 8004610:	480c      	ldr	r0, [pc, #48]	@ (8004644 <HAL_I2C_MspInit+0x8c>)
 8004612:	f000 fa01 	bl	8004a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <HAL_I2C_MspInit+0x88>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	4a08      	ldr	r2, [pc, #32]	@ (8004640 <HAL_I2C_MspInit+0x88>)
 8004620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004624:	6413      	str	r3, [r2, #64]	@ 0x40
 8004626:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <HAL_I2C_MspInit+0x88>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004632:	bf00      	nop
 8004634:	3728      	adds	r7, #40	@ 0x28
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40005800 	.word	0x40005800
 8004640:	40023800 	.word	0x40023800
 8004644:	40021400 	.word	0x40021400

08004648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <NMI_Handler+0x4>

08004650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <HardFault_Handler+0x4>

08004658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <MemManage_Handler+0x4>

08004660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <BusFault_Handler+0x4>

08004668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <UsageFault_Handler+0x4>

08004670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800469e:	f000 f891 	bl	80047c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <SystemInit+0x20>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	4a05      	ldr	r2, [pc, #20]	@ (80046c8 <SystemInit+0x20>)
 80046b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80046d0:	f7ff ffea 	bl	80046a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046d4:	480c      	ldr	r0, [pc, #48]	@ (8004708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046d6:	490d      	ldr	r1, [pc, #52]	@ (800470c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046dc:	e002      	b.n	80046e4 <LoopCopyDataInit>

080046de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046e2:	3304      	adds	r3, #4

080046e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e8:	d3f9      	bcc.n	80046de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046f0:	e001      	b.n	80046f6 <LoopFillZerobss>

080046f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046f4:	3204      	adds	r2, #4

080046f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f8:	d3fb      	bcc.n	80046f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046fa:	f002 f84b 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046fe:	f7fc fefb 	bl	80014f8 <main>
  bx  lr    
 8004702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004704:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800470c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8004710:	08006848 	.word	0x08006848
  ldr r2, =_sbss
 8004714:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8004718:	200005d4 	.word	0x200005d4

0800471c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800471c:	e7fe      	b.n	800471c <ADC_IRQHandler>
	...

08004720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <HAL_Init+0x40>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0d      	ldr	r2, [pc, #52]	@ (8004760 <HAL_Init+0x40>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800472e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004730:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <HAL_Init+0x40>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0a      	ldr	r2, [pc, #40]	@ (8004760 <HAL_Init+0x40>)
 8004736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800473a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800473c:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <HAL_Init+0x40>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <HAL_Init+0x40>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004748:	2003      	movs	r0, #3
 800474a:	f000 f931 	bl	80049b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800474e:	200f      	movs	r0, #15
 8004750:	f000 f808 	bl	8004764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004754:	f7ff ff08 	bl	8004568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023c00 	.word	0x40023c00

08004764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <HAL_InitTick+0x54>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b12      	ldr	r3, [pc, #72]	@ (80047bc <HAL_InitTick+0x58>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800477a:	fbb3 f3f1 	udiv	r3, r3, r1
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f93b 	bl	80049fe <HAL_SYSTICK_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e00e      	b.n	80047b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0f      	cmp	r3, #15
 8004796:	d80a      	bhi.n	80047ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004798:	2200      	movs	r2, #0
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f000 f911 	bl	80049c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a4:	4a06      	ldr	r2, [pc, #24]	@ (80047c0 <HAL_InitTick+0x5c>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2000002c 	.word	0x2000002c
 80047bc:	20000034 	.word	0x20000034
 80047c0:	20000030 	.word	0x20000030

080047c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c8:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_IncTick+0x20>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <HAL_IncTick+0x24>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_IncTick+0x24>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000034 	.word	0x20000034
 80047e8:	200005d0 	.word	0x200005d0

080047ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return uwTick;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HAL_GetTick+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	200005d0 	.word	0x200005d0

08004804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7ff ffee 	bl	80047ec <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d005      	beq.n	800482a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HAL_Delay+0x44>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800482a:	bf00      	nop
 800482c:	f7ff ffde 	bl	80047ec <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d8f7      	bhi.n	800482c <HAL_Delay+0x28>
  {
  }
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000034 	.word	0x20000034

0800484c <__NVIC_SetPriorityGrouping>:
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487e:	4a04      	ldr	r2, [pc, #16]	@ (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	60d3      	str	r3, [r2, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_GetPriorityGrouping>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004898:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <__NVIC_GetPriorityGrouping+0x18>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0307 	and.w	r3, r3, #7
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_SetPriority>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db0a      	blt.n	80048da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	490c      	ldr	r1, [pc, #48]	@ (80048fc <__NVIC_SetPriority+0x4c>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	440b      	add	r3, r1
 80048d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048d8:	e00a      	b.n	80048f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4908      	ldr	r1, [pc, #32]	@ (8004900 <__NVIC_SetPriority+0x50>)
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	3b04      	subs	r3, #4
 80048e8:	0112      	lsls	r2, r2, #4
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	440b      	add	r3, r1
 80048ee:	761a      	strb	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000e100 	.word	0xe000e100
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	@ 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f1c3 0307 	rsb	r3, r3, #7
 800491e:	2b04      	cmp	r3, #4
 8004920:	bf28      	it	cs
 8004922:	2304      	movcs	r3, #4
 8004924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3304      	adds	r3, #4
 800492a:	2b06      	cmp	r3, #6
 800492c:	d902      	bls.n	8004934 <NVIC_EncodePriority+0x30>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3b03      	subs	r3, #3
 8004932:	e000      	b.n	8004936 <NVIC_EncodePriority+0x32>
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	401a      	ands	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800494c:	f04f 31ff 	mov.w	r1, #4294967295
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	43d9      	mvns	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800495c:	4313      	orrs	r3, r2
         );
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	@ 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800497c:	d301      	bcc.n	8004982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497e:	2301      	movs	r3, #1
 8004980:	e00f      	b.n	80049a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004982:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <SysTick_Config+0x40>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3b01      	subs	r3, #1
 8004988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800498a:	210f      	movs	r1, #15
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	f7ff ff8e 	bl	80048b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <SysTick_Config+0x40>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800499a:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <SysTick_Config+0x40>)
 800499c:	2207      	movs	r2, #7
 800499e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000e010 	.word	0xe000e010

080049b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff47 	bl	800484c <__NVIC_SetPriorityGrouping>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b086      	sub	sp, #24
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	4603      	mov	r3, r0
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d8:	f7ff ff5c 	bl	8004894 <__NVIC_GetPriorityGrouping>
 80049dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	f7ff ff8e 	bl	8004904 <NVIC_EncodePriority>
 80049e8:	4602      	mov	r2, r0
 80049ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff5d 	bl	80048b0 <__NVIC_SetPriority>
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffb0 	bl	800496c <SysTick_Config>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	@ 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	e177      	b.n	8004d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a34:	2201      	movs	r2, #1
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4013      	ands	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	f040 8166 	bne.w	8004d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d005      	beq.n	8004a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d130      	bne.n	8004acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	2203      	movs	r2, #3
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 0201 	and.w	r2, r3, #1
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d017      	beq.n	8004b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d123      	bne.n	8004b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	08da      	lsrs	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3208      	adds	r2, #8
 8004b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	220f      	movs	r2, #15
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	08da      	lsrs	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3208      	adds	r2, #8
 8004b56:	69b9      	ldr	r1, [r7, #24]
 8004b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2203      	movs	r2, #3
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0203 	and.w	r2, r3, #3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80c0 	beq.w	8004d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b66      	ldr	r3, [pc, #408]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	4a65      	ldr	r2, [pc, #404]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bae:	4b63      	ldr	r3, [pc, #396]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bba:	4a61      	ldr	r2, [pc, #388]	@ (8004d40 <HAL_GPIO_Init+0x328>)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a58      	ldr	r2, [pc, #352]	@ (8004d44 <HAL_GPIO_Init+0x32c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d037      	beq.n	8004c56 <HAL_GPIO_Init+0x23e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a57      	ldr	r2, [pc, #348]	@ (8004d48 <HAL_GPIO_Init+0x330>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_GPIO_Init+0x23a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a56      	ldr	r2, [pc, #344]	@ (8004d4c <HAL_GPIO_Init+0x334>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d02b      	beq.n	8004c4e <HAL_GPIO_Init+0x236>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a55      	ldr	r2, [pc, #340]	@ (8004d50 <HAL_GPIO_Init+0x338>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d025      	beq.n	8004c4a <HAL_GPIO_Init+0x232>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a54      	ldr	r2, [pc, #336]	@ (8004d54 <HAL_GPIO_Init+0x33c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01f      	beq.n	8004c46 <HAL_GPIO_Init+0x22e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a53      	ldr	r2, [pc, #332]	@ (8004d58 <HAL_GPIO_Init+0x340>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d019      	beq.n	8004c42 <HAL_GPIO_Init+0x22a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a52      	ldr	r2, [pc, #328]	@ (8004d5c <HAL_GPIO_Init+0x344>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <HAL_GPIO_Init+0x226>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a51      	ldr	r2, [pc, #324]	@ (8004d60 <HAL_GPIO_Init+0x348>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00d      	beq.n	8004c3a <HAL_GPIO_Init+0x222>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a50      	ldr	r2, [pc, #320]	@ (8004d64 <HAL_GPIO_Init+0x34c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <HAL_GPIO_Init+0x21e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a4f      	ldr	r2, [pc, #316]	@ (8004d68 <HAL_GPIO_Init+0x350>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_GPIO_Init+0x21a>
 8004c2e:	2309      	movs	r3, #9
 8004c30:	e012      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c32:	230a      	movs	r3, #10
 8004c34:	e010      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c36:	2308      	movs	r3, #8
 8004c38:	e00e      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c3a:	2307      	movs	r3, #7
 8004c3c:	e00c      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c3e:	2306      	movs	r3, #6
 8004c40:	e00a      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c42:	2305      	movs	r3, #5
 8004c44:	e008      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c46:	2304      	movs	r3, #4
 8004c48:	e006      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e004      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e002      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c56:	2300      	movs	r3, #0
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f002 0203 	and.w	r2, r2, #3
 8004c5e:	0092      	lsls	r2, r2, #2
 8004c60:	4093      	lsls	r3, r2
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c68:	4935      	ldr	r1, [pc, #212]	@ (8004d40 <HAL_GPIO_Init+0x328>)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	3302      	adds	r3, #2
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c76:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c9a:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ca0:	4b32      	ldr	r3, [pc, #200]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cc4:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cca:	4b28      	ldr	r3, [pc, #160]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cee:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d18:	4a14      	ldr	r2, [pc, #80]	@ (8004d6c <HAL_GPIO_Init+0x354>)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3301      	adds	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	f67f ae84 	bls.w	8004a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3724      	adds	r7, #36	@ 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40013800 	.word	0x40013800
 8004d44:	40020000 	.word	0x40020000
 8004d48:	40020400 	.word	0x40020400
 8004d4c:	40020800 	.word	0x40020800
 8004d50:	40020c00 	.word	0x40020c00
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40021400 	.word	0x40021400
 8004d5c:	40021800 	.word	0x40021800
 8004d60:	40021c00 	.word	0x40021c00
 8004d64:	40022000 	.word	0x40022000
 8004d68:	40022400 	.word	0x40022400
 8004d6c:	40013c00 	.word	0x40013c00

08004d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e12b      	b.n	8004fda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fc0e 	bl	80045b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	@ 0x24
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f001 fcc2 	bl	800675c <HAL_RCC_GetPCLK1Freq>
 8004dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4a81      	ldr	r2, [pc, #516]	@ (8004fe4 <HAL_I2C_Init+0x274>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d807      	bhi.n	8004df4 <HAL_I2C_Init+0x84>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a80      	ldr	r2, [pc, #512]	@ (8004fe8 <HAL_I2C_Init+0x278>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bf94      	ite	ls
 8004dec:	2301      	movls	r3, #1
 8004dee:	2300      	movhi	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e006      	b.n	8004e02 <HAL_I2C_Init+0x92>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a7d      	ldr	r2, [pc, #500]	@ (8004fec <HAL_I2C_Init+0x27c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	bf94      	ite	ls
 8004dfc:	2301      	movls	r3, #1
 8004dfe:	2300      	movhi	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0e7      	b.n	8004fda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a78      	ldr	r2, [pc, #480]	@ (8004ff0 <HAL_I2C_Init+0x280>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	0c9b      	lsrs	r3, r3, #18
 8004e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe4 <HAL_I2C_Init+0x274>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d802      	bhi.n	8004e44 <HAL_I2C_Init+0xd4>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3301      	adds	r3, #1
 8004e42:	e009      	b.n	8004e58 <HAL_I2C_Init+0xe8>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	4a69      	ldr	r2, [pc, #420]	@ (8004ff4 <HAL_I2C_Init+0x284>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	3301      	adds	r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	495c      	ldr	r1, [pc, #368]	@ (8004fe4 <HAL_I2C_Init+0x274>)
 8004e74:	428b      	cmp	r3, r1
 8004e76:	d819      	bhi.n	8004eac <HAL_I2C_Init+0x13c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1e59      	subs	r1, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e86:	1c59      	adds	r1, r3, #1
 8004e88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_I2C_Init+0x138>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1e59      	subs	r1, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea6:	e051      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	e04f      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d111      	bne.n	8004ed8 <HAL_I2C_Init+0x168>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1e58      	subs	r0, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	440b      	add	r3, r1
 8004ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e012      	b.n	8004efe <HAL_I2C_Init+0x18e>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1e58      	subs	r0, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	0099      	lsls	r1, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Init+0x196>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e022      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10e      	bne.n	8004f2c <HAL_I2C_Init+0x1bc>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1e58      	subs	r0, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	440b      	add	r3, r1
 8004f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2a:	e00f      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1e58      	subs	r0, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	0099      	lsls	r1, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f42:	3301      	adds	r3, #1
 8004f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	6809      	ldr	r1, [r1, #0]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6911      	ldr	r1, [r2, #16]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	000186a0 	.word	0x000186a0
 8004fe8:	001e847f 	.word	0x001e847f
 8004fec:	003d08ff 	.word	0x003d08ff
 8004ff0:	431bde83 	.word	0x431bde83
 8004ff4:	10624dd3 	.word	0x10624dd3

08004ff8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	460b      	mov	r3, r1
 8005006:	817b      	strh	r3, [r7, #10]
 8005008:	4613      	mov	r3, r2
 800500a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff fbee 	bl	80047ec <HAL_GetTick>
 8005010:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 80e0 	bne.w	80051e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2319      	movs	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	4970      	ldr	r1, [pc, #448]	@ (80051ec <HAL_I2C_Master_Transmit+0x1f4>)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fc64 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	e0d3      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_I2C_Master_Transmit+0x50>
 8005044:	2302      	movs	r3, #2
 8005046:	e0cc      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1ea>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d007      	beq.n	800506e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800507c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2221      	movs	r2, #33	@ 0x21
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2210      	movs	r2, #16
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	893a      	ldrh	r2, [r7, #8]
 800509e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a50      	ldr	r2, [pc, #320]	@ (80051f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80050ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050b0:	8979      	ldrh	r1, [r7, #10]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 face 	bl	8005658 <I2C_MasterRequestWrite>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e08d      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050dc:	e066      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	6a39      	ldr	r1, [r7, #32]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fd22 	bl	8005b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d107      	bne.n	8005106 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005104:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e06b      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d11b      	bne.n	8005180 <HAL_I2C_Master_Transmit+0x188>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	6a39      	ldr	r1, [r7, #32]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fd19 	bl	8005bbc <I2C_WaitOnBTFFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	2b04      	cmp	r3, #4
 8005196:	d107      	bne.n	80051a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e01a      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d194      	bne.n	80050de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	e000      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	00100002 	.word	0x00100002
 80051f0:	ffff0000 	.word	0xffff0000

080051f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	@ 0x30
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	461a      	mov	r2, r3
 8005200:	460b      	mov	r3, r1
 8005202:	817b      	strh	r3, [r7, #10]
 8005204:	4613      	mov	r3, r2
 8005206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005208:	f7ff faf0 	bl	80047ec <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b20      	cmp	r3, #32
 8005218:	f040 8217 	bne.w	800564a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2319      	movs	r3, #25
 8005222:	2201      	movs	r2, #1
 8005224:	497c      	ldr	r1, [pc, #496]	@ (8005418 <HAL_I2C_Master_Receive+0x224>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb66 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
 8005234:	e20a      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_I2C_Master_Receive+0x50>
 8005240:	2302      	movs	r3, #2
 8005242:	e203      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b01      	cmp	r3, #1
 8005258:	d007      	beq.n	800526a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2222      	movs	r2, #34	@ 0x22
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2210      	movs	r2, #16
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	893a      	ldrh	r2, [r7, #8]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a5c      	ldr	r2, [pc, #368]	@ (800541c <HAL_I2C_Master_Receive+0x228>)
 80052aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052ac:	8979      	ldrh	r1, [r7, #10]
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa52 	bl	800575c <I2C_MasterRequestRead>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e1c4      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d113      	bne.n	80052f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e198      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d11b      	bne.n	8005332 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e178      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	2b02      	cmp	r3, #2
 8005338:	d11b      	bne.n	8005372 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005358:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	e158      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005398:	e144      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539e:	2b03      	cmp	r3, #3
 80053a0:	f200 80f1 	bhi.w	8005586 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d123      	bne.n	80053f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fc4b 	bl	8005c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e145      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053f2:	e117      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d14e      	bne.n	800549a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	4906      	ldr	r1, [pc, #24]	@ (8005420 <HAL_I2C_Master_Receive+0x22c>)
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa76 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e11a      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
 8005416:	bf00      	nop
 8005418:	00100002 	.word	0x00100002
 800541c:	ffff0000 	.word	0xffff0000
 8005420:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005498:	e0c4      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	2200      	movs	r2, #0
 80054a2:	496c      	ldr	r1, [pc, #432]	@ (8005654 <HAL_I2C_Master_Receive+0x460>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fa27 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0cb      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	2200      	movs	r2, #0
 80054fe:	4955      	ldr	r1, [pc, #340]	@ (8005654 <HAL_I2C_Master_Receive+0x460>)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f9f9 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e09d      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005584:	e04e      	b.n	8005624 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005588:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fb5e 	bl	8005c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e058      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d124      	bne.n	8005624 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d107      	bne.n	80055f2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f aeb6 	bne.w	800539a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3728      	adds	r7, #40	@ 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	00010004 	.word	0x00010004

08005658 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	460b      	mov	r3, r1
 8005666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d006      	beq.n	8005682 <I2C_MasterRequestWrite+0x2a>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d003      	beq.n	8005682 <I2C_MasterRequestWrite+0x2a>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005680:	d108      	bne.n	8005694 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e00b      	b.n	80056ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	2b12      	cmp	r3, #18
 800569a:	d107      	bne.n	80056ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f91d 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d2:	d103      	bne.n	80056dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e035      	b.n	800574c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056e8:	d108      	bne.n	80056fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056ea:	897b      	ldrh	r3, [r7, #10]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056f8:	611a      	str	r2, [r3, #16]
 80056fa:	e01b      	b.n	8005734 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056fc:	897b      	ldrh	r3, [r7, #10]
 80056fe:	11db      	asrs	r3, r3, #7
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 0306 	and.w	r3, r3, #6
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f063 030f 	orn	r3, r3, #15
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	490e      	ldr	r1, [pc, #56]	@ (8005754 <I2C_MasterRequestWrite+0xfc>)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f966 	bl	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e010      	b.n	800574c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800572a:	897b      	ldrh	r3, [r7, #10]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4907      	ldr	r1, [pc, #28]	@ (8005758 <I2C_MasterRequestWrite+0x100>)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f956 	bl	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	00010008 	.word	0x00010008
 8005758:	00010002 	.word	0x00010002

0800575c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	460b      	mov	r3, r1
 800576a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005780:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d006      	beq.n	8005796 <I2C_MasterRequestRead+0x3a>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d003      	beq.n	8005796 <I2C_MasterRequestRead+0x3a>
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005794:	d108      	bne.n	80057a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e00b      	b.n	80057c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ac:	2b11      	cmp	r3, #17
 80057ae:	d107      	bne.n	80057c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f893 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e6:	d103      	bne.n	80057f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e079      	b.n	80058e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057fc:	d108      	bne.n	8005810 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057fe:	897b      	ldrh	r3, [r7, #10]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	e05f      	b.n	80058d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	11db      	asrs	r3, r3, #7
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 0306 	and.w	r3, r3, #6
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f063 030f 	orn	r3, r3, #15
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4930      	ldr	r1, [pc, #192]	@ (80058f0 <I2C_MasterRequestRead+0x194>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f8dc 	bl	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e054      	b.n	80058e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4929      	ldr	r1, [pc, #164]	@ (80058f4 <I2C_MasterRequestRead+0x198>)
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f8cc 	bl	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e044      	b.n	80058e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005882:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f831 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058aa:	d103      	bne.n	80058b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e017      	b.n	80058e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80058b8:	897b      	ldrh	r3, [r7, #10]
 80058ba:	11db      	asrs	r3, r3, #7
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0306 	and.w	r3, r3, #6
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f063 030e 	orn	r3, r3, #14
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4907      	ldr	r1, [pc, #28]	@ (80058f4 <I2C_MasterRequestRead+0x198>)
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f888 	bl	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	00010008 	.word	0x00010008
 80058f4:	00010002 	.word	0x00010002

080058f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005908:	e048      	b.n	800599c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d044      	beq.n	800599c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fe ff6b 	bl	80047ec <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d139      	bne.n	800599c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10d      	bne.n	800594e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	43da      	mvns	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	e00c      	b.n	8005968 <I2C_WaitOnFlagUntilTimeout+0x70>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	43da      	mvns	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4013      	ands	r3, r2
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	429a      	cmp	r2, r3
 800596c:	d116      	bne.n	800599c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e023      	b.n	80059e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0c1b      	lsrs	r3, r3, #16
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10d      	bne.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	e00c      	b.n	80059dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	43da      	mvns	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4013      	ands	r3, r2
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf0c      	ite	eq
 80059d4:	2301      	moveq	r3, #1
 80059d6:	2300      	movne	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d093      	beq.n	800590a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059fa:	e071      	b.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0a:	d123      	bne.n	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	f043 0204 	orr.w	r2, r3, #4
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e067      	b.n	8005b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d041      	beq.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5c:	f7fe fec6 	bl	80047ec <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d302      	bcc.n	8005a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d136      	bne.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d10c      	bne.n	8005a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	43da      	mvns	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bf14      	ite	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	2300      	moveq	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e00b      	b.n	8005aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	43da      	mvns	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bf14      	ite	ne
 8005aa8:	2301      	movne	r3, #1
 8005aaa:	2300      	moveq	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e021      	b.n	8005b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d10c      	bne.n	8005b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	43da      	mvns	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e00b      	b.n	8005b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	43da      	mvns	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f47f af6d 	bne.w	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b38:	e034      	b.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f8e3 	bl	8005d06 <I2C_IsAcknowledgeFailed>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e034      	b.n	8005bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d028      	beq.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fe fe4b 	bl	80047ec <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11d      	bne.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b72:	2b80      	cmp	r3, #128	@ 0x80
 8005b74:	d016      	beq.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e007      	b.n	8005bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bae:	2b80      	cmp	r3, #128	@ 0x80
 8005bb0:	d1c3      	bne.n	8005b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bc8:	e034      	b.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f89b 	bl	8005d06 <I2C_IsAcknowledgeFailed>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e034      	b.n	8005c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d028      	beq.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be2:	f7fe fe03 	bl	80047ec <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11d      	bne.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d016      	beq.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e007      	b.n	8005c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d1c3      	bne.n	8005bca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c58:	e049      	b.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d119      	bne.n	8005c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0210 	mvn.w	r2, #16
 8005c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e030      	b.n	8005cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9c:	f7fe fda6 	bl	80047ec <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d302      	bcc.n	8005cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11d      	bne.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b40      	cmp	r3, #64	@ 0x40
 8005cbe:	d016      	beq.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e007      	b.n	8005cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf8:	2b40      	cmp	r3, #64	@ 0x40
 8005cfa:	d1ae      	bne.n	8005c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1c:	d11b      	bne.n	8005d56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	f043 0204 	orr.w	r2, r3, #4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d129      	bne.n	8005dce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2224      	movs	r2, #36	@ 0x24
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0210 	bic.w	r2, r2, #16
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d12a      	bne.n	8005e4c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2224      	movs	r2, #36	@ 0x24
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005e16:	89fb      	ldrh	r3, [r7, #14]
 8005e18:	f023 030f 	bic.w	r3, r3, #15
 8005e1c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	89fb      	ldrh	r3, [r7, #14]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	89fa      	ldrh	r2, [r7, #14]
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e000      	b.n	8005e4e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4b20      	ldr	r3, [pc, #128]	@ (8005eec <HAL_PWREx_EnableOverDrive+0x90>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eec <HAL_PWREx_EnableOverDrive+0x90>)
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e76:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <HAL_PWREx_EnableOverDrive+0x90>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e88:	f7fe fcb0 	bl	80047ec <HAL_GetTick>
 8005e8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e8e:	e009      	b.n	8005ea4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e90:	f7fe fcac 	bl	80047ec <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e9e:	d901      	bls.n	8005ea4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e01f      	b.n	8005ee4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ea4:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb0:	d1ee      	bne.n	8005e90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005eb8:	f7fe fc98 	bl	80047ec <HAL_GetTick>
 8005ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ebe:	e009      	b.n	8005ed4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ec0:	f7fe fc94 	bl	80047ec <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ece:	d901      	bls.n	8005ed4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e007      	b.n	8005ee4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ed4:	4b07      	ldr	r3, [pc, #28]	@ (8005ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ee0:	d1ee      	bne.n	8005ec0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	420e0040 	.word	0x420e0040
 8005ef4:	40007000 	.word	0x40007000
 8005ef8:	420e0044 	.word	0x420e0044

08005efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e267      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d075      	beq.n	8006006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f1a:	4b88      	ldr	r3, [pc, #544]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d00c      	beq.n	8005f40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f26:	4b85      	ldr	r3, [pc, #532]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d112      	bne.n	8005f58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f32:	4b82      	ldr	r3, [pc, #520]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f3e:	d10b      	bne.n	8005f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f40:	4b7e      	ldr	r3, [pc, #504]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d05b      	beq.n	8006004 <HAL_RCC_OscConfig+0x108>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d157      	bne.n	8006004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e242      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f60:	d106      	bne.n	8005f70 <HAL_RCC_OscConfig+0x74>
 8005f62:	4b76      	ldr	r3, [pc, #472]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a75      	ldr	r2, [pc, #468]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e01d      	b.n	8005fac <HAL_RCC_OscConfig+0xb0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x98>
 8005f7a:	4b70      	ldr	r3, [pc, #448]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	4b6d      	ldr	r3, [pc, #436]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e00b      	b.n	8005fac <HAL_RCC_OscConfig+0xb0>
 8005f94:	4b69      	ldr	r3, [pc, #420]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a68      	ldr	r2, [pc, #416]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4b66      	ldr	r3, [pc, #408]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a65      	ldr	r2, [pc, #404]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d013      	beq.n	8005fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb4:	f7fe fc1a 	bl	80047ec <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fbc:	f7fe fc16 	bl	80047ec <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b64      	cmp	r3, #100	@ 0x64
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e207      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fce:	4b5b      	ldr	r3, [pc, #364]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0xc0>
 8005fda:	e014      	b.n	8006006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fdc:	f7fe fc06 	bl	80047ec <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe4:	f7fe fc02 	bl	80047ec <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b64      	cmp	r3, #100	@ 0x64
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e1f3      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff6:	4b51      	ldr	r3, [pc, #324]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0xe8>
 8006002:	e000      	b.n	8006006 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d063      	beq.n	80060da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006012:	4b4a      	ldr	r3, [pc, #296]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601e:	4b47      	ldr	r3, [pc, #284]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006026:	2b08      	cmp	r3, #8
 8006028:	d11c      	bne.n	8006064 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800602a:	4b44      	ldr	r3, [pc, #272]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d116      	bne.n	8006064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006036:	4b41      	ldr	r3, [pc, #260]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_RCC_OscConfig+0x152>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d001      	beq.n	800604e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e1c7      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604e:	4b3b      	ldr	r3, [pc, #236]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4937      	ldr	r1, [pc, #220]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006062:	e03a      	b.n	80060da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d020      	beq.n	80060ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800606c:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <HAL_RCC_OscConfig+0x244>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006072:	f7fe fbbb 	bl	80047ec <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800607a:	f7fe fbb7 	bl	80047ec <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e1a8      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608c:	4b2b      	ldr	r3, [pc, #172]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006098:	4b28      	ldr	r3, [pc, #160]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4925      	ldr	r1, [pc, #148]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	600b      	str	r3, [r1, #0]
 80060ac:	e015      	b.n	80060da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ae:	4b24      	ldr	r3, [pc, #144]	@ (8006140 <HAL_RCC_OscConfig+0x244>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fe fb9a 	bl	80047ec <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060bc:	f7fe fb96 	bl	80047ec <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e187      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ce:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d036      	beq.n	8006154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ee:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <HAL_RCC_OscConfig+0x248>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f4:	f7fe fb7a 	bl	80047ec <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060fc:	f7fe fb76 	bl	80047ec <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e167      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610e:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <HAL_RCC_OscConfig+0x240>)
 8006110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x200>
 800611a:	e01b      	b.n	8006154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <HAL_RCC_OscConfig+0x248>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006122:	f7fe fb63 	bl	80047ec <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006128:	e00e      	b.n	8006148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612a:	f7fe fb5f 	bl	80047ec <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d907      	bls.n	8006148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e150      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
 800613c:	40023800 	.word	0x40023800
 8006140:	42470000 	.word	0x42470000
 8006144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006148:	4b88      	ldr	r3, [pc, #544]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800614a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1ea      	bne.n	800612a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8097 	beq.w	8006290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006162:	2300      	movs	r3, #0
 8006164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006166:	4b81      	ldr	r3, [pc, #516]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10f      	bne.n	8006192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	4b7d      	ldr	r3, [pc, #500]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	4a7c      	ldr	r2, [pc, #496]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800617c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006180:	6413      	str	r3, [r2, #64]	@ 0x40
 8006182:	4b7a      	ldr	r3, [pc, #488]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800618a:	60bb      	str	r3, [r7, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006192:	4b77      	ldr	r3, [pc, #476]	@ (8006370 <HAL_RCC_OscConfig+0x474>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d118      	bne.n	80061d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800619e:	4b74      	ldr	r3, [pc, #464]	@ (8006370 <HAL_RCC_OscConfig+0x474>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a73      	ldr	r2, [pc, #460]	@ (8006370 <HAL_RCC_OscConfig+0x474>)
 80061a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061aa:	f7fe fb1f 	bl	80047ec <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b2:	f7fe fb1b 	bl	80047ec <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e10c      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c4:	4b6a      	ldr	r3, [pc, #424]	@ (8006370 <HAL_RCC_OscConfig+0x474>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f0      	beq.n	80061b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d106      	bne.n	80061e6 <HAL_RCC_OscConfig+0x2ea>
 80061d8:	4b64      	ldr	r3, [pc, #400]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061dc:	4a63      	ldr	r2, [pc, #396]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e4:	e01c      	b.n	8006220 <HAL_RCC_OscConfig+0x324>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d10c      	bne.n	8006208 <HAL_RCC_OscConfig+0x30c>
 80061ee:	4b5f      	ldr	r3, [pc, #380]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f2:	4a5e      	ldr	r2, [pc, #376]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061fa:	4b5c      	ldr	r3, [pc, #368]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fe:	4a5b      	ldr	r2, [pc, #364]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6713      	str	r3, [r2, #112]	@ 0x70
 8006206:	e00b      	b.n	8006220 <HAL_RCC_OscConfig+0x324>
 8006208:	4b58      	ldr	r3, [pc, #352]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620c:	4a57      	ldr	r2, [pc, #348]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	6713      	str	r3, [r2, #112]	@ 0x70
 8006214:	4b55      	ldr	r3, [pc, #340]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006218:	4a54      	ldr	r2, [pc, #336]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800621a:	f023 0304 	bic.w	r3, r3, #4
 800621e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d015      	beq.n	8006254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006228:	f7fe fae0 	bl	80047ec <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	e00a      	b.n	8006246 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006230:	f7fe fadc 	bl	80047ec <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e0cb      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006246:	4b49      	ldr	r3, [pc, #292]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0ee      	beq.n	8006230 <HAL_RCC_OscConfig+0x334>
 8006252:	e014      	b.n	800627e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006254:	f7fe faca 	bl	80047ec <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625a:	e00a      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625c:	f7fe fac6 	bl	80047ec <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0b5      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006272:	4b3e      	ldr	r3, [pc, #248]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1ee      	bne.n	800625c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d105      	bne.n	8006290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006284:	4b39      	ldr	r3, [pc, #228]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	4a38      	ldr	r2, [pc, #224]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800628a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800628e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80a1 	beq.w	80063dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800629a:	4b34      	ldr	r3, [pc, #208]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d05c      	beq.n	8006360 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d141      	bne.n	8006332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ae:	4b31      	ldr	r3, [pc, #196]	@ (8006374 <HAL_RCC_OscConfig+0x478>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fe fa9a 	bl	80047ec <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fe fa96 	bl	80047ec <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e087      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ce:	4b27      	ldr	r3, [pc, #156]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	3b01      	subs	r3, #1
 80062f4:	041b      	lsls	r3, r3, #16
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	061b      	lsls	r3, r3, #24
 80062fe:	491b      	ldr	r1, [pc, #108]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006300:	4313      	orrs	r3, r2
 8006302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006304:	4b1b      	ldr	r3, [pc, #108]	@ (8006374 <HAL_RCC_OscConfig+0x478>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630a:	f7fe fa6f 	bl	80047ec <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006312:	f7fe fa6b 	bl	80047ec <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e05c      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006324:	4b11      	ldr	r3, [pc, #68]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f0      	beq.n	8006312 <HAL_RCC_OscConfig+0x416>
 8006330:	e054      	b.n	80063dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006332:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <HAL_RCC_OscConfig+0x478>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fe fa58 	bl	80047ec <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006340:	f7fe fa54 	bl	80047ec <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e045      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006352:	4b06      	ldr	r3, [pc, #24]	@ (800636c <HAL_RCC_OscConfig+0x470>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x444>
 800635e:	e03d      	b.n	80063dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d107      	bne.n	8006378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e038      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
 800636c:	40023800 	.word	0x40023800
 8006370:	40007000 	.word	0x40007000
 8006374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006378:	4b1b      	ldr	r3, [pc, #108]	@ (80063e8 <HAL_RCC_OscConfig+0x4ec>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d028      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006390:	429a      	cmp	r2, r3
 8006392:	d121      	bne.n	80063d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800639e:	429a      	cmp	r2, r3
 80063a0:	d11a      	bne.n	80063d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063a8:	4013      	ands	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d111      	bne.n	80063d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	3b01      	subs	r3, #1
 80063c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d107      	bne.n	80063d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d001      	beq.n	80063dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800

080063ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0cc      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006400:	4b68      	ldr	r3, [pc, #416]	@ (80065a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d90c      	bls.n	8006428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640e:	4b65      	ldr	r3, [pc, #404]	@ (80065a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b63      	ldr	r3, [pc, #396]	@ (80065a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0b8      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d020      	beq.n	8006476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006440:	4b59      	ldr	r3, [pc, #356]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4a58      	ldr	r2, [pc, #352]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800644a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006458:	4b53      	ldr	r3, [pc, #332]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4a52      	ldr	r2, [pc, #328]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006464:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	494d      	ldr	r1, [pc, #308]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d044      	beq.n	800650c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d107      	bne.n	800649a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	4b47      	ldr	r3, [pc, #284]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d119      	bne.n	80064ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e07f      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d003      	beq.n	80064aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d107      	bne.n	80064ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064aa:	4b3f      	ldr	r3, [pc, #252]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e06f      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ba:	4b3b      	ldr	r3, [pc, #236]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e067      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ca:	4b37      	ldr	r3, [pc, #220]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f023 0203 	bic.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4934      	ldr	r1, [pc, #208]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064dc:	f7fe f986 	bl	80047ec <HAL_GetTick>
 80064e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e2:	e00a      	b.n	80064fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e4:	f7fe f982 	bl	80047ec <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e04f      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fa:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 020c 	and.w	r2, r3, #12
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	429a      	cmp	r2, r3
 800650a:	d1eb      	bne.n	80064e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800650c:	4b25      	ldr	r3, [pc, #148]	@ (80065a4 <HAL_RCC_ClockConfig+0x1b8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d20c      	bcs.n	8006534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4b22      	ldr	r3, [pc, #136]	@ (80065a4 <HAL_RCC_ClockConfig+0x1b8>)
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006522:	4b20      	ldr	r3, [pc, #128]	@ (80065a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d001      	beq.n	8006534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e032      	b.n	800659a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006540:	4b19      	ldr	r3, [pc, #100]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4916      	ldr	r1, [pc, #88]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800655e:	4b12      	ldr	r3, [pc, #72]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	490e      	ldr	r1, [pc, #56]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006572:	f000 f821 	bl	80065b8 <HAL_RCC_GetSysClockFreq>
 8006576:	4602      	mov	r2, r0
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	490a      	ldr	r1, [pc, #40]	@ (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 8006584:	5ccb      	ldrb	r3, [r1, r3]
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 800658c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800658e:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe f8e6 	bl	8004764 <HAL_InitTick>

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40023c00 	.word	0x40023c00
 80065a8:	40023800 	.word	0x40023800
 80065ac:	08006820 	.word	0x08006820
 80065b0:	2000002c 	.word	0x2000002c
 80065b4:	20000030 	.word	0x20000030

080065b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065bc:	b090      	sub	sp, #64	@ 0x40
 80065be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d0:	4b59      	ldr	r3, [pc, #356]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x180>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d00d      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0x40>
 80065dc:	2b08      	cmp	r3, #8
 80065de:	f200 80a1 	bhi.w	8006724 <HAL_RCC_GetSysClockFreq+0x16c>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x34>
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d003      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ea:	e09b      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065ec:	4b53      	ldr	r3, [pc, #332]	@ (800673c <HAL_RCC_GetSysClockFreq+0x184>)
 80065ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065f0:	e09b      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065f2:	4b53      	ldr	r3, [pc, #332]	@ (8006740 <HAL_RCC_GetSysClockFreq+0x188>)
 80065f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065f6:	e098      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x180>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006602:	4b4d      	ldr	r3, [pc, #308]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x180>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d028      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800660e:	4b4a      	ldr	r3, [pc, #296]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x180>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	099b      	lsrs	r3, r3, #6
 8006614:	2200      	movs	r2, #0
 8006616:	623b      	str	r3, [r7, #32]
 8006618:	627a      	str	r2, [r7, #36]	@ 0x24
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006620:	2100      	movs	r1, #0
 8006622:	4b47      	ldr	r3, [pc, #284]	@ (8006740 <HAL_RCC_GetSysClockFreq+0x188>)
 8006624:	fb03 f201 	mul.w	r2, r3, r1
 8006628:	2300      	movs	r3, #0
 800662a:	fb00 f303 	mul.w	r3, r0, r3
 800662e:	4413      	add	r3, r2
 8006630:	4a43      	ldr	r2, [pc, #268]	@ (8006740 <HAL_RCC_GetSysClockFreq+0x188>)
 8006632:	fba0 1202 	umull	r1, r2, r0, r2
 8006636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006638:	460a      	mov	r2, r1
 800663a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800663c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800663e:	4413      	add	r3, r2
 8006640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006644:	2200      	movs	r2, #0
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	61fa      	str	r2, [r7, #28]
 800664a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006652:	f7f9 ffd9 	bl	8000608 <__aeabi_uldivmod>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4613      	mov	r3, r2
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800665e:	e053      	b.n	8006708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006660:	4b35      	ldr	r3, [pc, #212]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x180>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	099b      	lsrs	r3, r3, #6
 8006666:	2200      	movs	r2, #0
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	617a      	str	r2, [r7, #20]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006672:	f04f 0b00 	mov.w	fp, #0
 8006676:	4652      	mov	r2, sl
 8006678:	465b      	mov	r3, fp
 800667a:	f04f 0000 	mov.w	r0, #0
 800667e:	f04f 0100 	mov.w	r1, #0
 8006682:	0159      	lsls	r1, r3, #5
 8006684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006688:	0150      	lsls	r0, r2, #5
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	ebb2 080a 	subs.w	r8, r2, sl
 8006692:	eb63 090b 	sbc.w	r9, r3, fp
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066aa:	ebb2 0408 	subs.w	r4, r2, r8
 80066ae:	eb63 0509 	sbc.w	r5, r3, r9
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	00eb      	lsls	r3, r5, #3
 80066bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066c0:	00e2      	lsls	r2, r4, #3
 80066c2:	4614      	mov	r4, r2
 80066c4:	461d      	mov	r5, r3
 80066c6:	eb14 030a 	adds.w	r3, r4, sl
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	eb45 030b 	adc.w	r3, r5, fp
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066de:	4629      	mov	r1, r5
 80066e0:	028b      	lsls	r3, r1, #10
 80066e2:	4621      	mov	r1, r4
 80066e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066e8:	4621      	mov	r1, r4
 80066ea:	028a      	lsls	r2, r1, #10
 80066ec:	4610      	mov	r0, r2
 80066ee:	4619      	mov	r1, r3
 80066f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f2:	2200      	movs	r2, #0
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	60fa      	str	r2, [r7, #12]
 80066f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066fc:	f7f9 ff84 	bl	8000608 <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4613      	mov	r3, r2
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006708:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x180>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	3301      	adds	r3, #1
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006722:	e002      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <HAL_RCC_GetSysClockFreq+0x184>)
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800672c:	4618      	mov	r0, r3
 800672e:	3740      	adds	r7, #64	@ 0x40
 8006730:	46bd      	mov	sp, r7
 8006732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006736:	bf00      	nop
 8006738:	40023800 	.word	0x40023800
 800673c:	00f42400 	.word	0x00f42400
 8006740:	017d7840 	.word	0x017d7840

08006744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006748:	4b03      	ldr	r3, [pc, #12]	@ (8006758 <HAL_RCC_GetHCLKFreq+0x14>)
 800674a:	681b      	ldr	r3, [r3, #0]
}
 800674c:	4618      	mov	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	2000002c 	.word	0x2000002c

0800675c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006760:	f7ff fff0 	bl	8006744 <HAL_RCC_GetHCLKFreq>
 8006764:	4602      	mov	r2, r0
 8006766:	4b05      	ldr	r3, [pc, #20]	@ (800677c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	0a9b      	lsrs	r3, r3, #10
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	4903      	ldr	r1, [pc, #12]	@ (8006780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006778:	4618      	mov	r0, r3
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40023800 	.word	0x40023800
 8006780:	08006830 	.word	0x08006830

08006784 <memset>:
 8006784:	4402      	add	r2, r0
 8006786:	4603      	mov	r3, r0
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <memset+0xa>
 800678c:	4770      	bx	lr
 800678e:	f803 1b01 	strb.w	r1, [r3], #1
 8006792:	e7f9      	b.n	8006788 <memset+0x4>

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4d0d      	ldr	r5, [pc, #52]	@ (80067cc <__libc_init_array+0x38>)
 8006798:	4c0d      	ldr	r4, [pc, #52]	@ (80067d0 <__libc_init_array+0x3c>)
 800679a:	1b64      	subs	r4, r4, r5
 800679c:	10a4      	asrs	r4, r4, #2
 800679e:	2600      	movs	r6, #0
 80067a0:	42a6      	cmp	r6, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	4d0b      	ldr	r5, [pc, #44]	@ (80067d4 <__libc_init_array+0x40>)
 80067a6:	4c0c      	ldr	r4, [pc, #48]	@ (80067d8 <__libc_init_array+0x44>)
 80067a8:	f000 f818 	bl	80067dc <_init>
 80067ac:	1b64      	subs	r4, r4, r5
 80067ae:	10a4      	asrs	r4, r4, #2
 80067b0:	2600      	movs	r6, #0
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067bc:	4798      	blx	r3
 80067be:	3601      	adds	r6, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c6:	4798      	blx	r3
 80067c8:	3601      	adds	r6, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	08006840 	.word	0x08006840
 80067d0:	08006840 	.word	0x08006840
 80067d4:	08006840 	.word	0x08006840
 80067d8:	08006844 	.word	0x08006844

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr
