
GSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca4  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005e54  08005e54  00006e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e98  08005e98  00007040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e98  08005e98  00006e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea0  08005ea0  00007040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08005ea8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007040  2**0
                  CONTENTS
 10 .bss          0000053c  20000040  20000040  00007040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000057c  2000057c  00007040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1e6  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc3  00000000  00000000  00013256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  00015220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  00015b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d9d  00000000  00000000  000162bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb88  00000000  00000000  00019058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc6a  00000000  00000000  00028be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010684a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002660  00000000  00000000  00106890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00108ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000040 	.word	0x20000040
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e3c 	.word	0x08005e3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000044 	.word	0x20000044
 80001ec:	08005e3c 	.word	0x08005e3c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b988 	b.w	8000930 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	468e      	mov	lr, r1
 8000640:	4604      	mov	r4, r0
 8000642:	4688      	mov	r8, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d14a      	bne.n	80006de <__udivmoddi4+0xa6>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d962      	bls.n	8000714 <__udivmoddi4+0xdc>
 800064e:	fab2 f682 	clz	r6, r2
 8000652:	b14e      	cbz	r6, 8000668 <__udivmoddi4+0x30>
 8000654:	f1c6 0320 	rsb	r3, r6, #32
 8000658:	fa01 f806 	lsl.w	r8, r1, r6
 800065c:	fa20 f303 	lsr.w	r3, r0, r3
 8000660:	40b7      	lsls	r7, r6
 8000662:	ea43 0808 	orr.w	r8, r3, r8
 8000666:	40b4      	lsls	r4, r6
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f fc87 	uxth.w	ip, r7
 8000670:	fbb8 f1fe 	udiv	r1, r8, lr
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	fb0e 8811 	mls	r8, lr, r1, r8
 800067a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067e:	fb01 f20c 	mul.w	r2, r1, ip
 8000682:	429a      	cmp	r2, r3
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x62>
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	f101 30ff 	add.w	r0, r1, #4294967295
 800068c:	f080 80ea 	bcs.w	8000864 <__udivmoddi4+0x22c>
 8000690:	429a      	cmp	r2, r3
 8000692:	f240 80e7 	bls.w	8000864 <__udivmoddi4+0x22c>
 8000696:	3902      	subs	r1, #2
 8000698:	443b      	add	r3, r7
 800069a:	1a9a      	subs	r2, r3, r2
 800069c:	b2a3      	uxth	r3, r4
 800069e:	fbb2 f0fe 	udiv	r0, r2, lr
 80006a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ae:	459c      	cmp	ip, r3
 80006b0:	d909      	bls.n	80006c6 <__udivmoddi4+0x8e>
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006b8:	f080 80d6 	bcs.w	8000868 <__udivmoddi4+0x230>
 80006bc:	459c      	cmp	ip, r3
 80006be:	f240 80d3 	bls.w	8000868 <__udivmoddi4+0x230>
 80006c2:	443b      	add	r3, r7
 80006c4:	3802      	subs	r0, #2
 80006c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ca:	eba3 030c 	sub.w	r3, r3, ip
 80006ce:	2100      	movs	r1, #0
 80006d0:	b11d      	cbz	r5, 80006da <__udivmoddi4+0xa2>
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	2200      	movs	r2, #0
 80006d6:	e9c5 3200 	strd	r3, r2, [r5]
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d905      	bls.n	80006ee <__udivmoddi4+0xb6>
 80006e2:	b10d      	cbz	r5, 80006e8 <__udivmoddi4+0xb0>
 80006e4:	e9c5 0100 	strd	r0, r1, [r5]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4608      	mov	r0, r1
 80006ec:	e7f5      	b.n	80006da <__udivmoddi4+0xa2>
 80006ee:	fab3 f183 	clz	r1, r3
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d146      	bne.n	8000784 <__udivmoddi4+0x14c>
 80006f6:	4573      	cmp	r3, lr
 80006f8:	d302      	bcc.n	8000700 <__udivmoddi4+0xc8>
 80006fa:	4282      	cmp	r2, r0
 80006fc:	f200 8105 	bhi.w	800090a <__udivmoddi4+0x2d2>
 8000700:	1a84      	subs	r4, r0, r2
 8000702:	eb6e 0203 	sbc.w	r2, lr, r3
 8000706:	2001      	movs	r0, #1
 8000708:	4690      	mov	r8, r2
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0e5      	beq.n	80006da <__udivmoddi4+0xa2>
 800070e:	e9c5 4800 	strd	r4, r8, [r5]
 8000712:	e7e2      	b.n	80006da <__udivmoddi4+0xa2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	f000 8090 	beq.w	800083a <__udivmoddi4+0x202>
 800071a:	fab2 f682 	clz	r6, r2
 800071e:	2e00      	cmp	r6, #0
 8000720:	f040 80a4 	bne.w	800086c <__udivmoddi4+0x234>
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	b280      	uxth	r0, r0
 800072e:	b2bc      	uxth	r4, r7
 8000730:	2101      	movs	r1, #1
 8000732:	fbb2 fcfe 	udiv	ip, r2, lr
 8000736:	fb0e 221c 	mls	r2, lr, ip, r2
 800073a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073e:	fb04 f20c 	mul.w	r2, r4, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x11e>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f10c 38ff 	add.w	r8, ip, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x11c>
 800074e:	429a      	cmp	r2, r3
 8000750:	f200 80e0 	bhi.w	8000914 <__udivmoddi4+0x2dc>
 8000754:	46c4      	mov	ip, r8
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	fbb3 f2fe 	udiv	r2, r3, lr
 800075c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000760:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000764:	fb02 f404 	mul.w	r4, r2, r4
 8000768:	429c      	cmp	r4, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x144>
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x142>
 8000774:	429c      	cmp	r4, r3
 8000776:	f200 80ca 	bhi.w	800090e <__udivmoddi4+0x2d6>
 800077a:	4602      	mov	r2, r0
 800077c:	1b1b      	subs	r3, r3, r4
 800077e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000782:	e7a5      	b.n	80006d0 <__udivmoddi4+0x98>
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	408b      	lsls	r3, r1
 800078a:	fa22 f706 	lsr.w	r7, r2, r6
 800078e:	431f      	orrs	r7, r3
 8000790:	fa0e f401 	lsl.w	r4, lr, r1
 8000794:	fa20 f306 	lsr.w	r3, r0, r6
 8000798:	fa2e fe06 	lsr.w	lr, lr, r6
 800079c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007a0:	4323      	orrs	r3, r4
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	fa1f fc87 	uxth.w	ip, r7
 80007aa:	fbbe f0f9 	udiv	r0, lr, r9
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007bc:	45a6      	cmp	lr, r4
 80007be:	fa02 f201 	lsl.w	r2, r2, r1
 80007c2:	d909      	bls.n	80007d8 <__udivmoddi4+0x1a0>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ca:	f080 809c 	bcs.w	8000906 <__udivmoddi4+0x2ce>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f240 8099 	bls.w	8000906 <__udivmoddi4+0x2ce>
 80007d4:	3802      	subs	r0, #2
 80007d6:	443c      	add	r4, r7
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	fa1f fe83 	uxth.w	lr, r3
 80007e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e4:	fb09 4413 	mls	r4, r9, r3, r4
 80007e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f0:	45a4      	cmp	ip, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1ce>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007fa:	f080 8082 	bcs.w	8000902 <__udivmoddi4+0x2ca>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d97f      	bls.n	8000902 <__udivmoddi4+0x2ca>
 8000802:	3b02      	subs	r3, #2
 8000804:	443c      	add	r4, r7
 8000806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800080a:	eba4 040c 	sub.w	r4, r4, ip
 800080e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000812:	4564      	cmp	r4, ip
 8000814:	4673      	mov	r3, lr
 8000816:	46e1      	mov	r9, ip
 8000818:	d362      	bcc.n	80008e0 <__udivmoddi4+0x2a8>
 800081a:	d05f      	beq.n	80008dc <__udivmoddi4+0x2a4>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x1fe>
 800081e:	ebb8 0203 	subs.w	r2, r8, r3
 8000822:	eb64 0409 	sbc.w	r4, r4, r9
 8000826:	fa04 f606 	lsl.w	r6, r4, r6
 800082a:	fa22 f301 	lsr.w	r3, r2, r1
 800082e:	431e      	orrs	r6, r3
 8000830:	40cc      	lsrs	r4, r1
 8000832:	e9c5 6400 	strd	r6, r4, [r5]
 8000836:	2100      	movs	r1, #0
 8000838:	e74f      	b.n	80006da <__udivmoddi4+0xa2>
 800083a:	fbb1 fcf2 	udiv	ip, r1, r2
 800083e:	0c01      	lsrs	r1, r0, #16
 8000840:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000844:	b280      	uxth	r0, r0
 8000846:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800084a:	463b      	mov	r3, r7
 800084c:	4638      	mov	r0, r7
 800084e:	463c      	mov	r4, r7
 8000850:	46b8      	mov	r8, r7
 8000852:	46be      	mov	lr, r7
 8000854:	2620      	movs	r6, #32
 8000856:	fbb1 f1f7 	udiv	r1, r1, r7
 800085a:	eba2 0208 	sub.w	r2, r2, r8
 800085e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000862:	e766      	b.n	8000732 <__udivmoddi4+0xfa>
 8000864:	4601      	mov	r1, r0
 8000866:	e718      	b.n	800069a <__udivmoddi4+0x62>
 8000868:	4610      	mov	r0, r2
 800086a:	e72c      	b.n	80006c6 <__udivmoddi4+0x8e>
 800086c:	f1c6 0220 	rsb	r2, r6, #32
 8000870:	fa2e f302 	lsr.w	r3, lr, r2
 8000874:	40b7      	lsls	r7, r6
 8000876:	40b1      	lsls	r1, r6
 8000878:	fa20 f202 	lsr.w	r2, r0, r2
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	430a      	orrs	r2, r1
 8000882:	fbb3 f8fe 	udiv	r8, r3, lr
 8000886:	b2bc      	uxth	r4, r7
 8000888:	fb0e 3318 	mls	r3, lr, r8, r3
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb08 f904 	mul.w	r9, r8, r4
 8000896:	40b0      	lsls	r0, r6
 8000898:	4589      	cmp	r9, r1
 800089a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800089e:	b280      	uxth	r0, r0
 80008a0:	d93e      	bls.n	8000920 <__udivmoddi4+0x2e8>
 80008a2:	1879      	adds	r1, r7, r1
 80008a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008a8:	d201      	bcs.n	80008ae <__udivmoddi4+0x276>
 80008aa:	4589      	cmp	r9, r1
 80008ac:	d81f      	bhi.n	80008ee <__udivmoddi4+0x2b6>
 80008ae:	eba1 0109 	sub.w	r1, r1, r9
 80008b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c4:	4542      	cmp	r2, r8
 80008c6:	d229      	bcs.n	800091c <__udivmoddi4+0x2e4>
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ce:	d2c4      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d0:	4542      	cmp	r2, r8
 80008d2:	d2c2      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d4:	f1a9 0102 	sub.w	r1, r9, #2
 80008d8:	443a      	add	r2, r7
 80008da:	e7be      	b.n	800085a <__udivmoddi4+0x222>
 80008dc:	45f0      	cmp	r8, lr
 80008de:	d29d      	bcs.n	800081c <__udivmoddi4+0x1e4>
 80008e0:	ebbe 0302 	subs.w	r3, lr, r2
 80008e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008e8:	3801      	subs	r0, #1
 80008ea:	46e1      	mov	r9, ip
 80008ec:	e796      	b.n	800081c <__udivmoddi4+0x1e4>
 80008ee:	eba7 0909 	sub.w	r9, r7, r9
 80008f2:	4449      	add	r1, r9
 80008f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fc:	fb09 f804 	mul.w	r8, r9, r4
 8000900:	e7db      	b.n	80008ba <__udivmoddi4+0x282>
 8000902:	4673      	mov	r3, lr
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1ce>
 8000906:	4650      	mov	r0, sl
 8000908:	e766      	b.n	80007d8 <__udivmoddi4+0x1a0>
 800090a:	4608      	mov	r0, r1
 800090c:	e6fd      	b.n	800070a <__udivmoddi4+0xd2>
 800090e:	443b      	add	r3, r7
 8000910:	3a02      	subs	r2, #2
 8000912:	e733      	b.n	800077c <__udivmoddi4+0x144>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	443b      	add	r3, r7
 800091a:	e71c      	b.n	8000756 <__udivmoddi4+0x11e>
 800091c:	4649      	mov	r1, r9
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x222>
 8000920:	eba1 0109 	sub.w	r1, r1, r9
 8000924:	46c4      	mov	ip, r8
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fb09 f804 	mul.w	r8, r9, r4
 800092e:	e7c4      	b.n	80008ba <__udivmoddi4+0x282>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <configureRCC_APB1>:
	//rise and repeat for all SPI buses
}


void configureRCC_APB1(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN);
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <configureRCC_APB1+0x54>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <configureRCC_APB1+0x54>)
 800093e:	f423 0381 	bic.w	r3, r3, #4227072	@ 0x408000
 8000942:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8000946:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <configureRCC_APB1+0x54>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	4a0e      	ldr	r2, [pc, #56]	@ (8000988 <configureRCC_APB1+0x54>)
 800094e:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000952:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST |  RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST;
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <configureRCC_APB1+0x54>)
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <configureRCC_APB1+0x54>)
 800095e:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8000962:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8000966:	6213      	str	r3, [r2, #32]
	__ASM("NOP");
 8000968:	bf00      	nop
	__ASM("NOP");
 800096a:	bf00      	nop
	RCC->APB1RSTR &= (uint16_t)~(RCC_APB1RSTR_TIM2RST | RCC_APB1RSTR_I2C2RST | RCC_APB1RSTR_SPI3RST | RCC_APB1RSTR_TIM6RST | RCC_APB1RSTR_TIM7RST);
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <configureRCC_APB1+0x54>)
 800096e:	6a1a      	ldr	r2, [r3, #32]
 8000970:	4905      	ldr	r1, [pc, #20]	@ (8000988 <configureRCC_APB1+0x54>)
 8000972:	f647 73ce 	movw	r3, #32718	@ 0x7fce
 8000976:	4013      	ands	r3, r2
 8000978:	620b      	str	r3, [r1, #32]
	__ASM("NOP");
 800097a:	bf00      	nop
	__ASM("NOP");
 800097c:	bf00      	nop
	//configure for more timers when necessary
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40023800 	.word	0x40023800

0800098c <configureRCC_APB2>:

void configureRCC_APB2(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	RCC->APB2ENR &=  ~(RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN |RCC_APB2ENR_SPI6EN| RCC_APB2ENR_SYSCFGEN /*important for interrupts and other sys init*/| RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN);
 8000990:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <configureRCC_APB2+0x48>)
 8000992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000994:	490f      	ldr	r1, [pc, #60]	@ (80009d4 <configureRCC_APB2+0x48>)
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <configureRCC_APB2+0x4c>)
 8000998:	4013      	ands	r3, r2
 800099a:	644b      	str	r3, [r1, #68]	@ 0x44
	RCC->APB2ENR |=  RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN |RCC_APB2ENR_SPI6EN| RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN;
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <configureRCC_APB2+0x48>)
 800099e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009a0:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <configureRCC_APB2+0x48>)
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <configureRCC_APB2+0x50>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	644b      	str	r3, [r1, #68]	@ 0x44

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST|RCC_APB2RSTR_SPI6RST|RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <configureRCC_APB2+0x48>)
 80009aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009ac:	4909      	ldr	r1, [pc, #36]	@ (80009d4 <configureRCC_APB2+0x48>)
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <configureRCC_APB2+0x54>)
 80009b0:	4313      	orrs	r3, r2
 80009b2:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 80009b4:	bf00      	nop
	__ASM("NOP");
 80009b6:	bf00      	nop
	RCC->APB2RSTR &= (uint16_t)~(RCC_APB2RSTR_SPI1RST | RCC_APB2RSTR_SPI4RST|RCC_APB2RSTR_SPI6RST| RCC_APB2RSTR_SYSCFGRST | RCC_APB2RSTR_USART6RST | RCC_APB2RSTR_TIM11RST);
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <configureRCC_APB2+0x48>)
 80009ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009bc:	4905      	ldr	r1, [pc, #20]	@ (80009d4 <configureRCC_APB2+0x48>)
 80009be:	f648 73df 	movw	r3, #36831	@ 0x8fdf
 80009c2:	4013      	ands	r3, r2
 80009c4:	624b      	str	r3, [r1, #36]	@ 0x24
	__ASM("NOP");
 80009c6:	bf00      	nop
	__ASM("NOP");
 80009c8:	bf00      	nop
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40023800 	.word	0x40023800
 80009d8:	ffdf8fde 	.word	0xffdf8fde
 80009dc:	00207021 	.word	0x00207021
 80009e0:	00247020 	.word	0x00247020

080009e4 <configureRCC_AHB1>:
void configureRCC_AHB1(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <configureRCC_AHB1+0x38>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	4a0b      	ldr	r2, [pc, #44]	@ (8000a1c <configureRCC_AHB1+0x38>)
 80009ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80009f2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <configureRCC_AHB1+0x38>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <configureRCC_AHB1+0x38>)
 80009fa:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 80009fe:	6313      	str	r3, [r2, #48]	@ 0x30
	__ASM("NOP");
 8000a00:	bf00      	nop
	__ASM("NOP");
 8000a02:	bf00      	nop
	RCC->AHB1RSTR &= (uint16_t)(~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST));
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <configureRCC_AHB1+0x38>)
 8000a06:	691a      	ldr	r2, [r3, #16]
 8000a08:	4904      	ldr	r1, [pc, #16]	@ (8000a1c <configureRCC_AHB1+0x38>)
 8000a0a:	f64f 7382 	movw	r3, #65410	@ 0xff82
 8000a0e:	4013      	ands	r3, r2
 8000a10:	610b      	str	r3, [r1, #16]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	40023800 	.word	0x40023800

08000a20 <GPIO_init>:
#include "gpio.h"
#include "stm32f4xx_hal.h"


void GPIO_init(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	460b      	mov	r3, r1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	7e3a      	ldrb	r2, [r7, #24]
 8000a4c:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	7f3a      	ldrb	r2, [r7, #28]
 8000a52:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a5a:	711a      	strb	r2, [r3, #4]

	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	79f9      	ldrb	r1, [r7, #7]
 8000a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	400a      	ands	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	79f9      	ldrb	r1, [r7, #7]
 8000a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	79b9      	ldrb	r1, [r7, #6]
 8000a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	400a      	ands	r2, r1
 8000ab0:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	79b9      	ldrb	r1, [r7, #6]
 8000aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	7e39      	ldrb	r1, [r7, #24]
 8000ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	7e39      	ldrb	r1, [r7, #24]
 8000af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	4619      	mov	r1, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS)); //clears the bit that we want to edit
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	7f39      	ldrb	r1, [r7, #28]
 8000b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	400a      	ands	r2, r1
 8000b22:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	7f39      	ldrb	r1, [r7, #28]
 8000b2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	60da      	str	r2, [r3, #12]

}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SX1272_init>:
    GPIO_TypeDef *port,
    unsigned long cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6278      	str	r0, [r7, #36]	@ 0x24
 8000b54:	6239      	str	r1, [r7, #32]
 8000b56:	61fa      	str	r2, [r7, #28]
 8000b58:	61bb      	str	r3, [r7, #24]

	SPI_Config spiLoraConfig = SPI_CONFIG_DEFAULT; // Using default settings as base
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b86:	2202      	movs	r2, #2
 8000b88:	f362 03c5 	bfi	r3, r2, #3, #3
 8000b8c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000b9c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	spiLoraConfig.CPHA       = SPI_CPHA_FIRST;     // Begin on first clock edge
 8000ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	spiLoraConfig.CPOL       = SPI_CPOL0;          // Idle clock low
 8000bb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bb8:	f023 0302 	bic.w	r3, r3, #2
 8000bbc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	static SPI_t base;
	base = SPI_init(SPI6, &spiLoraConfig);
 8000bc0:	4c2f      	ldr	r4, [pc, #188]	@ (8000c80 <SX1272_init+0x134>)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000bc8:	492e      	ldr	r1, [pc, #184]	@ (8000c84 <SX1272_init+0x138>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 feaa 	bl	8003924 <SPI_init>
 8000bd0:	4625      	mov	r5, r4
 8000bd2:	463c      	mov	r4, r7
 8000bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bdc:	e885 0003 	stmia.w	r5, {r0, r1}
	lora->base = &base;
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	4a27      	ldr	r2, [pc, #156]	@ (8000c80 <SX1272_init+0x134>)
 8000be4:	601a      	str	r2, [r3, #0]

  //SPI_init(&lora->base, COMM_LORA, SPI6, MODE8, port, cs);
  lora->standby      = SX1272_standby;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <SX1272_init+0x13c>)
 8000bea:	60da      	str	r2, [r3, #12]
  lora->enableBoost  = SX1272_enableBoost;
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	4a27      	ldr	r2, [pc, #156]	@ (8000c8c <SX1272_init+0x140>)
 8000bf0:	609a      	str	r2, [r3, #8]
  lora->transmit     = SX1272_transmit;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	4a26      	ldr	r2, [pc, #152]	@ (8000c90 <SX1272_init+0x144>)
 8000bf6:	611a      	str	r2, [r3, #16]
  lora->startReceive = SX1272_startReceive;
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <SX1272_init+0x148>)
 8000bfc:	615a      	str	r2, [r3, #20]
  lora->readReceive  = SX1272_readReceive;
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	4a25      	ldr	r2, [pc, #148]	@ (8000c98 <SX1272_init+0x14c>)
 8000c02:	619a      	str	r2, [r3, #24]
  lora->clearIRQ     = SX1272_clearIRQ;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	4a25      	ldr	r2, [pc, #148]	@ (8000c9c <SX1272_init+0x150>)
 8000c08:	61da      	str	r2, [r3, #28]


  _SX1272_setMode(lora, SX1272_MODE_SLEEP); // Set mode to sleep
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c0e:	f000 f8ad 	bl	8000d6c <_SX1272_setMode>
  //MSB remains the same as default value of E4
 // SX1272_writeRegister(lora, SX1272_REG_FR_MIB, (0xE6)); //sets middle byte
  //SX1272_writeRegister(lora, SX1272_REG_FR_LSB, (0x67)); //sets last byte

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	2101      	movs	r1, #1
 8000c16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c18:	f000 f9c8 	bl	8000fac <SX1272_writeRegister>
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 8000c1c:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	b25a      	sxtb	r2, r3
 8000c24:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	211d      	movs	r1, #29
 8000c36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c38:	f000 f9b8 	bl	8000fac <SX1272_writeRegister>
  );
  /* clang-format on */

  /** @todo set spreading factor */
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 8000c3c:	2294      	movs	r2, #148	@ 0x94
 8000c3e:	211e      	movs	r1, #30
 8000c40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c42:	f000 f9b3 	bl	8000fac <SX1272_writeRegister>

  //Set both Tx and Rx FIFO base addresses to 0x00
  SX1272_writeRegister(lora, SX1272_REG_FIFO_TX_BASE_ADDR, 0x00); // Tx starts at 0x00
 8000c46:	2200      	movs	r2, #0
 8000c48:	210e      	movs	r1, #14
 8000c4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c4c:	f000 f9ae 	bl	8000fac <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_RX_BASE_ADDR, 0x00); // Rx starts at 0x00
 8000c50:	2200      	movs	r2, #0
 8000c52:	210f      	movs	r1, #15
 8000c54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c56:	f000 f9a9 	bl	8000fac <SX1272_writeRegister>


  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	2122      	movs	r1, #34	@ 0x22
 8000c5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c60:	f000 f9a4 	bl	8000fac <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000c64:	2220      	movs	r2, #32
 8000c66:	2123      	movs	r1, #35	@ 0x23
 8000c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c6a:	f000 f99f 	bl	8000fac <SX1272_writeRegister>

  _SX1272_setMode(lora, SX1272_MODE_STDBY); // Set mode to Standby mode!
 8000c6e:	2101      	movs	r1, #1
 8000c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c72:	f000 f87b 	bl	8000d6c <_SX1272_setMode>


}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	@ 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000005c 	.word	0x2000005c
 8000c84:	40015400 	.word	0x40015400
 8000c88:	08000e3d 	.word	0x08000e3d
 8000c8c:	08000da9 	.word	0x08000da9
 8000c90:	08000e55 	.word	0x08000e55
 8000c94:	08000ecb 	.word	0x08000ecb
 8000c98:	08000f13 	.word	0x08000f13
 8000c9c:	08000f8b 	.word	0x08000f8b

08000ca0 <Dummy_Transmit>:
  return msg;
}


LoRa_Packet Dummy_Transmit()
{
 8000ca0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000ca4:	b08e      	sub	sp, #56	@ 0x38
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	466b      	mov	r3, sp
 8000cac:	461e      	mov	r6, r3
	LoRa_Packet msg;
	uint8_t id = 0x06;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t SIZE = 32;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t data[SIZE];
 8000cba:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000cc4:	b2cb      	uxtb	r3, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4698      	mov	r8, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ce0:	b2cb      	uxtb	r3, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	00eb      	lsls	r3, r5, #3
 8000cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf6:	00e2      	lsls	r2, r4, #3
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	3307      	adds	r3, #7
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	ebad 0d03 	sub.w	sp, sp, r3
 8000d04:	466b      	mov	r3, sp
 8000d06:	3300      	adds	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	msg.id = id;
 8000d0a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d0e:	733b      	strb	r3, [r7, #12]
	msg.data[0]=0x06;
 8000d10:	2306      	movs	r3, #6
 8000d12:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 1; i <SIZE; i++)
 8000d14:	2301      	movs	r3, #1
 8000d16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d1a:	e00c      	b.n	8000d36 <Dummy_Transmit+0x96>
	{
		msg.data[i] = i;
 8000d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d20:	3338      	adds	r3, #56	@ 0x38
 8000d22:	443b      	add	r3, r7
 8000d24:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000d28:	f803 2c2b 	strb.w	r2, [r3, #-43]
	for(uint8_t i = 1; i <SIZE; i++)
 8000d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d30:	3301      	adds	r3, #1
 8000d32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d36:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000d3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3ec      	bcc.n	8000d1c <Dummy_Transmit+0x7c>
	}
	return msg;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	461d      	mov	r5, r3
 8000d46:	f107 040c 	add.w	r4, r7, #12
 8000d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4c:	6028      	str	r0, [r5, #0]
 8000d4e:	6069      	str	r1, [r5, #4]
 8000d50:	60aa      	str	r2, [r5, #8]
 8000d52:	60eb      	str	r3, [r5, #12]
 8000d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d56:	6128      	str	r0, [r5, #16]
 8000d58:	6169      	str	r1, [r5, #20]
 8000d5a:	61aa      	str	r2, [r5, #24]
 8000d5c:	61eb      	str	r3, [r5, #28]
 8000d5e:	46b5      	mov	sp, r6
}
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	3738      	adds	r7, #56	@ 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000d6a:	4770      	bx	lr

08000d6c <_SX1272_setMode>:
 *
 * @param lora         Pointer to LoRa struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f94a 	bl	8001014 <SX1272_readRegister>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f023 0307 	bic.w	r3, r3, #7
 8000d8a:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	461a      	mov	r2, r3
 8000d98:	2101      	movs	r1, #1
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f906 	bl	8000fac <SX1272_writeRegister>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SX1272_enableBoost>:
 * @param  enable Boolean value for the enable toggle.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 8000db4:	2109      	movs	r1, #9
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f92c 	bl	8001014 <SX1272_readRegister>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  regPaConfig         |= SX1272_PA_SELECT;								//Set PA Boost Select
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dc6:	73fb      	strb	r3, [r7, #15]
  regPaConfig 		  |= 0x0F;											//Set Gain to MAX
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f043 030f 	orr.w	r3, r3, #15
 8000dce:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2109      	movs	r1, #9
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f8e8 	bl	8000fac <SX1272_writeRegister>
  regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG);		 //DEBUGGING -  Read back in current config and ensure its as expected
 8000ddc:	2109      	movs	r1, #9
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 f918 	bl	8001014 <SX1272_readRegister>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint8_t regPaDac = SX1272_readRegister(lora, 0x5A);
 8000de8:	215a      	movs	r1, #90	@ 0x5a
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f912 	bl	8001014 <SX1272_readRegister>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73bb      	strb	r3, [r7, #14]
  regPaDac |= 0x07;														//Set PaDac to +20dbm mode
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	f043 0307 	orr.w	r3, r3, #7
 8000dfa:	73bb      	strb	r3, [r7, #14]
  SX1272_writeRegister(lora, 0x5A, regPaDac);
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	215a      	movs	r1, #90	@ 0x5a
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f8d2 	bl	8000fac <SX1272_writeRegister>
  uint8_t regOpC = SX1272_readRegister(lora, 0x0B);
 8000e08:	210b      	movs	r1, #11
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f902 	bl	8001014 <SX1272_readRegister>
 8000e10:	4603      	mov	r3, r0
 8000e12:	737b      	strb	r3, [r7, #13]
  regOpC |= 0b00100000;														//Disable Overcurrent protection
 8000e14:	7b7b      	ldrb	r3, [r7, #13]
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	737b      	strb	r3, [r7, #13]
  SX1272_writeRegister(lora, 0x0B, regOpC);
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	210b      	movs	r1, #11
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f8c2 	bl	8000fac <SX1272_writeRegister>
  regPaDac = SX1272_readRegister(lora, 0x0B);							//DEBUGGING - Read back in current config and ensure its as expected
 8000e28:	210b      	movs	r1, #11
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f8f2 	bl	8001014 <SX1272_readRegister>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73bb      	strb	r3, [r7, #14]
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000e44:	2101      	movs	r1, #1
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff90 	bl	8000d6c <_SX1272_setMode>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff83 	bl	8000d6c <_SX1272_setMode>
  SX1272_enableBoost(lora, true);
 8000e66:	2101      	movs	r1, #1
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff9d 	bl	8000da8 <SX1272_enableBoost>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 8000e6e:	2240      	movs	r2, #64	@ 0x40
 8000e70:	2140      	movs	r1, #64	@ 0x40
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f89a 	bl	8000fac <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 8000e78:	2208      	movs	r2, #8
 8000e7a:	2112      	movs	r1, #18
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f895 	bl	8000fac <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 8000e82:	2200      	movs	r2, #0
 8000e84:	210d      	movs	r1, #13
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f890 	bl	8000fac <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e00b      	b.n	8000eaa <SX1272_transmit+0x56>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f884 	bl	8000fac <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b1f      	cmp	r3, #31
 8000eae:	ddf0      	ble.n	8000e92 <SX1272_transmit+0x3e>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	791b      	ldrb	r3, [r3, #4]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff55 	bl	8000d6c <_SX1272_setMode>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff49 	bl	8000d6c <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2140      	movs	r1, #64	@ 0x40
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f864 	bl	8000fac <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 8000ee4:	2240      	movs	r2, #64	@ 0x40
 8000ee6:	2112      	movs	r1, #18
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f85f 	bl	8000fac <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210d      	movs	r1, #13
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f85a 	bl	8000fac <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2205      	movs	r2, #5
 8000efc:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff31 	bl	8000d6c <_SX1272_setMode>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 8000f12:	b590      	push	{r4, r7, lr}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 8000f20:	2240      	movs	r2, #64	@ 0x40
 8000f22:	2112      	movs	r1, #18
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f841 	bl	8000fac <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 8000f2a:	2113      	movs	r1, #19
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 f871 	bl	8001014 <SX1272_readRegister>
 8000f32:	4603      	mov	r3, r0
 8000f34:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 8000f36:	2110      	movs	r1, #16
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f000 f86b 	bl	8001014 <SX1272_readRegister>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 8000f42:	7cfa      	ldrb	r2, [r7, #19]
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d901      	bls.n	8000f4e <SX1272_readReceive+0x3c>
    return false;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e019      	b.n	8000f82 <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 8000f4e:	7cbb      	ldrb	r3, [r7, #18]
 8000f50:	461a      	mov	r2, r3
 8000f52:	210d      	movs	r1, #13
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 f829 	bl	8000fac <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e00b      	b.n	8000f78 <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	18d4      	adds	r4, r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f853 	bl	8001014 <SX1272_readRegister>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	7cfb      	ldrb	r3, [r7, #19]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbef      	blt.n	8000f60 <SX1272_readReceive+0x4e>
  }

  return true;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2112      	movs	r1, #18
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f805 	bl	8000fac <SX1272_writeRegister>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	70bb      	strb	r3, [r7, #2]
  SPI_t *spi   = lora->base;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]

  //Pull CS Low
  LORA_CS_GPIO.port->ODR &= ~(LORA_CS);
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <SX1272_writeRegister+0x64>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <SX1272_writeRegister+0x64>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fd0:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fd8:	72fb      	strb	r3, [r7, #11]
  spi->transmit(spi, payload);      // Transmit payload
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	7afa      	ldrb	r2, [r7, #11]
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	4798      	blx	r3
  spi->transmit(spi, data);         // Transmit write data
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	78ba      	ldrb	r2, [r7, #2]
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	4798      	blx	r3

  //Set CS High
  LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <SX1272_writeRegister+0x64>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <SX1272_writeRegister+0x64>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001004:	615a      	str	r2, [r3, #20]

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000500 	.word	0x20000500

08001014 <SX1272_readRegister>:

uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	75fb      	strb	r3, [r7, #23]
  SPI_t *spi       = lora->base;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]

  //Pull CS Low
   LORA_CS_GPIO.port->ODR &= ~(LORA_CS);
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <SX1272_readRegister+0x68>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <SX1272_readRegister+0x68>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001038:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001040:	73fb      	strb	r3, [r7, #15]
  response        = spi->transmit(spi, payload); // Transmit payload
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	b292      	uxth	r2, r2
 800104a:	4611      	mov	r1, r2
 800104c:	6938      	ldr	r0, [r7, #16]
 800104e:	4798      	blx	r3
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
  response        = spi->transmit(spi, 0xFF);    // Transmit dummy data and reasd response
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	21ff      	movs	r1, #255	@ 0xff
 800105a:	6938      	ldr	r0, [r7, #16]
 800105c:	4798      	blx	r3
 800105e:	4603      	mov	r3, r0
 8001060:	75fb      	strb	r3, [r7, #23]

  //Set CS High
  LORA_CS_GPIO.port->ODR |= (LORA_CS);
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SX1272_readRegister+0x68>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <SX1272_readRegister+0x68>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001070:	615a      	str	r2, [r3, #20]

  return response;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000500 	.word	0x20000500

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db12      	blt.n	80010f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	490a      	ldr	r1, [pc, #40]	@ (8001100 <__NVIC_DisableIRQ+0x44>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	3320      	adds	r3, #32
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
}
 80010ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ee:	f3bf 8f6f 	isb	sy
}
 80010f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	@ (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	@ (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 800115e:	f002 fdf5 	bl	8003d4c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8001162:	f001 fef1 	bl	8002f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	configureRCC_APB1();
 8001166:	f7ff fbe5 	bl	8000934 <configureRCC_APB1>
	configureRCC_APB2();
 800116a:	f7ff fc0f 	bl	800098c <configureRCC_APB2>
	configureRCC_AHB1();
 800116e:	f7ff fc39 	bl	80009e4 <configureRCC_AHB1>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	HAL_Delay(100); //important!!
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f002 fe5c 	bl	8003e30 <HAL_Delay>

	MX_GPIO_Init();
 8001178:	f001 ff56 	bl	8003028 <MX_GPIO_Init>
	MX_I2C2_Init();
 800117c:	f001 ffbc 	bl	80030f8 <MX_I2C2_Init>

	//-------------------- SMD LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION
	//PG0 -> Power LED
	GPIO_init(&LED_1, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0C);
 8001180:	230c      	movs	r3, #12
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	2301      	movs	r3, #1
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2300      	movs	r3, #0
 800118e:	2201      	movs	r2, #1
 8001190:	49b0      	ldr	r1, [pc, #704]	@ (8001454 <main+0x2fc>)
 8001192:	48b1      	ldr	r0, [pc, #708]	@ (8001458 <main+0x300>)
 8001194:	f7ff fc44 	bl	8000a20 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&LED_2, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0B);
 8001198:	230b      	movs	r3, #11
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2201      	movs	r2, #1
 80011a8:	49aa      	ldr	r1, [pc, #680]	@ (8001454 <main+0x2fc>)
 80011aa:	48ac      	ldr	r0, [pc, #688]	@ (800145c <main+0x304>)
 80011ac:	f7ff fc38 	bl	8000a20 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&LED_3, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x0A);
 80011b0:	230a      	movs	r3, #10
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	2201      	movs	r2, #1
 80011c0:	49a4      	ldr	r1, [pc, #656]	@ (8001454 <main+0x2fc>)
 80011c2:	48a7      	ldr	r0, [pc, #668]	@ (8001460 <main+0x308>)
 80011c4:	f7ff fc2c 	bl	8000a20 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&LED_4, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 80011c8:	2309      	movs	r3, #9
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	2201      	movs	r2, #1
 80011d8:	499e      	ldr	r1, [pc, #632]	@ (8001454 <main+0x2fc>)
 80011da:	48a2      	ldr	r0, [pc, #648]	@ (8001464 <main+0x30c>)
 80011dc:	f7ff fc20 	bl	8000a20 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&LED_5, GPIOA, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x08);
 80011e0:	2308      	movs	r3, #8
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2301      	movs	r3, #1
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2301      	movs	r3, #1
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	2201      	movs	r2, #1
 80011f0:	4998      	ldr	r1, [pc, #608]	@ (8001454 <main+0x2fc>)
 80011f2:	489d      	ldr	r0, [pc, #628]	@ (8001468 <main+0x310>)
 80011f4:	f7ff fc14 	bl	8000a20 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&LED_6, GPIOC, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_UP, 0x09);
 80011f8:	2309      	movs	r3, #9
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2301      	movs	r3, #1
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	2201      	movs	r2, #1
 8001208:	4998      	ldr	r1, [pc, #608]	@ (800146c <main+0x314>)
 800120a:	4899      	ldr	r0, [pc, #612]	@ (8001470 <main+0x318>)
 800120c:	f7ff fc08 	bl	8000a20 <GPIO_init>
	//-------------------- LED GPIO --------------------------
  	//make the pullup/down selection be internal pulldowns to match external circuit
	//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION

	//PG0 -> Power LED
	GPIO_init(&led_power, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001210:	2300      	movs	r3, #0
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2302      	movs	r3, #2
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2301      	movs	r3, #1
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	2201      	movs	r2, #1
 8001220:	4994      	ldr	r1, [pc, #592]	@ (8001474 <main+0x31c>)
 8001222:	4895      	ldr	r0, [pc, #596]	@ (8001478 <main+0x320>)
 8001224:	f7ff fbfc 	bl	8000a20 <GPIO_init>
	//PG1 -> local LED
	GPIO_init(&led_local, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8001228:	2301      	movs	r3, #1
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2302      	movs	r3, #2
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	2301      	movs	r3, #1
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	2201      	movs	r2, #1
 8001238:	498e      	ldr	r1, [pc, #568]	@ (8001474 <main+0x31c>)
 800123a:	4890      	ldr	r0, [pc, #576]	@ (800147c <main+0x324>)
 800123c:	f7ff fbf0 	bl	8000a20 <GPIO_init>
	//PE7 -> remote LED
	GPIO_init(&led_remote, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x07);
 8001240:	2307      	movs	r3, #7
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	2302      	movs	r3, #2
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2301      	movs	r3, #1
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2201      	movs	r2, #1
 8001250:	498b      	ldr	r1, [pc, #556]	@ (8001480 <main+0x328>)
 8001252:	488c      	ldr	r0, [pc, #560]	@ (8001484 <main+0x32c>)
 8001254:	f7ff fbe4 	bl	8000a20 <GPIO_init>
	//PE8 -> transducer LED
	GPIO_init(&led_transducer, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001258:	2308      	movs	r3, #8
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2302      	movs	r3, #2
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2201      	movs	r2, #1
 8001268:	4985      	ldr	r1, [pc, #532]	@ (8001480 <main+0x328>)
 800126a:	4887      	ldr	r0, [pc, #540]	@ (8001488 <main+0x330>)
 800126c:	f7ff fbd8 	bl	8000a20 <GPIO_init>
	//PG5 -> N2O LED
	GPIO_init(&led_n2o, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8001270:	2305      	movs	r3, #5
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2302      	movs	r3, #2
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	2301      	movs	r3, #1
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2300      	movs	r3, #0
 800127e:	2201      	movs	r2, #1
 8001280:	497c      	ldr	r1, [pc, #496]	@ (8001474 <main+0x31c>)
 8001282:	4882      	ldr	r0, [pc, #520]	@ (800148c <main+0x334>)
 8001284:	f7ff fbcc 	bl	8000a20 <GPIO_init>
	//PG6 -> O2 LED
	GPIO_init(&led_o2, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x06);
 8001288:	2306      	movs	r3, #6
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2302      	movs	r3, #2
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	2301      	movs	r3, #1
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	2201      	movs	r2, #1
 8001298:	4976      	ldr	r1, [pc, #472]	@ (8001474 <main+0x31c>)
 800129a:	487d      	ldr	r0, [pc, #500]	@ (8001490 <main+0x338>)
 800129c:	f7ff fbc0 	bl	8000a20 <GPIO_init>

	//-------------------- Control GPIO --------------------------

	//PF15-> Activate_sys SW
	GPIO_init(&activate_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 80012a0:	230f      	movs	r3, #15
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	2200      	movs	r2, #0
 80012b0:	4978      	ldr	r1, [pc, #480]	@ (8001494 <main+0x33c>)
 80012b2:	4879      	ldr	r0, [pc, #484]	@ (8001498 <main+0x340>)
 80012b4:	f7ff fbb4 	bl	8000a20 <GPIO_init>
	//PF14-> Local_control SW
	GPIO_init(&local_control_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 80012b8:	230e      	movs	r3, #14
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2302      	movs	r3, #2
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	2301      	movs	r3, #1
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	2200      	movs	r2, #0
 80012c8:	4972      	ldr	r1, [pc, #456]	@ (8001494 <main+0x33c>)
 80012ca:	4874      	ldr	r0, [pc, #464]	@ (800149c <main+0x344>)
 80012cc:	f7ff fba8 	bl	8000a20 <GPIO_init>
	//PF13-> N20_ISO SW
	GPIO_init(&N2O_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 80012d0:	230d      	movs	r3, #13
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2302      	movs	r3, #2
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2301      	movs	r3, #1
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	2200      	movs	r2, #0
 80012e0:	496c      	ldr	r1, [pc, #432]	@ (8001494 <main+0x33c>)
 80012e2:	486f      	ldr	r0, [pc, #444]	@ (80014a0 <main+0x348>)
 80012e4:	f7ff fb9c 	bl	8000a20 <GPIO_init>
	//PF12-> O2_ISO SW
	GPIO_init(&O2_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 80012e8:	230c      	movs	r3, #12
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2302      	movs	r3, #2
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2200      	movs	r2, #0
 80012f8:	4966      	ldr	r1, [pc, #408]	@ (8001494 <main+0x33c>)
 80012fa:	486a      	ldr	r0, [pc, #424]	@ (80014a4 <main+0x34c>)
 80012fc:	f7ff fb90 	bl	8000a20 <GPIO_init>
	//PF11-> IGNITION_ISO SW
	GPIO_init(&IGNITION_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001300:	230b      	movs	r3, #11
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2302      	movs	r3, #2
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	2301      	movs	r3, #1
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	4960      	ldr	r1, [pc, #384]	@ (8001494 <main+0x33c>)
 8001312:	4865      	ldr	r0, [pc, #404]	@ (80014a8 <main+0x350>)
 8001314:	f7ff fb84 	bl	8000a20 <GPIO_init>
	//PB0-> N2O_DEADMAN_SW
	GPIO_init(&N2O_DEAD_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8001318:	2300      	movs	r3, #0
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2302      	movs	r3, #2
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2300      	movs	r3, #0
 8001326:	2200      	movs	r2, #0
 8001328:	4960      	ldr	r1, [pc, #384]	@ (80014ac <main+0x354>)
 800132a:	4861      	ldr	r0, [pc, #388]	@ (80014b0 <main+0x358>)
 800132c:	f7ff fb78 	bl	8000a20 <GPIO_init>
	//PC5-> O2_DEADMAN_SW
	GPIO_init(&O2_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8001330:	2305      	movs	r3, #5
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	2302      	movs	r3, #2
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	2301      	movs	r3, #1
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	2200      	movs	r2, #0
 8001340:	494a      	ldr	r1, [pc, #296]	@ (800146c <main+0x314>)
 8001342:	485c      	ldr	r0, [pc, #368]	@ (80014b4 <main+0x35c>)
 8001344:	f7ff fb6c 	bl	8000a20 <GPIO_init>
	//PC4-> IGNITE_DEADMAN_SW
	GPIO_init(&IGNITE_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x04);
 8001348:	2304      	movs	r3, #4
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2302      	movs	r3, #2
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2301      	movs	r3, #1
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	2200      	movs	r2, #0
 8001358:	4944      	ldr	r1, [pc, #272]	@ (800146c <main+0x314>)
 800135a:	4857      	ldr	r0, [pc, #348]	@ (80014b8 <main+0x360>)
 800135c:	f7ff fb60 	bl	8000a20 <GPIO_init>

	//-------------------- IGNITE ACTUATION GPIO --------------------------
	GPIO_init(&Ignition1_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8001360:	230f      	movs	r3, #15
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2302      	movs	r3, #2
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	2301      	movs	r3, #1
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	2201      	movs	r2, #1
 8001370:	4952      	ldr	r1, [pc, #328]	@ (80014bc <main+0x364>)
 8001372:	4853      	ldr	r0, [pc, #332]	@ (80014c0 <main+0x368>)
 8001374:	f7ff fb54 	bl	8000a20 <GPIO_init>
	GPIO_init(&Ignition1_OP ,GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8001378:	230e      	movs	r3, #14
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2302      	movs	r3, #2
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	2301      	movs	r3, #1
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	2201      	movs	r2, #1
 8001388:	494c      	ldr	r1, [pc, #304]	@ (80014bc <main+0x364>)
 800138a:	484e      	ldr	r0, [pc, #312]	@ (80014c4 <main+0x36c>)
 800138c:	f7ff fb48 	bl	8000a20 <GPIO_init>



	GPIO_init(&Ignition2_ARM, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x03);
 8001390:	2303      	movs	r3, #3
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2302      	movs	r3, #2
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2301      	movs	r3, #1
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2300      	movs	r3, #0
 800139e:	2201      	movs	r2, #1
 80013a0:	4934      	ldr	r1, [pc, #208]	@ (8001474 <main+0x31c>)
 80013a2:	4849      	ldr	r0, [pc, #292]	@ (80014c8 <main+0x370>)
 80013a4:	f7ff fb3c 	bl	8000a20 <GPIO_init>
	GPIO_init(&Ignition2_OP ,GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x02);
 80013a8:	2302      	movs	r3, #2
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2302      	movs	r3, #2
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	2201      	movs	r2, #1
 80013b8:	492e      	ldr	r1, [pc, #184]	@ (8001474 <main+0x31c>)
 80013ba:	4844      	ldr	r0, [pc, #272]	@ (80014cc <main+0x374>)
 80013bc:	f7ff fb30 	bl	8000a20 <GPIO_init>
	//Disarm Ignition circuit
	Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 80013c0:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <main+0x370>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <main+0x370>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f042 0208 	orr.w	r2, r2, #8
 80013ce:	615a      	str	r2, [r3, #20]
	Ignition2_OP.port->ODR |= (IGNITION2_OP);
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <main+0x374>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	4b3d      	ldr	r3, [pc, #244]	@ (80014cc <main+0x374>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	615a      	str	r2, [r3, #20]


	//-------------------- RELAY ACTUATION GPIO --------------------------
	//Relay 1 ->PURGE Relay
	GPIO_init(&CH1_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 80013e0:	230d      	movs	r3, #13
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2302      	movs	r3, #2
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2201      	movs	r2, #1
 80013f0:	492e      	ldr	r1, [pc, #184]	@ (80014ac <main+0x354>)
 80013f2:	4837      	ldr	r0, [pc, #220]	@ (80014d0 <main+0x378>)
 80013f4:	f7ff fb14 	bl	8000a20 <GPIO_init>
	GPIO_init(&CH1_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0E);
 80013f8:	230e      	movs	r3, #14
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2302      	movs	r3, #2
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2301      	movs	r3, #1
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2201      	movs	r2, #1
 8001408:	4928      	ldr	r1, [pc, #160]	@ (80014ac <main+0x354>)
 800140a:	4832      	ldr	r0, [pc, #200]	@ (80014d4 <main+0x37c>)
 800140c:	f7ff fb08 	bl	8000a20 <GPIO_init>
	GPIO_init(&CH1_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN,  0x0B);
 8001410:	230b      	movs	r3, #11
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2302      	movs	r3, #2
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	2301      	movs	r3, #1
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	2200      	movs	r2, #0
 8001420:	4922      	ldr	r1, [pc, #136]	@ (80014ac <main+0x354>)
 8001422:	482d      	ldr	r0, [pc, #180]	@ (80014d8 <main+0x380>)
 8001424:	f7ff fafc 	bl	8000a20 <GPIO_init>

	//Relay 2 -> O2 Relay
	GPIO_init(&CH2_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001428:	230a      	movs	r3, #10
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2302      	movs	r3, #2
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	2301      	movs	r3, #1
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	2201      	movs	r2, #1
 8001438:	491c      	ldr	r1, [pc, #112]	@ (80014ac <main+0x354>)
 800143a:	4828      	ldr	r0, [pc, #160]	@ (80014dc <main+0x384>)
 800143c:	f7ff faf0 	bl	8000a20 <GPIO_init>
	GPIO_init(&CH2_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001440:	230c      	movs	r3, #12
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2302      	movs	r3, #2
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	2301      	movs	r3, #1
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	2201      	movs	r2, #1
 8001450:	e046      	b.n	80014e0 <main+0x388>
 8001452:	bf00      	nop
 8001454:	40020000 	.word	0x40020000
 8001458:	20000380 	.word	0x20000380
 800145c:	20000398 	.word	0x20000398
 8001460:	200003b0 	.word	0x200003b0
 8001464:	200003c8 	.word	0x200003c8
 8001468:	200003e0 	.word	0x200003e0
 800146c:	40020800 	.word	0x40020800
 8001470:	200003f8 	.word	0x200003f8
 8001474:	40021800 	.word	0x40021800
 8001478:	200002f0 	.word	0x200002f0
 800147c:	20000308 	.word	0x20000308
 8001480:	40021000 	.word	0x40021000
 8001484:	20000320 	.word	0x20000320
 8001488:	20000338 	.word	0x20000338
 800148c:	20000350 	.word	0x20000350
 8001490:	20000368 	.word	0x20000368
 8001494:	40021400 	.word	0x40021400
 8001498:	20000410 	.word	0x20000410
 800149c:	20000428 	.word	0x20000428
 80014a0:	20000458 	.word	0x20000458
 80014a4:	20000470 	.word	0x20000470
 80014a8:	20000488 	.word	0x20000488
 80014ac:	40020400 	.word	0x40020400
 80014b0:	200004a0 	.word	0x200004a0
 80014b4:	200004b8 	.word	0x200004b8
 80014b8:	200004d0 	.word	0x200004d0
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	20000290 	.word	0x20000290
 80014c4:	200002a8 	.word	0x200002a8
 80014c8:	200002c0 	.word	0x200002c0
 80014cc:	200002d8 	.word	0x200002d8
 80014d0:	20000170 	.word	0x20000170
 80014d4:	20000188 	.word	0x20000188
 80014d8:	200001a0 	.word	0x200001a0
 80014dc:	200001b8 	.word	0x200001b8
 80014e0:	49a0      	ldr	r1, [pc, #640]	@ (8001764 <main+0x60c>)
 80014e2:	48a1      	ldr	r0, [pc, #644]	@ (8001768 <main+0x610>)
 80014e4:	f7ff fa9c 	bl	8000a20 <GPIO_init>
	GPIO_init(&CH2_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 80014e8:	230f      	movs	r3, #15
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2302      	movs	r3, #2
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	499a      	ldr	r1, [pc, #616]	@ (8001764 <main+0x60c>)
 80014fa:	489c      	ldr	r0, [pc, #624]	@ (800176c <main+0x614>)
 80014fc:	f7ff fa90 	bl	8000a20 <GPIO_init>

	//Relay 3 -> N20 Relay
	GPIO_init(&CH3_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8001500:	230b      	movs	r3, #11
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	2302      	movs	r3, #2
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	2301      	movs	r3, #1
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	2201      	movs	r2, #1
 8001510:	4997      	ldr	r1, [pc, #604]	@ (8001770 <main+0x618>)
 8001512:	4898      	ldr	r0, [pc, #608]	@ (8001774 <main+0x61c>)
 8001514:	f7ff fa84 	bl	8000a20 <GPIO_init>
	GPIO_init(&CH3_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8001518:	230c      	movs	r3, #12
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2302      	movs	r3, #2
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	2301      	movs	r3, #1
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	2201      	movs	r2, #1
 8001528:	4991      	ldr	r1, [pc, #580]	@ (8001770 <main+0x618>)
 800152a:	4893      	ldr	r0, [pc, #588]	@ (8001778 <main+0x620>)
 800152c:	f7ff fa78 	bl	8000a20 <GPIO_init>
	GPIO_init(&CH3_MON, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8001530:	2308      	movs	r3, #8
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2302      	movs	r3, #2
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	2301      	movs	r3, #1
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2300      	movs	r3, #0
 800153e:	2201      	movs	r2, #1
 8001540:	498b      	ldr	r1, [pc, #556]	@ (8001770 <main+0x618>)
 8001542:	488e      	ldr	r0, [pc, #568]	@ (800177c <main+0x624>)
 8001544:	f7ff fa6c 	bl	8000a20 <GPIO_init>

	//Relay 4 //for future expansion
	 GPIO_init(&CH4_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 8001548:	2309      	movs	r3, #9
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2302      	movs	r3, #2
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	2301      	movs	r3, #1
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	2201      	movs	r2, #1
 8001558:	4985      	ldr	r1, [pc, #532]	@ (8001770 <main+0x618>)
 800155a:	4889      	ldr	r0, [pc, #548]	@ (8001780 <main+0x628>)
 800155c:	f7ff fa60 	bl	8000a20 <GPIO_init>
	 GPIO_init(&CH4_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8001560:	230a      	movs	r3, #10
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	2302      	movs	r3, #2
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	2301      	movs	r3, #1
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	2201      	movs	r2, #1
 8001570:	497f      	ldr	r1, [pc, #508]	@ (8001770 <main+0x618>)
 8001572:	4884      	ldr	r0, [pc, #528]	@ (8001784 <main+0x62c>)
 8001574:	f7ff fa54 	bl	8000a20 <GPIO_init>
	 GPIO_init(&CH4_MON, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8001578:	230d      	movs	r3, #13
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2302      	movs	r3, #2
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	4979      	ldr	r1, [pc, #484]	@ (8001770 <main+0x618>)
 800158a:	487f      	ldr	r0, [pc, #508]	@ (8001788 <main+0x630>)
 800158c:	f7ff fa48 	bl	8000a20 <GPIO_init>



	 GPIO_init(&RF_SW, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0A);
 8001590:	230a      	movs	r3, #10
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	2300      	movs	r3, #0
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2301      	movs	r3, #1
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	2201      	movs	r2, #1
 80015a0:	497a      	ldr	r1, [pc, #488]	@ (800178c <main+0x634>)
 80015a2:	487b      	ldr	r0, [pc, #492]	@ (8001790 <main+0x638>)
 80015a4:	f7ff fa3c 	bl	8000a20 <GPIO_init>

	 GPIO_init(&LORA_CS_GPIO, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x0B);
 80015a8:	230b      	movs	r3, #11
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2301      	movs	r3, #1
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	2201      	movs	r2, #1
 80015b8:	4974      	ldr	r1, [pc, #464]	@ (800178c <main+0x634>)
 80015ba:	4876      	ldr	r0, [pc, #472]	@ (8001794 <main+0x63c>)
 80015bc:	f7ff fa30 	bl	8000a20 <GPIO_init>

	 RF_SW.port->ODR |= (GPIO_ODR_OD10);
 80015c0:	4b73      	ldr	r3, [pc, #460]	@ (8001790 <main+0x638>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	4b72      	ldr	r3, [pc, #456]	@ (8001790 <main+0x638>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ce:	615a      	str	r2, [r3, #20]
	 LORA_CS_GPIO.port->ODR |= (LORA_CS);
 80015d0:	4b70      	ldr	r3, [pc, #448]	@ (8001794 <main+0x63c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <main+0x63c>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015de:	615a      	str	r2, [r3, #20]

	 //Ensure CH1-4 is turned off, as its currently unused
	 CH1_ARM.port->ODR &= ~(CH1_Arm);
 80015e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001798 <main+0x640>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001798 <main+0x640>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80015ee:	615a      	str	r2, [r3, #20]
	 CH1_OP.port->ODR &= ~(CH1_Operate);
 80015f0:	4b6a      	ldr	r3, [pc, #424]	@ (800179c <main+0x644>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	4b69      	ldr	r3, [pc, #420]	@ (800179c <main+0x644>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015fe:	615a      	str	r2, [r3, #20]
	 CH2_ARM.port->ODR &= ~(CH2_Arm);
 8001600:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <main+0x610>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	4b58      	ldr	r3, [pc, #352]	@ (8001768 <main+0x610>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800160e:	615a      	str	r2, [r3, #20]
	 CH2_OP.port->ODR &= ~(CH2_Operate);
 8001610:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <main+0x648>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	4b62      	ldr	r3, [pc, #392]	@ (80017a0 <main+0x648>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800161e:	615a      	str	r2, [r3, #20]
	 CH3_ARM.port->ODR &= ~(CH3_Arm);
 8001620:	4b55      	ldr	r3, [pc, #340]	@ (8001778 <main+0x620>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	4b54      	ldr	r3, [pc, #336]	@ (8001778 <main+0x620>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800162e:	615a      	str	r2, [r3, #20]
	 CH3_OP.port->ODR &= ~(CH3_Operate);
 8001630:	4b50      	ldr	r3, [pc, #320]	@ (8001774 <main+0x61c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <main+0x61c>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800163e:	615a      	str	r2, [r3, #20]
	 CH4_ARM.port->ODR &= ~(CH4_Arm);
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <main+0x62c>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	4b4f      	ldr	r3, [pc, #316]	@ (8001784 <main+0x62c>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800164e:	615a      	str	r2, [r3, #20]
	 CH4_OP.port->ODR &= ~(CH4_Operate);
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <main+0x628>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	4b4a      	ldr	r3, [pc, #296]	@ (8001780 <main+0x628>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800165e:	615a      	str	r2, [r3, #20]




	//Make sure interrupts are configured BEFORE interupts
	GPIO_init(&LoRa_Rx_int, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x07);
 8001660:	2307      	movs	r3, #7
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2300      	movs	r3, #0
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2301      	movs	r3, #1
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2200      	movs	r2, #0
 8001670:	493f      	ldr	r1, [pc, #252]	@ (8001770 <main+0x618>)
 8001672:	484c      	ldr	r0, [pc, #304]	@ (80017a4 <main+0x64c>)
 8001674:	f7ff f9d4 	bl	8000a20 <GPIO_init>
	//NVIC_DisableIRQ(EXTI9_5_IRQn); //easier than changing the function GPIO_init_interrupt
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 8001678:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <main+0x650>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4a4a      	ldr	r2, [pc, #296]	@ (80017a8 <main+0x650>)
 800167e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001682:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PD;
 8001684:	4b48      	ldr	r3, [pc, #288]	@ (80017a8 <main+0x650>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4a47      	ldr	r2, [pc, #284]	@ (80017a8 <main+0x650>)
 800168a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800168e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR &= ~EXTI_FTSR_TR7_Msk;
 8001690:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <main+0x654>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4a45      	ldr	r2, [pc, #276]	@ (80017ac <main+0x654>)
 8001696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800169a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_TR7;
 800169c:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <main+0x654>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a42      	ldr	r2, [pc, #264]	@ (80017ac <main+0x654>)
 80016a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a6:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 80016a8:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <main+0x654>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <main+0x654>)
 80016ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b2:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR7;
 80016b4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <main+0x654>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a3c      	ldr	r2, [pc, #240]	@ (80017ac <main+0x654>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016be:	6093      	str	r3, [r2, #8]
	EXTI->IMR &= ~EXTI_IMR_IM7;
 80016c0:	4b3a      	ldr	r3, [pc, #232]	@ (80017ac <main+0x654>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a39      	ldr	r2, [pc, #228]	@ (80017ac <main+0x654>)
 80016c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016ca:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM7;
 80016cc:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <main+0x654>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a36      	ldr	r2, [pc, #216]	@ (80017ac <main+0x654>)
 80016d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d6:	6013      	str	r3, [r2, #0]

	//here is channel for loRa PD7
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016d8:	2017      	movs	r0, #23
 80016da:	f7ff fcd1 	bl	8001080 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn,9);
 80016de:	2109      	movs	r1, #9
 80016e0:	2017      	movs	r0, #23
 80016e2:	f7ff fd0f 	bl	8001104 <__NVIC_SetPriority>
	//re-enable to turn on LoRa RX interrupt!

	SX1272_init(&lora,"GSE_LORA", LORA_PORT, LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 80016e6:	2301      	movs	r3, #1
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2309      	movs	r3, #9
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	2302      	movs	r3, #2
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <main+0x618>)
 80016f8:	492d      	ldr	r1, [pc, #180]	@ (80017b0 <main+0x658>)
 80016fa:	482e      	ldr	r0, [pc, #184]	@ (80017b4 <main+0x65c>)
 80016fc:	f7ff fa26 	bl	8000b4c <SX1272_init>
	SX1272_startReceive(&lora);
 8001700:	482c      	ldr	r0, [pc, #176]	@ (80017b4 <main+0x65c>)
 8001702:	f7ff fbe2 	bl	8000eca <SX1272_startReceive>
	SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
 8001706:	2140      	movs	r1, #64	@ 0x40
 8001708:	482a      	ldr	r0, [pc, #168]	@ (80017b4 <main+0x65c>)
 800170a:	f7ff fc3e 	bl	8000f8a <SX1272_clearIRQ>

	//Ensure SMD LEDs are turned OFF on bootup
	LED_1.port -> ODR &= ~LED_1_PWR;
 800170e:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <main+0x660>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <main+0x660>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800171c:	615a      	str	r2, [r3, #20]
	LED_2.port -> ODR &= ~LED_2_PWR;
 800171e:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <main+0x664>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <main+0x664>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172c:	615a      	str	r2, [r3, #20]
	LED_3.port -> ODR &= ~LED_3_PWR;
 800172e:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <main+0x668>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <main+0x668>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800173c:	615a      	str	r2, [r3, #20]
	LED_4.port -> ODR &= ~LED_4_PWR;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <main+0x66c>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <main+0x66c>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800174c:	615a      	str	r2, [r3, #20]
	LED_5.port -> ODR &= ~LED_5_PWR;
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <main+0x670>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <main+0x670>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800175c:	615a      	str	r2, [r3, #20]
	LED_6.port -> ODR &= ~LED_6_PWR;
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <main+0x674>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	e035      	b.n	80017d0 <main+0x678>
 8001764:	40020400 	.word	0x40020400
 8001768:	200001d0 	.word	0x200001d0
 800176c:	200001e8 	.word	0x200001e8
 8001770:	40020c00 	.word	0x40020c00
 8001774:	20000200 	.word	0x20000200
 8001778:	20000218 	.word	0x20000218
 800177c:	20000230 	.word	0x20000230
 8001780:	20000248 	.word	0x20000248
 8001784:	20000260 	.word	0x20000260
 8001788:	20000278 	.word	0x20000278
 800178c:	40021800 	.word	0x40021800
 8001790:	200004e8 	.word	0x200004e8
 8001794:	20000500 	.word	0x20000500
 8001798:	20000188 	.word	0x20000188
 800179c:	20000170 	.word	0x20000170
 80017a0:	200001b8 	.word	0x200001b8
 80017a4:	20000158 	.word	0x20000158
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40013c00 	.word	0x40013c00
 80017b0:	08005e54 	.word	0x08005e54
 80017b4:	200000f8 	.word	0x200000f8
 80017b8:	20000380 	.word	0x20000380
 80017bc:	20000398 	.word	0x20000398
 80017c0:	200003b0 	.word	0x200003b0
 80017c4:	200003c8 	.word	0x200003c8
 80017c8:	200003e0 	.word	0x200003e0
 80017cc:	200003f8 	.word	0x200003f8
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	4b71      	ldr	r3, [pc, #452]	@ (8001998 <main+0x840>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017da:	615a      	str	r2, [r3, #20]

	CH1_ARM.port->ODR &= ~(CH1_Arm);
 80017dc:	4b6f      	ldr	r3, [pc, #444]	@ (800199c <main+0x844>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	4b6e      	ldr	r3, [pc, #440]	@ (800199c <main+0x844>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80017ea:	615a      	str	r2, [r3, #20]
	CH1_OP.port->ODR &= ~(CH1_Operate);
 80017ec:	4b6c      	ldr	r3, [pc, #432]	@ (80019a0 <main+0x848>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	4b6b      	ldr	r3, [pc, #428]	@ (80019a0 <main+0x848>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017fa:	615a      	str	r2, [r3, #20]


	CH2_ARM.port->ODR &= ~(CH2_Arm);
 80017fc:	4b69      	ldr	r3, [pc, #420]	@ (80019a4 <main+0x84c>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	4b68      	ldr	r3, [pc, #416]	@ (80019a4 <main+0x84c>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800180a:	615a      	str	r2, [r3, #20]
	CH2_OP.port->ODR &= ~(CH2_Operate);
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <main+0x850>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	4b65      	ldr	r3, [pc, #404]	@ (80019a8 <main+0x850>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800181a:	615a      	str	r2, [r3, #20]

	CH3_ARM.port->ODR &= ~(CH3_Arm);
 800181c:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <main+0x854>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <main+0x854>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800182a:	615a      	str	r2, [r3, #20]
	CH3_OP.port->ODR &= ~(CH3_Operate);
 800182c:	4b60      	ldr	r3, [pc, #384]	@ (80019b0 <main+0x858>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b5f      	ldr	r3, [pc, #380]	@ (80019b0 <main+0x858>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800183a:	615a      	str	r2, [r3, #20]

	CH4_ARM.port->ODR &= ~(CH4_Arm);
 800183c:	4b5d      	ldr	r3, [pc, #372]	@ (80019b4 <main+0x85c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	4b5c      	ldr	r3, [pc, #368]	@ (80019b4 <main+0x85c>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800184a:	615a      	str	r2, [r3, #20]
	CH4_OP.port->ODR &= ~(CH4_Operate);
 800184c:	4b5a      	ldr	r3, [pc, #360]	@ (80019b8 <main+0x860>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <main+0x860>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800185a:	615a      	str	r2, [r3, #20]

	state = 0x00;
 800185c:	4b57      	ldr	r3, [pc, #348]	@ (80019bc <main+0x864>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
	}
	*/



	switch_case_state = 0x0;
 8001862:	4b57      	ldr	r3, [pc, #348]	@ (80019c0 <main+0x868>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
//Resetting Indentation from the start, cos I CBF changing the entire code - JC 0503025
while (1) {

	switch(switch_case_state){
 8001868:	4b55      	ldr	r3, [pc, #340]	@ (80019c0 <main+0x868>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	dc27      	bgt.n	80018c0 <main+0x768>
 8001870:	2b00      	cmp	r3, #0
 8001872:	dbf9      	blt.n	8001868 <main+0x710>
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d8f7      	bhi.n	8001868 <main+0x710>
 8001878:	a201      	add	r2, pc, #4	@ (adr r2, 8001880 <main+0x728>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018c9 	.word	0x080018c9
 8001884:	0800210d 	.word	0x0800210d
 8001888:	080021df 	.word	0x080021df
 800188c:	0800224d 	.word	0x0800224d
 8001890:	080022e7 	.word	0x080022e7
 8001894:	08001869 	.word	0x08001869
 8001898:	08001869 	.word	0x08001869
 800189c:	0800273d 	.word	0x0800273d
 80018a0:	0800284b 	.word	0x0800284b
 80018a4:	08002981 	.word	0x08002981
 80018a8:	08002aa9 	.word	0x08002aa9
 80018ac:	08001869 	.word	0x08001869
 80018b0:	08001869 	.word	0x08001869
 80018b4:	08001869 	.word	0x08001869
 80018b8:	08001869 	.word	0x08001869
 80018bc:	0800247b 	.word	0x0800247b
 80018c0:	2b80      	cmp	r3, #128	@ 0x80
 80018c2:	f001 819b 	beq.w	8002bfc <main+0x1aa4>
 80018c6:	e7cf      	b.n	8001868 <main+0x710>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80018c8:	b662      	cpsie	i
}
 80018ca:	bf00      	nop
	case 0:

		__enable_irq();


		LED_1.port -> ODR |= LED_1_PWR;
 80018cc:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <main+0x86c>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <main+0x86c>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018da:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 80018dc:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <main+0x870>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <main+0x870>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018ea:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 80018ec:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <main+0x874>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <main+0x874>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018fa:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 80018fc:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <main+0x878>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <main+0x878>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800190a:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 800190c:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <main+0x87c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <main+0x87c>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800191a:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 800191c:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <main+0x840>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <main+0x840>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192a:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800192c:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <main+0x880>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <main+0x7e2>
 8001934:	f001 fcfa 	bl	800332c <RX_Receive>
 8001938:	e000      	b.n	800193c <main+0x7e4>
 800193a:	bf00      	nop

//Extract Thermocouple Temp
		//To Do - Issues with Thermocouples ATM with accurate readings

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <main+0x880>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <main+0x7f2>
 8001944:	f001 fcf2 	bl	800332c <RX_Receive>
 8001948:	e000      	b.n	800194c <main+0x7f4>
 800194a:	bf00      	nop
		}

		*/

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <main+0x880>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <main+0x802>
 8001954:	f001 fcea 	bl	800332c <RX_Receive>
 8001958:	e000      	b.n	800195c <main+0x804>
 800195a:	bf00      	nop
//Get Pressure Readings from Transducers

		//Done with HAL libs atm - JC 29/04/2025

		uint8_t spi_buf[2];
		spi_buf[0] = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	753b      	strb	r3, [r7, #20]
		spi_buf[1] = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	757b      	strb	r3, [r7, #21]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2140      	movs	r1, #64	@ 0x40
 8001968:	481c      	ldr	r0, [pc, #112]	@ (80019dc <main+0x884>)
 800196a:	f002 fd17 	bl	800439c <HAL_GPIO_WritePin>
		//ret = HAL_SPI_TransmitReceive(&hspi5,(uint8_t *)&ADC_CH1,  (uint8_t *)spi_buf, 1, 100);
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	481a      	ldr	r0, [pc, #104]	@ (80019dc <main+0x884>)
 8001974:	f002 fd12 	bl	800439c <HAL_GPIO_WritePin>
		if (ret != HAL_OK){
 8001978:	7fbb      	ldrb	r3, [r7, #30]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d038      	beq.n	80019f0 <main+0x898>
			TRANSDUCER_1.comms_ok = false;
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <main+0x888>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_2.comms_ok = false;
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <main+0x88c>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_3.comms_ok = false;
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <main+0x890>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_4.comms_ok = false;
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <main+0x894>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e06d      	b.n	8001a74 <main+0x91c>
 8001998:	200003f8 	.word	0x200003f8
 800199c:	20000188 	.word	0x20000188
 80019a0:	20000170 	.word	0x20000170
 80019a4:	200001d0 	.word	0x200001d0
 80019a8:	200001b8 	.word	0x200001b8
 80019ac:	20000218 	.word	0x20000218
 80019b0:	20000200 	.word	0x20000200
 80019b4:	20000260 	.word	0x20000260
 80019b8:	20000248 	.word	0x20000248
 80019bc:	200000c9 	.word	0x200000c9
 80019c0:	200000c8 	.word	0x200000c8
 80019c4:	20000380 	.word	0x20000380
 80019c8:	20000398 	.word	0x20000398
 80019cc:	200003b0 	.word	0x200003b0
 80019d0:	200003c8 	.word	0x200003c8
 80019d4:	200003e0 	.word	0x200003e0
 80019d8:	200000d2 	.word	0x200000d2
 80019dc:	40021400 	.word	0x40021400
 80019e0:	20000518 	.word	0x20000518
 80019e4:	20000524 	.word	0x20000524
 80019e8:	20000530 	.word	0x20000530
 80019ec:	2000053c 	.word	0x2000053c
		}
		else {
			TRANSDUCER_1.comms_ok = true;
 80019f0:	4bb7      	ldr	r3, [pc, #732]	@ (8001cd0 <main+0xb78>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_2.comms_ok = true;
 80019f6:	4bb7      	ldr	r3, [pc, #732]	@ (8001cd4 <main+0xb7c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_3.comms_ok = true;
 80019fc:	4bb6      	ldr	r3, [pc, #728]	@ (8001cd8 <main+0xb80>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
			TRANSDUCER_4.comms_ok = true;
 8001a02:	4bb6      	ldr	r3, [pc, #728]	@ (8001cdc <main+0xb84>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]


			TRANSDUCER_1.raw_data[0] = spi_buf[0];
 8001a08:	7d3a      	ldrb	r2, [r7, #20]
 8001a0a:	4bb1      	ldr	r3, [pc, #708]	@ (8001cd0 <main+0xb78>)
 8001a0c:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_1.raw_data[1] = spi_buf[1];
 8001a0e:	7d7a      	ldrb	r2, [r7, #21]
 8001a10:	4baf      	ldr	r3, [pc, #700]	@ (8001cd0 <main+0xb78>)
 8001a12:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2140      	movs	r1, #64	@ 0x40
 8001a18:	48b1      	ldr	r0, [pc, #708]	@ (8001ce0 <main+0xb88>)
 8001a1a:	f002 fcbf 	bl	800439c <HAL_GPIO_WritePin>
			//HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH2, (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2140      	movs	r1, #64	@ 0x40
 8001a22:	48af      	ldr	r0, [pc, #700]	@ (8001ce0 <main+0xb88>)
 8001a24:	f002 fcba 	bl	800439c <HAL_GPIO_WritePin>

			TRANSDUCER_2.raw_data[0] = spi_buf[0];
 8001a28:	7d3a      	ldrb	r2, [r7, #20]
 8001a2a:	4baa      	ldr	r3, [pc, #680]	@ (8001cd4 <main+0xb7c>)
 8001a2c:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_2.raw_data[1] = spi_buf[1];
 8001a2e:	7d7a      	ldrb	r2, [r7, #21]
 8001a30:	4ba8      	ldr	r3, [pc, #672]	@ (8001cd4 <main+0xb7c>)
 8001a32:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2140      	movs	r1, #64	@ 0x40
 8001a38:	48a9      	ldr	r0, [pc, #676]	@ (8001ce0 <main+0xb88>)
 8001a3a:	f002 fcaf 	bl	800439c <HAL_GPIO_WritePin>
			//HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH3, (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2140      	movs	r1, #64	@ 0x40
 8001a42:	48a7      	ldr	r0, [pc, #668]	@ (8001ce0 <main+0xb88>)
 8001a44:	f002 fcaa 	bl	800439c <HAL_GPIO_WritePin>

			TRANSDUCER_3.raw_data[0] = spi_buf[0];
 8001a48:	7d3a      	ldrb	r2, [r7, #20]
 8001a4a:	4ba3      	ldr	r3, [pc, #652]	@ (8001cd8 <main+0xb80>)
 8001a4c:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_3.raw_data[1] = spi_buf[1];
 8001a4e:	7d7a      	ldrb	r2, [r7, #21]
 8001a50:	4ba1      	ldr	r3, [pc, #644]	@ (8001cd8 <main+0xb80>)
 8001a52:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2140      	movs	r1, #64	@ 0x40
 8001a58:	48a1      	ldr	r0, [pc, #644]	@ (8001ce0 <main+0xb88>)
 8001a5a:	f002 fc9f 	bl	800439c <HAL_GPIO_WritePin>
			//HAL_SPI_TransmitReceive(&hspi5, (uint8_t *)&ADC_CH4, (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2140      	movs	r1, #64	@ 0x40
 8001a62:	489f      	ldr	r0, [pc, #636]	@ (8001ce0 <main+0xb88>)
 8001a64:	f002 fc9a 	bl	800439c <HAL_GPIO_WritePin>

			TRANSDUCER_4.raw_data[0] = spi_buf[0];
 8001a68:	7d3a      	ldrb	r2, [r7, #20]
 8001a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8001cdc <main+0xb84>)
 8001a6c:	705a      	strb	r2, [r3, #1]
			TRANSDUCER_4.raw_data[1] = spi_buf[1];
 8001a6e:	7d7a      	ldrb	r2, [r7, #21]
 8001a70:	4b9a      	ldr	r3, [pc, #616]	@ (8001cdc <main+0xb84>)
 8001a72:	709a      	strb	r2, [r3, #2]

		}

		//Translate 12bit value into relative voltage (given Vref is 5V)

		TRANSDUCER_1.read_value_voltage = ((float)(TRANSDUCER_1.raw_data[1] << 8 |  TRANSDUCER_1.raw_data[0] )/ 4095) * 5 + 0.00394; //Offset as per dataset found
 8001a74:	4b96      	ldr	r3, [pc, #600]	@ (8001cd0 <main+0xb78>)
 8001a76:	789b      	ldrb	r3, [r3, #2]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	4a95      	ldr	r2, [pc, #596]	@ (8001cd0 <main+0xb78>)
 8001a7c:	7852      	ldrb	r2, [r2, #1]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a88:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8001ce4 <main+0xb8c>
 8001a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a90:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd0c 	bl	80004b8 <__aeabi_f2d>
 8001aa0:	a389      	add	r3, pc, #548	@ (adr r3, 8001cc8 <main+0xb70>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fba9 	bl	80001fc <__adddf3>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe fd59 	bl	8000568 <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a85      	ldr	r2, [pc, #532]	@ (8001cd0 <main+0xb78>)
 8001aba:	6053      	str	r3, [r2, #4]
		TRANSDUCER_1.read_value_voltage = TRANSDUCER_1.read_value_voltage *2; //Multiplied by 2 cos, idk, first time through correct sample is taken, every sample after that is half what it should be - find the problem? No, find a workaround? absolutely
 8001abc:	4b84      	ldr	r3, [pc, #528]	@ (8001cd0 <main+0xb78>)
 8001abe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ac2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ac6:	4b82      	ldr	r3, [pc, #520]	@ (8001cd0 <main+0xb78>)
 8001ac8:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_2.read_value_voltage = ((float)(TRANSDUCER_2.raw_data[1] << 8 |  TRANSDUCER_2.raw_data[0] )/ 4095) * 5 + 0.00394;
 8001acc:	4b81      	ldr	r3, [pc, #516]	@ (8001cd4 <main+0xb7c>)
 8001ace:	789b      	ldrb	r3, [r3, #2]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	4a80      	ldr	r2, [pc, #512]	@ (8001cd4 <main+0xb7c>)
 8001ad4:	7852      	ldrb	r2, [r2, #1]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001ce4 <main+0xb8c>
 8001ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af0:	ee17 0a90 	vmov	r0, s15
 8001af4:	f7fe fce0 	bl	80004b8 <__aeabi_f2d>
 8001af8:	a373      	add	r3, pc, #460	@ (adr r3, 8001cc8 <main+0xb70>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fb7d 	bl	80001fc <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe fd2d 	bl	8000568 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a70      	ldr	r2, [pc, #448]	@ (8001cd4 <main+0xb7c>)
 8001b12:	6053      	str	r3, [r2, #4]
		TRANSDUCER_2.read_value_voltage = TRANSDUCER_2.read_value_voltage *2;
 8001b14:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd4 <main+0xb7c>)
 8001b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd4 <main+0xb7c>)
 8001b20:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_3.read_value_voltage = ((float)(TRANSDUCER_3.raw_data[1] << 8 |  TRANSDUCER_3.raw_data[0] )/ 4095) * 5 + 0.00394;
 8001b24:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd8 <main+0xb80>)
 8001b26:	789b      	ldrb	r3, [r3, #2]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	4a6b      	ldr	r2, [pc, #428]	@ (8001cd8 <main+0xb80>)
 8001b2c:	7852      	ldrb	r2, [r2, #1]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b38:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001ce4 <main+0xb8c>
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b40:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	ee17 0a90 	vmov	r0, s15
 8001b4c:	f7fe fcb4 	bl	80004b8 <__aeabi_f2d>
 8001b50:	a35d      	add	r3, pc, #372	@ (adr r3, 8001cc8 <main+0xb70>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fb51 	bl	80001fc <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7fe fd01 	bl	8000568 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a5b      	ldr	r2, [pc, #364]	@ (8001cd8 <main+0xb80>)
 8001b6a:	6053      	str	r3, [r2, #4]
		TRANSDUCER_3.read_value_voltage = TRANSDUCER_3.read_value_voltage *2;
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <main+0xb80>)
 8001b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b76:	4b58      	ldr	r3, [pc, #352]	@ (8001cd8 <main+0xb80>)
 8001b78:	edc3 7a01 	vstr	s15, [r3, #4]
		TRANSDUCER_4.read_value_voltage = ((float)(TRANSDUCER_4.raw_data[1] << 8 |  TRANSDUCER_4.raw_data[0] )/ 4095) * 5 + 0.00394;
 8001b7c:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <main+0xb84>)
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <main+0xb84>)
 8001b84:	7852      	ldrb	r2, [r2, #1]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b90:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001ce4 <main+0xb8c>
 8001b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b98:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba0:	ee17 0a90 	vmov	r0, s15
 8001ba4:	f7fe fc88 	bl	80004b8 <__aeabi_f2d>
 8001ba8:	a347      	add	r3, pc, #284	@ (adr r3, 8001cc8 <main+0xb70>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fb25 	bl	80001fc <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe fcd5 	bl	8000568 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a46      	ldr	r2, [pc, #280]	@ (8001cdc <main+0xb84>)
 8001bc2:	6053      	str	r3, [r2, #4]
		TRANSDUCER_4.read_value_voltage = TRANSDUCER_4.read_value_voltage *2;
 8001bc4:	4b45      	ldr	r3, [pc, #276]	@ (8001cdc <main+0xb84>)
 8001bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <main+0xb84>)
 8001bd0:	edc3 7a01 	vstr	s15, [r3, #4]

		TRANSDUCER_1.read_value_bar = TRANSDUCER_1.read_value_voltage * 60; //(voltage_read / 5) * 300 (bar) = pressure, 300/5 is 60, therefore (voltage_read) * 60 = pressure (for a 0-300bar range)
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <main+0xb78>)
 8001bd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bda:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001ce8 <main+0xb90>
 8001bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <main+0xb78>)
 8001be4:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_2.read_value_bar = TRANSDUCER_2.read_value_voltage * 60;
 8001be8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd4 <main+0xb7c>)
 8001bea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bee:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001ce8 <main+0xb90>
 8001bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf6:	4b37      	ldr	r3, [pc, #220]	@ (8001cd4 <main+0xb7c>)
 8001bf8:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_3.read_value_bar = TRANSDUCER_3.read_value_voltage * 60;
 8001bfc:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <main+0xb80>)
 8001bfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c02:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001ce8 <main+0xb90>
 8001c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0a:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <main+0xb80>)
 8001c0c:	edc3 7a02 	vstr	s15, [r3, #8]
		TRANSDUCER_4.read_value_bar = TRANSDUCER_4.read_value_voltage * 60;
 8001c10:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <main+0xb84>)
 8001c12:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c16:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001ce8 <main+0xb90>
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <main+0xb84>)
 8001c20:	edc3 7a02 	vstr	s15, [r3, #8]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{}
 8001c24:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <main+0xb94>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <main+0xad8>
 8001c2c:	f001 fb7e 	bl	800332c <RX_Receive>

		//Check Transducer pressures, if pressures too high go directly to PURGE state
		//Error flags are specifc per Transducer
		if(TRANSDUCER_1.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<7);}
 8001c30:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <main+0xb78>)
 8001c32:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c36:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <main+0xb98>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	db0a      	blt.n	8001c62 <main+0xb0a>
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <main+0xb9c>)
 8001c4e:	220a      	movs	r2, #10
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <main+0xba0>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <main+0xba0>)
 8001c5e:	801a      	strh	r2, [r3, #0]
 8001c60:	e0bc      	b.n	8001ddc <main+0xc84>
		else if(TRANSDUCER_2.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<6); }
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <main+0xb7c>)
 8001c64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <main+0xb98>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	db0a      	blt.n	8001c94 <main+0xb3c>
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <main+0xb9c>)
 8001c80:	220a      	movs	r2, #10
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <main+0xba0>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <main+0xba0>)
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	e0a3      	b.n	8001ddc <main+0xc84>
		else if(TRANSDUCER_3.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<5);}
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <main+0xb80>)
 8001c96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <main+0xb98>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	db25      	blt.n	8001cfc <main+0xba4>
 8001cb0:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <main+0xb9c>)
 8001cb2:	220a      	movs	r2, #10
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <main+0xba0>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f043 0320 	orr.w	r3, r3, #32
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <main+0xba0>)
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	e08a      	b.n	8001ddc <main+0xc84>
 8001cc6:	bf00      	nop
 8001cc8:	b256ffc1 	.word	0xb256ffc1
 8001ccc:	3f702363 	.word	0x3f702363
 8001cd0:	20000518 	.word	0x20000518
 8001cd4:	20000524 	.word	0x20000524
 8001cd8:	20000530 	.word	0x20000530
 8001cdc:	2000053c 	.word	0x2000053c
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	457ff000 	.word	0x457ff000
 8001ce8:	42700000 	.word	0x42700000
 8001cec:	200000d2 	.word	0x200000d2
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	200000c8 	.word	0x200000c8
 8001cf8:	200000cc 	.word	0x200000cc
		else if(TRANSDUCER_4.read_value_bar >=max_pressure_failure_mode){switch_case_state = 10; error |=(0x01<<4);}
 8001cfc:	4bad      	ldr	r3, [pc, #692]	@ (8001fb4 <main+0xe5c>)
 8001cfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d02:	4bad      	ldr	r3, [pc, #692]	@ (8001fb8 <main+0xe60>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	db0a      	blt.n	8001d2e <main+0xbd6>
 8001d18:	4ba8      	ldr	r3, [pc, #672]	@ (8001fbc <main+0xe64>)
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	4ba8      	ldr	r3, [pc, #672]	@ (8001fc0 <main+0xe68>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4ba5      	ldr	r3, [pc, #660]	@ (8001fc0 <main+0xe68>)
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	e056      	b.n	8001ddc <main+0xc84>
		//If Error state but not direct to PURGE
		else{
			if(TRANSDUCER_1.read_value_bar >=max_pressure_error_mode){error |=(0x01<<3);}
 8001d2e:	4ba5      	ldr	r3, [pc, #660]	@ (8001fc4 <main+0xe6c>)
 8001d30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d34:	4ba4      	ldr	r3, [pc, #656]	@ (8001fc8 <main+0xe70>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	db07      	blt.n	8001d5a <main+0xc02>
 8001d4a:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc0 <main+0xe68>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b9a      	ldr	r3, [pc, #616]	@ (8001fc0 <main+0xe68>)
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e040      	b.n	8001ddc <main+0xc84>
			else if(TRANSDUCER_2.read_value_bar >=max_pressure_error_mode){error |=(0x01<<2);}
 8001d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8001fcc <main+0xe74>)
 8001d5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d60:	4b99      	ldr	r3, [pc, #612]	@ (8001fc8 <main+0xe70>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	db07      	blt.n	8001d86 <main+0xc2e>
 8001d76:	4b92      	ldr	r3, [pc, #584]	@ (8001fc0 <main+0xe68>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b8f      	ldr	r3, [pc, #572]	@ (8001fc0 <main+0xe68>)
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	e02a      	b.n	8001ddc <main+0xc84>
			else if(TRANSDUCER_3.read_value_bar >=max_pressure_error_mode){error |=(0x01<<1);}
 8001d86:	4b92      	ldr	r3, [pc, #584]	@ (8001fd0 <main+0xe78>)
 8001d88:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d8c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc8 <main+0xe70>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	db07      	blt.n	8001db2 <main+0xc5a>
 8001da2:	4b87      	ldr	r3, [pc, #540]	@ (8001fc0 <main+0xe68>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b84      	ldr	r3, [pc, #528]	@ (8001fc0 <main+0xe68>)
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e014      	b.n	8001ddc <main+0xc84>
			else if(TRANSDUCER_4.read_value_bar >=max_pressure_error_mode){error |=0x01;}
 8001db2:	4b80      	ldr	r3, [pc, #512]	@ (8001fb4 <main+0xe5c>)
 8001db4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db8:	4b83      	ldr	r3, [pc, #524]	@ (8001fc8 <main+0xe70>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	db06      	blt.n	8001ddc <main+0xc84>
 8001dce:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <main+0xe68>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b79      	ldr	r3, [pc, #484]	@ (8001fc0 <main+0xe68>)
 8001dda:	801a      	strh	r2, [r3, #0]
		//Pressures are A-OK, so carry on without doing anything
			else{} //make it so nothing happens here -> proceed
		}

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001ddc:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd4 <main+0xe7c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <main+0xc92>
 8001de4:	f001 faa2 	bl	800332c <RX_Receive>
 8001de8:	e000      	b.n	8001dec <main+0xc94>
 8001dea:	bf00      	nop

//Get Loadcell Readings

		//Done with HALD libs atm - JC 29/04/2025
		spi_buf[0] = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	753b      	strb	r3, [r7, #20]
		spi_buf[1] = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	757b      	strb	r3, [r7, #21]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2104      	movs	r1, #4
 8001df8:	4877      	ldr	r0, [pc, #476]	@ (8001fd8 <main+0xe80>)
 8001dfa:	f002 facf 	bl	800439c <HAL_GPIO_WritePin>
		//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH1,  (uint8_t *)spi_buf, 1, 100);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2104      	movs	r1, #4
 8001e02:	4875      	ldr	r0, [pc, #468]	@ (8001fd8 <main+0xe80>)
 8001e04:	f002 faca 	bl	800439c <HAL_GPIO_WritePin>
		if (ret != HAL_OK){
 8001e08:	7fbb      	ldrb	r3, [r7, #30]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <main+0xcd0>
			LOADCELL_1.comms_ok = false;
 8001e0e:	4b73      	ldr	r3, [pc, #460]	@ (8001fdc <main+0xe84>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			LOADCELL_2.comms_ok = false;
 8001e14:	4b72      	ldr	r3, [pc, #456]	@ (8001fe0 <main+0xe88>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
			LOADCELL_3.comms_ok = false;
 8001e1a:	4b72      	ldr	r3, [pc, #456]	@ (8001fe4 <main+0xe8c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
			LOADCELL_4.comms_ok = false;
 8001e20:	4b71      	ldr	r3, [pc, #452]	@ (8001fe8 <main+0xe90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e041      	b.n	8001eac <main+0xd54>
		}
		else {
			LOADCELL_1.comms_ok = true;
 8001e28:	4b6c      	ldr	r3, [pc, #432]	@ (8001fdc <main+0xe84>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
			LOADCELL_2.comms_ok = true;
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <main+0xe88>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
			LOADCELL_3.comms_ok = true;
 8001e34:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe4 <main+0xe8c>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
			LOADCELL_4.comms_ok = true;
 8001e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe8 <main+0xe90>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]


			LOADCELL_1.raw_data[0] = spi_buf[0];
 8001e40:	7d3a      	ldrb	r2, [r7, #20]
 8001e42:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <main+0xe84>)
 8001e44:	705a      	strb	r2, [r3, #1]
			LOADCELL_1.raw_data[1] = spi_buf[1];
 8001e46:	7d7a      	ldrb	r2, [r7, #21]
 8001e48:	4b64      	ldr	r3, [pc, #400]	@ (8001fdc <main+0xe84>)
 8001e4a:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2110      	movs	r1, #16
 8001e50:	4866      	ldr	r0, [pc, #408]	@ (8001fec <main+0xe94>)
 8001e52:	f002 faa3 	bl	800439c <HAL_GPIO_WritePin>
			//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH2,  (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4864      	ldr	r0, [pc, #400]	@ (8001fec <main+0xe94>)
 8001e5c:	f002 fa9e 	bl	800439c <HAL_GPIO_WritePin>

			LOADCELL_2.raw_data[0] = spi_buf[0];
 8001e60:	7d3a      	ldrb	r2, [r7, #20]
 8001e62:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe0 <main+0xe88>)
 8001e64:	705a      	strb	r2, [r3, #1]
			LOADCELL_2.raw_data[1] = spi_buf[1];
 8001e66:	7d7a      	ldrb	r2, [r7, #21]
 8001e68:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe0 <main+0xe88>)
 8001e6a:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2110      	movs	r1, #16
 8001e70:	485e      	ldr	r0, [pc, #376]	@ (8001fec <main+0xe94>)
 8001e72:	f002 fa93 	bl	800439c <HAL_GPIO_WritePin>
			//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH3,  (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	2110      	movs	r1, #16
 8001e7a:	485c      	ldr	r0, [pc, #368]	@ (8001fec <main+0xe94>)
 8001e7c:	f002 fa8e 	bl	800439c <HAL_GPIO_WritePin>

			LOADCELL_3.raw_data[0] = spi_buf[0];
 8001e80:	7d3a      	ldrb	r2, [r7, #20]
 8001e82:	4b58      	ldr	r3, [pc, #352]	@ (8001fe4 <main+0xe8c>)
 8001e84:	705a      	strb	r2, [r3, #1]
			LOADCELL_3.raw_data[1] = spi_buf[1];
 8001e86:	7d7a      	ldrb	r2, [r7, #21]
 8001e88:	4b56      	ldr	r3, [pc, #344]	@ (8001fe4 <main+0xe8c>)
 8001e8a:	709a      	strb	r2, [r3, #2]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2110      	movs	r1, #16
 8001e90:	4856      	ldr	r0, [pc, #344]	@ (8001fec <main+0xe94>)
 8001e92:	f002 fa83 	bl	800439c <HAL_GPIO_WritePin>
			//ret = HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&ADC_CH4,  (uint8_t *)spi_buf, 1, 100);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001e96:	2201      	movs	r2, #1
 8001e98:	2110      	movs	r1, #16
 8001e9a:	4854      	ldr	r0, [pc, #336]	@ (8001fec <main+0xe94>)
 8001e9c:	f002 fa7e 	bl	800439c <HAL_GPIO_WritePin>

			LOADCELL_4.raw_data[0] = spi_buf[0];
 8001ea0:	7d3a      	ldrb	r2, [r7, #20]
 8001ea2:	4b51      	ldr	r3, [pc, #324]	@ (8001fe8 <main+0xe90>)
 8001ea4:	705a      	strb	r2, [r3, #1]
			LOADCELL_4.raw_data[1] = spi_buf[1];
 8001ea6:	7d7a      	ldrb	r2, [r7, #21]
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <main+0xe90>)
 8001eaa:	709a      	strb	r2, [r3, #2]

		}

		//Translate 12bit value into relative voltage (given Vref is 5V)

		LOADCELL_1.read_value_voltage = ((float)(LOADCELL_1.raw_data[1] << 8 |  LOADCELL_1.raw_data[0] )/ 4095) * 5;
 8001eac:	4b4b      	ldr	r3, [pc, #300]	@ (8001fdc <main+0xe84>)
 8001eae:	789b      	ldrb	r3, [r3, #2]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001fdc <main+0xe84>)
 8001eb4:	7852      	ldrb	r2, [r2, #1]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec0:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001ff0 <main+0xe98>
 8001ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <main+0xe84>)
 8001ed2:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_2.read_value_voltage = ((float)(LOADCELL_2.raw_data[1] << 8 |  LOADCELL_2.raw_data[0] )/ 4095) * 5;
 8001ed6:	4b42      	ldr	r3, [pc, #264]	@ (8001fe0 <main+0xe88>)
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	4a40      	ldr	r2, [pc, #256]	@ (8001fe0 <main+0xe88>)
 8001ede:	7852      	ldrb	r2, [r2, #1]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eea:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001ff0 <main+0xe98>
 8001eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <main+0xe88>)
 8001efc:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_3.read_value_voltage = ((float)(LOADCELL_3.raw_data[1] << 8 |  LOADCELL_3.raw_data[0] )/ 4095) * 5;
 8001f00:	4b38      	ldr	r3, [pc, #224]	@ (8001fe4 <main+0xe8c>)
 8001f02:	789b      	ldrb	r3, [r3, #2]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4a37      	ldr	r2, [pc, #220]	@ (8001fe4 <main+0xe8c>)
 8001f08:	7852      	ldrb	r2, [r2, #1]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f14:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001ff0 <main+0xe98>
 8001f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f24:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe4 <main+0xe8c>)
 8001f26:	edc3 7a01 	vstr	s15, [r3, #4]
		LOADCELL_4.read_value_voltage = ((float)(LOADCELL_4.raw_data[1] << 8 |  LOADCELL_4.raw_data[0] )/ 4095) * 5;
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe8 <main+0xe90>)
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe8 <main+0xe90>)
 8001f32:	7852      	ldrb	r2, [r2, #1]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001ff0 <main+0xe98>
 8001f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f46:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4e:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <main+0xe90>)
 8001f50:	edc3 7a01 	vstr	s15, [r3, #4]



		LOADCELL_1.read_value_weight = LOADCELL_1.read_value_voltage * 10; //(voltage_read / 5) * 50 (kg) = pressure, 50/5 is 10, therefore (voltage_read) * 10 = weight (for a 0-50kg range)
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <main+0xe84>)
 8001f56:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f5a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <main+0xe84>)
 8001f64:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_2.read_value_weight = LOADCELL_2.read_value_voltage * 10;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <main+0xe88>)
 8001f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <main+0xe88>)
 8001f78:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_3.read_value_weight = LOADCELL_3.read_value_voltage * 10;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <main+0xe8c>)
 8001f7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f82:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <main+0xe8c>)
 8001f8c:	edc3 7a02 	vstr	s15, [r3, #8]
		LOADCELL_4.read_value_weight = LOADCELL_4.read_value_voltage * 10;
 8001f90:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <main+0xe90>)
 8001f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f96:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <main+0xe90>)
 8001fa0:	edc3 7a02 	vstr	s15, [r3, #8]


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <main+0xe7c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <main+0xe9c>
 8001fac:	f001 f9be 	bl	800332c <RX_Receive>
 8001fb0:	e021      	b.n	8001ff6 <main+0xe9e>
 8001fb2:	bf00      	nop
 8001fb4:	2000053c 	.word	0x2000053c
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	200000c8 	.word	0x200000c8
 8001fc0:	200000cc 	.word	0x200000cc
 8001fc4:	20000518 	.word	0x20000518
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	20000524 	.word	0x20000524
 8001fd0:	20000530 	.word	0x20000530
 8001fd4:	200000d2 	.word	0x200000d2
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	20000548 	.word	0x20000548
 8001fe0:	20000554 	.word	0x20000554
 8001fe4:	20000560 	.word	0x20000560
 8001fe8:	2000056c 	.word	0x2000056c
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	457ff000 	.word	0x457ff000
 8001ff4:	bf00      	nop


		//Check Loadcell weights, if too low, trigger error flag
		//Error Flags specific to loadcell
		if(LOADCELL_1.read_value_weight <min_weight_error_mode){error |=(0x01<<7);}
 8001ff6:	4b99      	ldr	r3, [pc, #612]	@ (800225c <main+0x1104>)
 8001ff8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ffc:	4b98      	ldr	r3, [pc, #608]	@ (8002260 <main+0x1108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	d507      	bpl.n	8002022 <main+0xeca>
 8002012:	4b94      	ldr	r3, [pc, #592]	@ (8002264 <main+0x110c>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b91      	ldr	r3, [pc, #580]	@ (8002264 <main+0x110c>)
 800201e:	801a      	strh	r2, [r3, #0]
 8002020:	e040      	b.n	80020a4 <main+0xf4c>
		else if(LOADCELL_2.read_value_weight <min_weight_error_mode){error |=(0x01<<6);}
 8002022:	4b91      	ldr	r3, [pc, #580]	@ (8002268 <main+0x1110>)
 8002024:	ed93 7a02 	vldr	s14, [r3, #8]
 8002028:	4b8d      	ldr	r3, [pc, #564]	@ (8002260 <main+0x1108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d507      	bpl.n	800204e <main+0xef6>
 800203e:	4b89      	ldr	r3, [pc, #548]	@ (8002264 <main+0x110c>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b86      	ldr	r3, [pc, #536]	@ (8002264 <main+0x110c>)
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	e02a      	b.n	80020a4 <main+0xf4c>
		else if(LOADCELL_3.read_value_weight <min_weight_error_mode){error |=(0x01<<5);}
 800204e:	4b87      	ldr	r3, [pc, #540]	@ (800226c <main+0x1114>)
 8002050:	ed93 7a02 	vldr	s14, [r3, #8]
 8002054:	4b82      	ldr	r3, [pc, #520]	@ (8002260 <main+0x1108>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	d507      	bpl.n	800207a <main+0xf22>
 800206a:	4b7e      	ldr	r3, [pc, #504]	@ (8002264 <main+0x110c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b7b      	ldr	r3, [pc, #492]	@ (8002264 <main+0x110c>)
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	e014      	b.n	80020a4 <main+0xf4c>
		else if(LOADCELL_4.read_value_weight <min_weight_error_mode){error |=(0x01<<4);}
 800207a:	4b7d      	ldr	r3, [pc, #500]	@ (8002270 <main+0x1118>)
 800207c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002080:	4b77      	ldr	r3, [pc, #476]	@ (8002260 <main+0x1108>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	d506      	bpl.n	80020a4 <main+0xf4c>
 8002096:	4b73      	ldr	r3, [pc, #460]	@ (8002264 <main+0x110c>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b70      	ldr	r3, [pc, #448]	@ (8002264 <main+0x110c>)
 80020a2:	801a      	strh	r2, [r3, #0]
		//Weights are A-OK, so carry on without doing anything
		else{}

//Extract surface mount temp sensor temp
		i2c_comms_result result = get_temp(&SMD_TEMP_SENSE);
 80020a4:	463b      	mov	r3, r7
 80020a6:	4973      	ldr	r1, [pc, #460]	@ (8002274 <main+0x111c>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 fb69 	bl	8003780 <get_temp>
		if (result.comms_ok){
 80020ae:	783b      	ldrb	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <main+0xf88>
			for (uint8_t i = 0; i <= result.return_length; i++) {
 80020b4:	2300      	movs	r3, #0
 80020b6:	77fb      	strb	r3, [r7, #31]
 80020b8:	e00d      	b.n	80020d6 <main+0xf7e>
				uint8_t * floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 80020ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002278 <main+0x1120>)
 80020bc:	61bb      	str	r3, [r7, #24]
				floatPtr[i] = result.return_value[i];
 80020be:	7ffa      	ldrb	r2, [r7, #31]
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	440b      	add	r3, r1
 80020c6:	3220      	adds	r2, #32
 80020c8:	443a      	add	r2, r7
 80020ca:	f812 2c1e 	ldrb.w	r2, [r2, #-30]
 80020ce:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i <= result.return_length; i++) {
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	3301      	adds	r3, #1
 80020d4:	77fb      	strb	r3, [r7, #31]
 80020d6:	787b      	ldrb	r3, [r7, #1]
 80020d8:	7ffa      	ldrb	r2, [r7, #31]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d9ed      	bls.n	80020ba <main+0xf62>
 80020de:	e003      	b.n	80020e8 <main+0xf90>
			}
		}
		else {
			SMD_TEMP_SENSE.temp = 0x00;
 80020e0:	4b64      	ldr	r3, [pc, #400]	@ (8002274 <main+0x111c>)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
		}


		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 80020e8:	4b64      	ldr	r3, [pc, #400]	@ (800227c <main+0x1124>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <main+0xf9e>
 80020f0:	f001 f91c 	bl	800332c <RX_Receive>
 80020f4:	e000      	b.n	80020f8 <main+0xfa0>
 80020f6:	bf00      	nop

		//Check if we need to go directly to PURGE
		if(switch_case_state == 10)
 80020f8:	4b61      	ldr	r3, [pc, #388]	@ (8002280 <main+0x1128>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b0a      	cmp	r3, #10
 80020fe:	f000 8706 	beq.w	8002f0e <main+0x1db6>
		{
			break; //enter PURGE state
		}
		else
		{
			switch_case_state = 1; //input selector state
 8002102:	4b5f      	ldr	r3, [pc, #380]	@ (8002280 <main+0x1128>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
			break;
 8002108:	f000 bf04 	b.w	8002f14 <main+0x1dbc>
//								Checks switch input and sets LED outputs

	case 1:

		//Set SMD LEDs as per current case/state
		LED_1.port->ODR &= ~LED_1_PWR;
 800210c:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <main+0x112c>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <main+0x112c>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800211a:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 800211c:	4b5a      	ldr	r3, [pc, #360]	@ (8002288 <main+0x1130>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	4b59      	ldr	r3, [pc, #356]	@ (8002288 <main+0x1130>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800212a:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 800212c:	4b57      	ldr	r3, [pc, #348]	@ (800228c <main+0x1134>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	4b56      	ldr	r3, [pc, #344]	@ (800228c <main+0x1134>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800213a:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 800213c:	4b54      	ldr	r3, [pc, #336]	@ (8002290 <main+0x1138>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <main+0x1138>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800214a:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 800214c:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <main+0x113c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	4b50      	ldr	r3, [pc, #320]	@ (8002294 <main+0x113c>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800215a:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 800215c:	4b4e      	ldr	r3, [pc, #312]	@ (8002298 <main+0x1140>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <main+0x1140>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800216a:	615a      	str	r2, [r3, #20]

			//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800216c:	4b43      	ldr	r3, [pc, #268]	@ (800227c <main+0x1124>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <main+0x1022>
 8002174:	f001 f8da 	bl	800332c <RX_Receive>
 8002178:	e000      	b.n	800217c <main+0x1024>
 800217a:	bf00      	nop

			//check for either remote control (== 0) or local control (== 1)
		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == 0)
 800217c:	4b47      	ldr	r3, [pc, #284]	@ (800229c <main+0x1144>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d114      	bne.n	80021b4 <main+0x105c>
		{
				//Change LED State
			led_remote.port->ODR |= LOCAL_CONTROL_SW;			//Set Remote CTRL LED
 800218a:	4b45      	ldr	r3, [pc, #276]	@ (80022a0 <main+0x1148>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	4b43      	ldr	r3, [pc, #268]	@ (80022a0 <main+0x1148>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002198:	615a      	str	r2, [r3, #20]
			led_local.port->ODR &= ~(LOCAL_CONTROL_SW);			//Off Local CTRL LED
 800219a:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <main+0x114c>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	4b40      	ldr	r3, [pc, #256]	@ (80022a4 <main+0x114c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021a8:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 3; //remote control
 80021aa:	4b35      	ldr	r3, [pc, #212]	@ (8002280 <main+0x1128>)
 80021ac:	2203      	movs	r2, #3
 80021ae:	701a      	strb	r2, [r3, #0]
			break;
 80021b0:	f000 beb0 	b.w	8002f14 <main+0x1dbc>
		}
		else //Local Control (==1)
		{
			//Change LED State
			led_remote.port->ODR &= ~(LOCAL_CONTROL_SW);		//Off Remote CTRL LED
 80021b4:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <main+0x1148>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <main+0x1148>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021c2:	615a      	str	r2, [r3, #20]
			led_local.port->ODR |= LOCAL_CONTROL_SW;			//Set Local CTRL LED
 80021c4:	4b37      	ldr	r3, [pc, #220]	@ (80022a4 <main+0x114c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <main+0x114c>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021d2:	615a      	str	r2, [r3, #20]
			//Change switch case state
			switch_case_state = 2; //local control
 80021d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <main+0x1128>)
 80021d6:	2202      	movs	r2, #2
 80021d8:	701a      	strb	r2, [r3, #0]
			break;
 80021da:	f000 be9b 	b.w	8002f14 <main+0x1dbc>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021de:	b672      	cpsid	i
}
 80021e0:	bf00      	nop

		__disable_irq();

		//Read in switch inputs to state_local var
		state_local =
		((DUM_SW.port->IDR & DUMP_SW) << 7) +
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <main+0x1150>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	691b      	ldr	r3, [r3, #16]
		((N2O_SW.port->IDR & N2O_ISO_SW) << 6) +
 80021e8:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <main+0x1154>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	691b      	ldr	r3, [r3, #16]
		((O2_IS_SW.port->IDR & O2_ISO_SW) << 5) +
 80021ee:	4b30      	ldr	r3, [pc, #192]	@ (80022b0 <main+0x1158>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	691b      	ldr	r3, [r3, #16]
		((IGNITION_IS_SW.port->IDR & IGNITION_SW) << 4) +
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <main+0x115c>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
		(activate_SW.port->IDR & ACTIVATE_SW);
 80021fa:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <main+0x1160>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	691b      	ldr	r3, [r3, #16]
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 8002200:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <main+0x1164>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	b2da      	uxtb	r2, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 8002212:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <main+0x1168>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002222:	b2db      	uxtb	r3, r3
		((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 8002224:	4413      	add	r3, r2
 8002226:	b2da      	uxtb	r2, r3
		((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
 8002228:	4b26      	ldr	r3, [pc, #152]	@ (80022c4 <main+0x116c>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	b2db      	uxtb	r3, r3
		((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 800223a:	4413      	add	r3, r2
 800223c:	b2da      	uxtb	r2, r3
		state_local =
 800223e:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <main+0x1170>)
 8002240:	701a      	strb	r2, [r3, #0]

		//Move to local control output setting state
		switch_case_state = 0x0F;
 8002242:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <main+0x1128>)
 8002244:	220f      	movs	r2, #15
 8002246:	701a      	strb	r2, [r3, #0]
		break;
 8002248:	f000 be64 	b.w	8002f14 <main+0x1dbc>
//*******************************REMOTE ACCESS - TIMER UPDATES*************************************************************
//								Enable Interrupts
	case 3:

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <main+0x1124>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03b      	beq.n	80022cc <main+0x1174>
 8002254:	f001 f86a 	bl	800332c <RX_Receive>
 8002258:	e039      	b.n	80022ce <main+0x1176>
 800225a:	bf00      	nop
 800225c:	20000548 	.word	0x20000548
 8002260:	20000008 	.word	0x20000008
 8002264:	200000cc 	.word	0x200000cc
 8002268:	20000554 	.word	0x20000554
 800226c:	20000560 	.word	0x20000560
 8002270:	2000056c 	.word	0x2000056c
 8002274:	2000000c 	.word	0x2000000c
 8002278:	20000010 	.word	0x20000010
 800227c:	200000d2 	.word	0x200000d2
 8002280:	200000c8 	.word	0x200000c8
 8002284:	20000380 	.word	0x20000380
 8002288:	20000398 	.word	0x20000398
 800228c:	200003b0 	.word	0x200003b0
 8002290:	200003c8 	.word	0x200003c8
 8002294:	200003e0 	.word	0x200003e0
 8002298:	200003f8 	.word	0x200003f8
 800229c:	20000428 	.word	0x20000428
 80022a0:	20000320 	.word	0x20000320
 80022a4:	20000308 	.word	0x20000308
 80022a8:	20000440 	.word	0x20000440
 80022ac:	20000458 	.word	0x20000458
 80022b0:	20000470 	.word	0x20000470
 80022b4:	20000488 	.word	0x20000488
 80022b8:	20000410 	.word	0x20000410
 80022bc:	200004a0 	.word	0x200004a0
 80022c0:	200004b8 	.word	0x200004b8
 80022c4:	200004d0 	.word	0x200004d0
 80022c8:	200000ca 	.word	0x200000ca
 80022cc:	bf00      	nop

		//Enable interrupts for LoRa
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022ce:	2017      	movs	r0, #23
 80022d0:	f7fe fed6 	bl	8001080 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI9_5_IRQn,9);
 80022d4:	2109      	movs	r1, #9
 80022d6:	2017      	movs	r0, #23
 80022d8:	f7fe ff14 	bl	8001104 <__NVIC_SetPriority>
		//NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
		//NVIC_SetPriority(TIM1_UP_TIM10_IRQn,10);

		//Move to remote access output setting state
		switch_case_state = 4;
 80022dc:	4b9b      	ldr	r3, [pc, #620]	@ (800254c <main+0x13f4>)
 80022de:	2204      	movs	r2, #4
 80022e0:	701a      	strb	r2, [r3, #0]
		 * B2: Ignition Selected
		 * B1: Gas Filled selected
		 * B0: System Activated
		 */

		break;
 80022e2:	f000 be17 	b.w	8002f14 <main+0x1dbc>
//**************************REMOTE ACCESS - OUTPUT ACTUATION*************************************************************
//							Actuates outputs depended on state flags within last received LoRa packet
	case 4:

		LED_1.port -> ODR &= ~LED_1_PWR;
 80022e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002550 <main+0x13f8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	4b98      	ldr	r3, [pc, #608]	@ (8002550 <main+0x13f8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022f4:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 80022f6:	4b97      	ldr	r3, [pc, #604]	@ (8002554 <main+0x13fc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b95      	ldr	r3, [pc, #596]	@ (8002554 <main+0x13fc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002304:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8002306:	4b94      	ldr	r3, [pc, #592]	@ (8002558 <main+0x1400>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	4b92      	ldr	r3, [pc, #584]	@ (8002558 <main+0x1400>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002314:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 8002316:	4b91      	ldr	r3, [pc, #580]	@ (800255c <main+0x1404>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	4b8f      	ldr	r3, [pc, #572]	@ (800255c <main+0x1404>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002324:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 8002326:	4b8e      	ldr	r3, [pc, #568]	@ (8002560 <main+0x1408>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	4b8c      	ldr	r3, [pc, #560]	@ (8002560 <main+0x1408>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002334:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 8002336:	4b8b      	ldr	r3, [pc, #556]	@ (8002564 <main+0x140c>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	4b89      	ldr	r3, [pc, #548]	@ (8002564 <main+0x140c>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002344:	615a      	str	r2, [r3, #20]

		//Check if SX1272 has recieved a packet, if not move on
		if(triggerRX){RX_Receive();}else{__asm("NOP");}
 8002346:	4b88      	ldr	r3, [pc, #544]	@ (8002568 <main+0x1410>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <main+0x11fc>
 800234e:	f000 ffed 	bl	800332c <RX_Receive>
 8002352:	e000      	b.n	8002356 <main+0x11fe>
 8002354:	bf00      	nop

		//Check if System activated bit was set in last received packet
		if((state & SYSTEM_ACTIVATED) != SYSTEM_ACTIVATED)
 8002356:	4b85      	ldr	r3, [pc, #532]	@ (800256c <main+0x1414>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <main+0x1214>
		{
			//If system is not active, should go straight to PURGE state
			switch_case_state = 10;
 8002362:	4b7a      	ldr	r3, [pc, #488]	@ (800254c <main+0x13f4>)
 8002364:	220a      	movs	r2, #10
 8002366:	701a      	strb	r2, [r3, #0]
			break;
 8002368:	f000 bdd4 	b.w	8002f14 <main+0x1dbc>
		//	CH1_ARM.port->ODR |= (CH1_Arm);
		//	CH1_OP.port->ODR |= (CH1_Operate);
		//}

		//Check if manual purge bit was set in last received packet
		else if( ((state & MANUAL_PURGE) == MANUAL_PURGE) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED) )
 800236c:	4b7f      	ldr	r3, [pc, #508]	@ (800256c <main+0x1414>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	da0a      	bge.n	800238c <main+0x1234>
 8002376:	4b7d      	ldr	r3, [pc, #500]	@ (800256c <main+0x1414>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <main+0x1234>
		{
			//If manual purge was set, should go straight to PURGE state
			switch_case_state = 10;
 8002382:	4b72      	ldr	r3, [pc, #456]	@ (800254c <main+0x13f4>)
 8002384:	220a      	movs	r2, #10
 8002386:	701a      	strb	r2, [r3, #0]
			break;
 8002388:	f000 bdc4 	b.w	8002f14 <main+0x1dbc>
		}
// ------------------- Pass this point, the system is active, and manual purge has not been selected! -------------------

		//If neither Gas or Ignition selected, go to neutral state
		else if( ((state & GAS_FILLED_SELECTED) == 0) && ((state & IGNITION_SELECTED) == 0) ) //0 to indicate neither are selected
 800238c:	4b77      	ldr	r3, [pc, #476]	@ (800256c <main+0x1414>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <main+0x1256>
 8002398:	4b74      	ldr	r3, [pc, #464]	@ (800256c <main+0x1414>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <main+0x1256>
		{
			switch_case_state = 9; //go into neutral state!
 80023a4:	4b69      	ldr	r3, [pc, #420]	@ (800254c <main+0x13f4>)
 80023a6:	2209      	movs	r2, #9
 80023a8:	701a      	strb	r2, [r3, #0]
			break;
 80023aa:	f000 bdb3 	b.w	8002f14 <main+0x1dbc>
		}

		//If Ignition is selected
		else if ( ((state & IGNITION_SELECTED) == IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) != GAS_FILLED_SELECTED))
 80023ae:	4b6f      	ldr	r3, [pc, #444]	@ (800256c <main+0x1414>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d038      	beq.n	800242c <main+0x12d4>
 80023ba:	4b6c      	ldr	r3, [pc, #432]	@ (800256c <main+0x1414>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d132      	bne.n	800242c <main+0x12d4>
		{
			//Ensure N2O Solenoid is closed, and turn off LED
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 80023c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <main+0x1418>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	4b68      	ldr	r3, [pc, #416]	@ (8002570 <main+0x1418>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023d4:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 80023d6:	4b67      	ldr	r3, [pc, #412]	@ (8002574 <main+0x141c>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	4b65      	ldr	r3, [pc, #404]	@ (8002574 <main+0x141c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e4:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 80023e6:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <main+0x1420>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	4b62      	ldr	r3, [pc, #392]	@ (8002578 <main+0x1420>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f022 0220 	bic.w	r2, r2, #32
 80023f4:	615a      	str	r2, [r3, #20]


			//If Ignition FIRE bit is set, time to light this puppy
			if((state & IGNITION_FIRE) == IGNITION_FIRE)
 80023f6:	4b5d      	ldr	r3, [pc, #372]	@ (800256c <main+0x1414>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <main+0x12b4>
			{
				switch_case_state = 0x80;
 8002402:	4b52      	ldr	r3, [pc, #328]	@ (800254c <main+0x13f4>)
 8002404:	2280      	movs	r2, #128	@ 0x80
 8002406:	701a      	strb	r2, [r3, #0]
				break;
 8002408:	f000 bd84 	b.w	8002f14 <main+0x1dbc>
			}
			//If O2 Fill bit is set, enable the O2 Solenoids
			else if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 800240c:	4b57      	ldr	r3, [pc, #348]	@ (800256c <main+0x1414>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <main+0x12ca>
				switch_case_state = 8;
 8002418:	4b4c      	ldr	r3, [pc, #304]	@ (800254c <main+0x13f4>)
 800241a:	2208      	movs	r2, #8
 800241c:	701a      	strb	r2, [r3, #0]
				break;
 800241e:	f000 bd79 	b.w	8002f14 <main+0x1dbc>
			}
			//Otherwise go to neutral
			else{
				switch_case_state = 9;
 8002422:	4b4a      	ldr	r3, [pc, #296]	@ (800254c <main+0x13f4>)
 8002424:	2209      	movs	r2, #9
 8002426:	701a      	strb	r2, [r3, #0]
				break;
 8002428:	f000 bd74 	b.w	8002f14 <main+0x1dbc>
			}
		}

// ------------------- Pass this point, ignite is NOT selected, and gas fill state has been selected -------------------

		else if ( ((state & IGNITION_SELECTED) != IGNITION_SELECTED) && ((state & GAS_FILLED_SELECTED) == GAS_FILLED_SELECTED))
 800242c:	4b4f      	ldr	r3, [pc, #316]	@ (800256c <main+0x1414>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d120      	bne.n	800247a <main+0x1322>
 8002438:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <main+0x1414>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01a      	beq.n	800247a <main+0x1322>
		{
//N2O and PURGE have not been selected, go to neutral state
			if((state & SWITCH_SELECTOR) == SWITCH_SELECTOR)
 8002444:	4b49      	ldr	r3, [pc, #292]	@ (800256c <main+0x1414>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <main+0x1302>
			{
				switch_case_state = 9;
 8002450:	4b3e      	ldr	r3, [pc, #248]	@ (800254c <main+0x13f4>)
 8002452:	2209      	movs	r2, #9
 8002454:	701a      	strb	r2, [r3, #0]
				break;
 8002456:	f000 bd5d 	b.w	8002f14 <main+0x1dbc>
			}
//N20 Fill is selected, move to N2O actuation state
			else if( (state & N2O_FILL_ACTIVATE) == N2O_FILL_ACTIVATE)
 800245a:	4b44      	ldr	r3, [pc, #272]	@ (800256c <main+0x1414>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <main+0x1318>
			{
				switch_case_state = 7;
 8002466:	4b39      	ldr	r3, [pc, #228]	@ (800254c <main+0x13f4>)
 8002468:	2207      	movs	r2, #7
 800246a:	701a      	strb	r2, [r3, #0]
				break;
 800246c:	f000 bd52 	b.w	8002f14 <main+0x1dbc>
			}
//If neither are selected, some error... Go to neutral state for safety, and set error flag
			else
			{
				//get error flag in here as well!
				switch_case_state = 9; //Something has gone wrong and weird - go to neutral state and stop gas flow
 8002470:	4b36      	ldr	r3, [pc, #216]	@ (800254c <main+0x13f4>)
 8002472:	2209      	movs	r2, #9
 8002474:	701a      	strb	r2, [r3, #0]
				break;
 8002476:	f000 bd4d 	b.w	8002f14 <main+0x1dbc>

//*******************************LOCAL ACCESS*************************************************************
	case 0x0F:


		LED_1.port -> ODR |= LED_1_PWR;
 800247a:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <main+0x13f8>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <main+0x13f8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002488:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 800248a:	4b32      	ldr	r3, [pc, #200]	@ (8002554 <main+0x13fc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	4b30      	ldr	r3, [pc, #192]	@ (8002554 <main+0x13fc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002498:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 800249a:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <main+0x1400>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <main+0x1400>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a8:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 80024aa:	4b2c      	ldr	r3, [pc, #176]	@ (800255c <main+0x1404>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <main+0x1404>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024b8:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 80024ba:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <main+0x1408>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <main+0x1408>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c8:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 80024ca:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <main+0x140c>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <main+0x140c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d8:	615a      	str	r2, [r3, #20]


		if((state_local & ACTIVATE_SW) != ACTIVATE_SW) //if the system is not active
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <main+0x1424>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <main+0x1398>
		{
			switch_case_state = 10;
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <main+0x13f4>)
 80024e8:	220a      	movs	r2, #10
 80024ea:	701a      	strb	r2, [r3, #0]
			break;
 80024ec:	f000 bd12 	b.w	8002f14 <main+0x1dbc>
		}

//Ignition Key Swtich Selected
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <main+0x1424>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8094 	beq.w	8002626 <main+0x14ce>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <main+0x1424>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 808d 	bne.w	8002626 <main+0x14ce>
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 800250c:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <main+0x1424>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
				(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 8086 	bne.w	8002626 <main+0x14ce>
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 800251a:	4b18      	ldr	r3, [pc, #96]	@ (800257c <main+0x1424>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
				(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8002522:	2b00      	cmp	r3, #0
 8002524:	d17f      	bne.n	8002626 <main+0x14ce>
				(state_local & O2_DEADMAN_SW) != O2_DEADMAN_SW) //is O2 deadman off
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <main+0x1424>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f003 0320 	and.w	r3, r3, #32
				(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 800252e:	2b00      	cmp	r3, #0
 8002530:	d179      	bne.n	8002626 <main+0x14ce>
		{

			//Adding 'dump' flag to detect the change in interrupt state in key areas!
			//periodic 'dump' flag checks are needed along certain areas as to ensure state is checked regardless
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <main+0x1428>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d124      	bne.n	8002584 <main+0x142c>
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <main+0x13f4>)
 800253c:	220a      	movs	r2, #10
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <main+0x1428>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	f000 bce5 	b.w	8002f14 <main+0x1dbc>
 800254a:	bf00      	nop
 800254c:	200000c8 	.word	0x200000c8
 8002550:	20000380 	.word	0x20000380
 8002554:	20000398 	.word	0x20000398
 8002558:	200003b0 	.word	0x200003b0
 800255c:	200003c8 	.word	0x200003c8
 8002560:	200003e0 	.word	0x200003e0
 8002564:	200003f8 	.word	0x200003f8
 8002568:	200000d2 	.word	0x200000d2
 800256c:	200000c9 	.word	0x200000c9
 8002570:	20000218 	.word	0x20000218
 8002574:	20000200 	.word	0x20000200
 8002578:	20000350 	.word	0x20000350
 800257c:	200000ca 	.word	0x200000ca
 8002580:	200000cf 	.word	0x200000cf
			else{__asm("NOP");}
 8002584:	bf00      	nop
			//does nothing when false condition is set - ie when dump button has not been pressed!
			CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002586:	4b62      	ldr	r3, [pc, #392]	@ (8002710 <main+0x15b8>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	4b60      	ldr	r3, [pc, #384]	@ (8002710 <main+0x15b8>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002594:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR &= ~(CH3_Operate);
 8002596:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <main+0x15bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <main+0x15bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a4:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR &= ~(N2O_LED);
 80025a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002718 <main+0x15c0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002718 <main+0x15c0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f022 0220 	bic.w	r2, r2, #32
 80025b4:	615a      	str	r2, [r3, #20]
			led_o2.port->ODR &= ~(O2_LED);
 80025b6:	4b59      	ldr	r3, [pc, #356]	@ (800271c <main+0x15c4>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	4b57      	ldr	r3, [pc, #348]	@ (800271c <main+0x15c4>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c4:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 80025c6:	4b56      	ldr	r3, [pc, #344]	@ (8002720 <main+0x15c8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	4b54      	ldr	r3, [pc, #336]	@ (8002720 <main+0x15c8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025d4:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 80025d6:	4b53      	ldr	r3, [pc, #332]	@ (8002724 <main+0x15cc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <main+0x15cc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e4:	615a      	str	r2, [r3, #20]


			Ignition1_ARM.port->ODR |= IGNITION1_ARM;
 80025e6:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <main+0x15d0>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <main+0x15d0>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025f4:	615a      	str	r2, [r3, #20]
			Ignition2_ARM.port->ODR |= IGNITION2_ARM;
 80025f6:	4b4d      	ldr	r3, [pc, #308]	@ (800272c <main+0x15d4>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <main+0x15d4>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f042 0208 	orr.w	r2, r2, #8
 8002604:	615a      	str	r2, [r3, #20]
//Ignition Rotary Switch Selected
			if((state_local & IGNITE_DEADMAN_SW) == IGNITE_DEADMAN_SW) //is IGNITE button pressed!
 8002606:	4b4a      	ldr	r3, [pc, #296]	@ (8002730 <main+0x15d8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <main+0x14c4>
			{
				switch_case_state = 0x80;  //IGNITE state
 8002612:	4b48      	ldr	r3, [pc, #288]	@ (8002734 <main+0x15dc>)
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	701a      	strb	r2, [r3, #0]
				break;
 8002618:	f000 bc7c 	b.w	8002f14 <main+0x1dbc>
			}
//Ignition Key Switch but NO Ignition Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 800261c:	4b45      	ldr	r3, [pc, #276]	@ (8002734 <main+0x15dc>)
 800261e:	2209      	movs	r2, #9
 8002620:	701a      	strb	r2, [r3, #0]
				break;
 8002622:	f000 bc77 	b.w	8002f14 <main+0x1dbc>
			}
		}


//Both Keyswitches for N2O and O2 are triggered
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002626:	4b42      	ldr	r3, [pc, #264]	@ (8002730 <main+0x15d8>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d017      	beq.n	8002662 <main+0x150a>
				(state_local & O2_ISO_SW) == O2_ISO_SW) //error check if both ISO switches are triggered for N20 and O2
 8002632:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <main+0x15d8>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 800263a:	2b00      	cmp	r3, #0
 800263c:	d011      	beq.n	8002662 <main+0x150a>
		{
			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 800263e:	4b3e      	ldr	r3, [pc, #248]	@ (8002738 <main+0x15e0>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <main+0x14fe>
 8002646:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <main+0x15dc>)
 8002648:	220a      	movs	r2, #10
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <main+0x15e0>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	f000 bc5f 	b.w	8002f14 <main+0x1dbc>
			else{__asm("NOP");}
 8002656:	bf00      	nop

			//if local dump flag has been triggered REGARDLESS of input control state!
			switch_case_state = 10;
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <main+0x15dc>)
 800265a:	220a      	movs	r2, #10
 800265c:	701a      	strb	r2, [r3, #0]
			break;
 800265e:	f000 bc59 	b.w	8002f14 <main+0x1dbc>
		}


//N2O Keyswitch
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002662:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <main+0x15d8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d022      	beq.n	80026b4 <main+0x155c>
				(state_local & O2_ISO_SW) != O2_ISO_SW)
 800266e:	4b30      	ldr	r3, [pc, #192]	@ (8002730 <main+0x15d8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
		else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11c      	bne.n	80026b4 <main+0x155c>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 800267a:	4b2f      	ldr	r3, [pc, #188]	@ (8002738 <main+0x15e0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <main+0x153a>
 8002682:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <main+0x15dc>)
 8002684:	220a      	movs	r2, #10
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <main+0x15e0>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	f000 bc41 	b.w	8002f14 <main+0x1dbc>
			else{__asm("NOP");}
 8002692:	bf00      	nop

//N2O Rotary Switch
			if((state_local& N2O_DEADMAN_SW) == N2O_DEADMAN_SW)
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <main+0x15d8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <main+0x1552>
			{
				switch_case_state = 7; // N2O Fill State
 80026a0:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <main+0x15dc>)
 80026a2:	2207      	movs	r2, #7
 80026a4:	701a      	strb	r2, [r3, #0]
				break;
 80026a6:	f000 bc35 	b.w	8002f14 <main+0x1dbc>
			}
//N2O Keyswitch but NO N2O Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <main+0x15dc>)
 80026ac:	2209      	movs	r2, #9
 80026ae:	701a      	strb	r2, [r3, #0]
				break;
 80026b0:	f000 bc30 	b.w	8002f14 <main+0x1dbc>
			}
		}


//O2 Keyswitch
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 80026b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <main+0x15d8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <main+0x15ae>
				(state_local & N2O_ISO_SW) != N2O_ISO_SW)
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <main+0x15d8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
		else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11c      	bne.n	8002706 <main+0x15ae>
		{

			if(dump_flag == 1){switch_case_state = 10; dump_flag = 0; break;}
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <main+0x15e0>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <main+0x158c>
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <main+0x15dc>)
 80026d6:	220a      	movs	r2, #10
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <main+0x15e0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	f000 bc18 	b.w	8002f14 <main+0x1dbc>
			else{__asm("NOP");}
 80026e4:	bf00      	nop

//O2 Rotary Switch
			if((state_local & O2_DEADMAN_SW) == O2_DEADMAN_SW)
 80026e6:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <main+0x15d8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <main+0x15a4>
			{
				switch_case_state = 8;
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <main+0x15dc>)
 80026f4:	2208      	movs	r2, #8
 80026f6:	701a      	strb	r2, [r3, #0]
				break;
 80026f8:	f000 bc0c 	b.w	8002f14 <main+0x1dbc>
			}
//O2 Keyswitch but NO O2 Rotary Switch
			else
			{
				switch_case_state = 9; //neutral state
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <main+0x15dc>)
 80026fe:	2209      	movs	r2, #9
 8002700:	701a      	strb	r2, [r3, #0]
				break;
 8002702:	f000 bc07 	b.w	8002f14 <main+0x1dbc>
		}

//If power is ON but other bits are off
		else
		{
			switch_case_state = 9; // Neutral state
 8002706:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <main+0x15dc>)
 8002708:	2209      	movs	r2, #9
 800270a:	701a      	strb	r2, [r3, #0]
			break;
 800270c:	f000 bc02 	b.w	8002f14 <main+0x1dbc>
 8002710:	20000218 	.word	0x20000218
 8002714:	20000200 	.word	0x20000200
 8002718:	20000350 	.word	0x20000350
 800271c:	20000368 	.word	0x20000368
 8002720:	200001d0 	.word	0x200001d0
 8002724:	200001b8 	.word	0x200001b8
 8002728:	20000290 	.word	0x20000290
 800272c:	200002c0 	.word	0x200002c0
 8002730:	200000ca 	.word	0x200000ca
 8002734:	200000c8 	.word	0x200000c8
 8002738:	200000cf 	.word	0x200000cf

//**************************N2O FILL *************************************************************
	case 7:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 800273c:	4b7e      	ldr	r3, [pc, #504]	@ (8002938 <main+0x17e0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	4b7d      	ldr	r3, [pc, #500]	@ (8002938 <main+0x17e0>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800274a:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 800274c:	4b7b      	ldr	r3, [pc, #492]	@ (800293c <main+0x17e4>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b7a      	ldr	r3, [pc, #488]	@ (800293c <main+0x17e4>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275a:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 800275c:	4b78      	ldr	r3, [pc, #480]	@ (8002940 <main+0x17e8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	4b77      	ldr	r3, [pc, #476]	@ (8002940 <main+0x17e8>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800276a:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 800276c:	4b75      	ldr	r3, [pc, #468]	@ (8002944 <main+0x17ec>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	4b74      	ldr	r3, [pc, #464]	@ (8002944 <main+0x17ec>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 800277c:	4b72      	ldr	r3, [pc, #456]	@ (8002948 <main+0x17f0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	4b71      	ldr	r3, [pc, #452]	@ (8002948 <main+0x17f0>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800278a:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 800278c:	4b6f      	ldr	r3, [pc, #444]	@ (800294c <main+0x17f4>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <main+0x17f4>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800279a:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 14;
 800279c:	4b6c      	ldr	r3, [pc, #432]	@ (8002950 <main+0x17f8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 80027a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002954 <main+0x17fc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002954 <main+0x17fc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027b0:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 80027b2:	4b69      	ldr	r3, [pc, #420]	@ (8002958 <main+0x1800>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	4b67      	ldr	r3, [pc, #412]	@ (8002958 <main+0x1800>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027c0:	615a      	str	r2, [r3, #20]

		//Ensure O2 Fill is not filling
		led_o2.port->ODR &= ~(O2_LED);
 80027c2:	4b66      	ldr	r3, [pc, #408]	@ (800295c <main+0x1804>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	4b64      	ldr	r3, [pc, #400]	@ (800295c <main+0x1804>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027d0:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 80027d2:	4b63      	ldr	r3, [pc, #396]	@ (8002960 <main+0x1808>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <main+0x1808>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027e0:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 80027e2:	4b60      	ldr	r3, [pc, #384]	@ (8002964 <main+0x180c>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002964 <main+0x180c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f0:	615a      	str	r2, [r3, #20]

		//Ensure igntion is not igniting
		Ignition1_ARM.port->ODR &= ~(IGNITION1_ARM);
 80027f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <main+0x1810>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <main+0x1810>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002800:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION1_OP);
 8002802:	4b5a      	ldr	r3, [pc, #360]	@ (800296c <main+0x1814>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	4b58      	ldr	r3, [pc, #352]	@ (800296c <main+0x1814>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002810:	615a      	str	r2, [r3, #20]

		//Enable N2O Fill
		led_n2o.port->ODR|=N2O_LED;
 8002812:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <main+0x1818>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	4b55      	ldr	r3, [pc, #340]	@ (8002970 <main+0x1818>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR |= CH3_Arm;
 8002822:	4b54      	ldr	r3, [pc, #336]	@ (8002974 <main+0x181c>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	4b52      	ldr	r3, [pc, #328]	@ (8002974 <main+0x181c>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002830:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR |= CH3_Operate;
 8002832:	4b51      	ldr	r3, [pc, #324]	@ (8002978 <main+0x1820>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	4b4f      	ldr	r3, [pc, #316]	@ (8002978 <main+0x1820>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002840:	615a      	str	r2, [r3, #20]
		switch_case_state = 0;
 8002842:	4b4e      	ldr	r3, [pc, #312]	@ (800297c <main+0x1824>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
		break;
 8002848:	e364      	b.n	8002f14 <main+0x1dbc>

//**************************O2 FILL*************************************************************
	case 8:

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 800284a:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <main+0x17e0>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <main+0x17e0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002858:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 800285a:	4b38      	ldr	r3, [pc, #224]	@ (800293c <main+0x17e4>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	4b36      	ldr	r3, [pc, #216]	@ (800293c <main+0x17e4>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002868:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 800286a:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <main+0x17e8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <main+0x17e8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002878:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 800287a:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <main+0x17ec>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	4b30      	ldr	r3, [pc, #192]	@ (8002944 <main+0x17ec>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002888:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 800288a:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <main+0x17f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <main+0x17f0>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002898:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 800289a:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <main+0x17f4>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <main+0x17f4>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a8:	615a      	str	r2, [r3, #20]

		//Clear Error
		error = 0x00 << 13;
 80028aa:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <main+0x17f8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	801a      	strh	r2, [r3, #0]

		//Ensure Purge is not purging
		CH1_ARM.port->ODR |= (CH1_Arm);
 80028b0:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <main+0x17fc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <main+0x17fc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028be:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <main+0x1800>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <main+0x1800>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028ce:	615a      	str	r2, [r3, #20]

		//Ensure N2O Fill is not filling
		led_n2o.port->ODR &= ~(N2O_LED);
 80028d0:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <main+0x1818>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <main+0x1818>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f022 0220 	bic.w	r2, r2, #32
 80028de:	615a      	str	r2, [r3, #20]
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 80028e0:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <main+0x181c>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <main+0x181c>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028ee:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <main+0x1820>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <main+0x1820>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fe:	615a      	str	r2, [r3, #20]

		//Enable O2 to flow
		led_o2.port->ODR|=O2_LED;
 8002900:	4b16      	ldr	r3, [pc, #88]	@ (800295c <main+0x1804>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <main+0x1804>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800290e:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR |= CH2_Arm;
 8002910:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <main+0x1808>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <main+0x1808>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800291e:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR |= CH2_Operate;
 8002920:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <main+0x180c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <main+0x180c>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800292e:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <main+0x1824>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
		break;
 8002936:	e2ed      	b.n	8002f14 <main+0x1dbc>
 8002938:	20000380 	.word	0x20000380
 800293c:	20000398 	.word	0x20000398
 8002940:	200003b0 	.word	0x200003b0
 8002944:	200003c8 	.word	0x200003c8
 8002948:	200003e0 	.word	0x200003e0
 800294c:	200003f8 	.word	0x200003f8
 8002950:	200000cc 	.word	0x200000cc
 8002954:	20000188 	.word	0x20000188
 8002958:	20000170 	.word	0x20000170
 800295c:	20000368 	.word	0x20000368
 8002960:	200001d0 	.word	0x200001d0
 8002964:	200001b8 	.word	0x200001b8
 8002968:	20000290 	.word	0x20000290
 800296c:	200002a8 	.word	0x200002a8
 8002970:	20000350 	.word	0x20000350
 8002974:	20000218 	.word	0x20000218
 8002978:	20000200 	.word	0x20000200
 800297c:	200000c8 	.word	0x200000c8

//**************************NEUTRAL STATE*************************************************************
	case 9:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8002980:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb0 <main+0x1a58>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb0 <main+0x1a58>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800298e:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002990:	4b88      	ldr	r3, [pc, #544]	@ (8002bb4 <main+0x1a5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	4b87      	ldr	r3, [pc, #540]	@ (8002bb4 <main+0x1a5c>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299e:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 80029a0:	4b85      	ldr	r3, [pc, #532]	@ (8002bb8 <main+0x1a60>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b84      	ldr	r3, [pc, #528]	@ (8002bb8 <main+0x1a60>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029ae:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR &= ~LED_4_PWR;
 80029b0:	4b82      	ldr	r3, [pc, #520]	@ (8002bbc <main+0x1a64>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	4b81      	ldr	r3, [pc, #516]	@ (8002bbc <main+0x1a64>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029be:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR &= ~LED_5_PWR;
 80029c0:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc0 <main+0x1a68>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <main+0x1a68>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ce:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR &= ~LED_6_PWR;
 80029d0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc4 <main+0x1a6c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	4b7b      	ldr	r3, [pc, #492]	@ (8002bc4 <main+0x1a6c>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029de:	615a      	str	r2, [r3, #20]


		//Turn OFF ignition coil relays
		Ignition1_ARM.port->ODR &= ~(IGNITION1_ARM);
 80029e0:	4b79      	ldr	r3, [pc, #484]	@ (8002bc8 <main+0x1a70>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	4b78      	ldr	r3, [pc, #480]	@ (8002bc8 <main+0x1a70>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 80029f0:	4b76      	ldr	r3, [pc, #472]	@ (8002bcc <main+0x1a74>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	4b75      	ldr	r3, [pc, #468]	@ (8002bcc <main+0x1a74>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f022 0208 	bic.w	r2, r2, #8
 80029fe:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION1_OP);
 8002a00:	4b73      	ldr	r3, [pc, #460]	@ (8002bd0 <main+0x1a78>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	4b72      	ldr	r3, [pc, #456]	@ (8002bd0 <main+0x1a78>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a0e:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002a10:	4b70      	ldr	r3, [pc, #448]	@ (8002bd4 <main+0x1a7c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <main+0x1a7c>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	615a      	str	r2, [r3, #20]


		//Ensure PURGE is not purging
		CH1_OP.port->ODR |= (CH1_Operate);
 8002a20:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <main+0x1a80>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	4b6c      	ldr	r3, [pc, #432]	@ (8002bd8 <main+0x1a80>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a2e:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002a30:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <main+0x1a84>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	4b69      	ldr	r3, [pc, #420]	@ (8002bdc <main+0x1a84>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3e:	615a      	str	r2, [r3, #20]

		//Ensure N2O is not filling
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002a40:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <main+0x1a88>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	4b66      	ldr	r3, [pc, #408]	@ (8002be0 <main+0x1a88>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a4e:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002a50:	4b64      	ldr	r3, [pc, #400]	@ (8002be4 <main+0x1a8c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b63      	ldr	r3, [pc, #396]	@ (8002be4 <main+0x1a8c>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5e:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8002a60:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <main+0x1a90>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	4b60      	ldr	r3, [pc, #384]	@ (8002be8 <main+0x1a90>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f022 0220 	bic.w	r2, r2, #32
 8002a6e:	615a      	str	r2, [r3, #20]

		//Ensure O2 is not filling
		led_o2.port->ODR &= ~(O2_LED);
 8002a70:	4b5e      	ldr	r3, [pc, #376]	@ (8002bec <main+0x1a94>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <main+0x1a94>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7e:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002a80:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf0 <main+0x1a98>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf0 <main+0x1a98>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a8e:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <main+0x1a9c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	4b57      	ldr	r3, [pc, #348]	@ (8002bf4 <main+0x1a9c>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9e:	615a      	str	r2, [r3, #20]


		switch_case_state = 0;
 8002aa0:	4b55      	ldr	r3, [pc, #340]	@ (8002bf8 <main+0x1aa0>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
		break;
 8002aa6:	e235      	b.n	8002f14 <main+0x1dbc>

//**************************PURGE STATE*************************************************************
	case 10:

		//Set SMD LEDs
		LED_1.port -> ODR |= LED_1_PWR;
 8002aa8:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <main+0x1a58>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <main+0x1a58>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ab6:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR |= LED_2_PWR;
 8002ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb4 <main+0x1a5c>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb4 <main+0x1a5c>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac6:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR |= LED_3_PWR;
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <main+0x1a60>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb8 <main+0x1a60>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ad6:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002ad8:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <main+0x1a64>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <main+0x1a64>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8002ae8:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <main+0x1a68>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <main+0x1a68>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af6:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002af8:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <main+0x1a6c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	4b31      	ldr	r3, [pc, #196]	@ (8002bc4 <main+0x1a6c>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b06:	615a      	str	r2, [r3, #20]
		//Presuming relay 1 is the DUMP relay!
		//PURGE is NO -> output a low to purge
		//output a high to stop purging!

		//Ensure Ignition is not igniting
		Ignition1_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002b08:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc8 <main+0x1a70>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <main+0x1a70>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f022 0208 	bic.w	r2, r2, #8
 8002b16:	615a      	str	r2, [r3, #20]
		Ignition1_OP.port->ODR &= ~(IGNITION2_OP);
 8002b18:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <main+0x1a78>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd0 <main+0x1a78>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	615a      	str	r2, [r3, #20]

		//Turn off N2O Solenoid and turn off LED
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <main+0x1a88>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002be0 <main+0x1a88>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b36:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002b38:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <main+0x1a8c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	4b29      	ldr	r3, [pc, #164]	@ (8002be4 <main+0x1a8c>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b46:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 8002b48:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <main+0x1a90>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	4b26      	ldr	r3, [pc, #152]	@ (8002be8 <main+0x1a90>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f022 0220 	bic.w	r2, r2, #32
 8002b56:	615a      	str	r2, [r3, #20]

		//Turn off O2 Solenoid and turn off LED
		led_o2.port->ODR &= ~(O2_LED);
 8002b58:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <main+0x1a94>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	4b23      	ldr	r3, [pc, #140]	@ (8002bec <main+0x1a94>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b66:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002b68:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <main+0x1a98>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <main+0x1a98>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b76:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 8002b78:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <main+0x1a9c>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <main+0x1a9c>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b86:	615a      	str	r2, [r3, #20]

		//Power off PURGE solenoid therefore starting purge
		CH1_ARM.port->ODR &= ~(CH1_Arm);
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <main+0x1a84>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <main+0x1a84>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b96:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR &= ~(CH1_Operate);
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <main+0x1a80>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <main+0x1a80>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ba6:	615a      	str	r2, [r3, #20]

		switch_case_state = 0;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <main+0x1aa0>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
		break;
 8002bae:	e1b1      	b.n	8002f14 <main+0x1dbc>
 8002bb0:	20000380 	.word	0x20000380
 8002bb4:	20000398 	.word	0x20000398
 8002bb8:	200003b0 	.word	0x200003b0
 8002bbc:	200003c8 	.word	0x200003c8
 8002bc0:	200003e0 	.word	0x200003e0
 8002bc4:	200003f8 	.word	0x200003f8
 8002bc8:	20000290 	.word	0x20000290
 8002bcc:	200002c0 	.word	0x200002c0
 8002bd0:	200002a8 	.word	0x200002a8
 8002bd4:	200002d8 	.word	0x200002d8
 8002bd8:	20000170 	.word	0x20000170
 8002bdc:	20000188 	.word	0x20000188
 8002be0:	20000218 	.word	0x20000218
 8002be4:	20000200 	.word	0x20000200
 8002be8:	20000350 	.word	0x20000350
 8002bec:	20000368 	.word	0x20000368
 8002bf0:	200001d0 	.word	0x200001d0
 8002bf4:	200001b8 	.word	0x200001b8
 8002bf8:	200000c8 	.word	0x200000c8
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	bf00      	nop

		//Disable IRQs - we are igniting, nothing can stop this....
		__disable_irq();

		//Set SMD LEDs
		LED_1.port -> ODR &= ~LED_1_PWR;
 8002c00:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <main+0x1b48>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <main+0x1b48>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c0e:	615a      	str	r2, [r3, #20]
		LED_2.port -> ODR &= ~LED_2_PWR;
 8002c10:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <main+0x1b4c>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <main+0x1b4c>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1e:	615a      	str	r2, [r3, #20]
		LED_3.port -> ODR &= ~LED_3_PWR;
 8002c20:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <main+0x1b50>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	4b20      	ldr	r3, [pc, #128]	@ (8002ca8 <main+0x1b50>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c2e:	615a      	str	r2, [r3, #20]
		LED_4.port -> ODR |= LED_4_PWR;
 8002c30:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <main+0x1b54>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <main+0x1b54>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3e:	615a      	str	r2, [r3, #20]
		LED_5.port -> ODR |= LED_5_PWR;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <main+0x1b58>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <main+0x1b58>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4e:	615a      	str	r2, [r3, #20]
		LED_6.port -> ODR |= LED_6_PWR;
 8002c50:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <main+0x1b5c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <main+0x1b5c>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	615a      	str	r2, [r3, #20]

		//Check O2 Fill status - as we check for igniton first in case 4 - we need to check O2 again to ensure that we actuate correctly
		if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE){
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <main+0x1b60>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02d      	beq.n	8002cc8 <main+0x1b70>
			//Turn ON O2 Solenoid and turn on LED
			led_o2.port->ODR |= (O2_LED);
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <main+0x1b64>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <main+0x1b64>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c7a:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm);
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <main+0x1b68>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <main+0x1b68>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c8a:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate);
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <main+0x1b6c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <main+0x1b6c>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c9a:	615a      	str	r2, [r3, #20]
 8002c9c:	e02c      	b.n	8002cf8 <main+0x1ba0>
 8002c9e:	bf00      	nop
 8002ca0:	20000380 	.word	0x20000380
 8002ca4:	20000398 	.word	0x20000398
 8002ca8:	200003b0 	.word	0x200003b0
 8002cac:	200003c8 	.word	0x200003c8
 8002cb0:	200003e0 	.word	0x200003e0
 8002cb4:	200003f8 	.word	0x200003f8
 8002cb8:	200000c9 	.word	0x200000c9
 8002cbc:	20000368 	.word	0x20000368
 8002cc0:	200001d0 	.word	0x200001d0
 8002cc4:	200001b8 	.word	0x200001b8
		}
		else {
			//Turn off O2 Solenoid and turn off LED
			led_o2.port->ODR &= ~(O2_LED);
 8002cc8:	4b93      	ldr	r3, [pc, #588]	@ (8002f18 <main+0x1dc0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	4b92      	ldr	r3, [pc, #584]	@ (8002f18 <main+0x1dc0>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cd6:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR &= ~(CH2_Arm);
 8002cd8:	4b90      	ldr	r3, [pc, #576]	@ (8002f1c <main+0x1dc4>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	4b8f      	ldr	r3, [pc, #572]	@ (8002f1c <main+0x1dc4>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ce6:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR &= ~(CH2_Operate);
 8002ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8002f20 <main+0x1dc8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	4b8c      	ldr	r3, [pc, #560]	@ (8002f20 <main+0x1dc8>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf6:	615a      	str	r2, [r3, #20]
		}

		//Ensure N2O LED are OFF
		led_n2o.port->ODR &= ~(N2O_LED);
 8002cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8002f24 <main+0x1dcc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	4b89      	ldr	r3, [pc, #548]	@ (8002f24 <main+0x1dcc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f022 0220 	bic.w	r2, r2, #32
 8002d06:	615a      	str	r2, [r3, #20]

		//Ensure N2O solenoid is OFF
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 8002d08:	4b87      	ldr	r3, [pc, #540]	@ (8002f28 <main+0x1dd0>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	4b86      	ldr	r3, [pc, #536]	@ (8002f28 <main+0x1dd0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d16:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 8002d18:	4b84      	ldr	r3, [pc, #528]	@ (8002f2c <main+0x1dd4>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b83      	ldr	r3, [pc, #524]	@ (8002f2c <main+0x1dd4>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d26:	615a      	str	r2, [r3, #20]

		//Ensure the DUMP solenoid is not dumping
		CH1_ARM.port->ODR |= (CH1_Arm);
 8002d28:	4b81      	ldr	r3, [pc, #516]	@ (8002f30 <main+0x1dd8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	4b80      	ldr	r3, [pc, #512]	@ (8002f30 <main+0x1dd8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d36:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= (CH1_Operate);
 8002d38:	4b7e      	ldr	r3, [pc, #504]	@ (8002f34 <main+0x1ddc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f34 <main+0x1ddc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d46:	615a      	str	r2, [r3, #20]


		//Spark Generation Sequence, 5 sparks total
	//	Ignition1_ARM.port->ODR |= IGNITION1_ARM;
		//Ignition1_OP.port->ODR |= IGNITION1_OP;
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002d48:	4b7b      	ldr	r3, [pc, #492]	@ (8002f38 <main+0x1de0>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f38 <main+0x1de0>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002d58:	4b78      	ldr	r3, [pc, #480]	@ (8002f3c <main+0x1de4>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	4b77      	ldr	r3, [pc, #476]	@ (8002f3c <main+0x1de4>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f042 0204 	orr.w	r2, r2, #4
 8002d66:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002d68:	201e      	movs	r0, #30
 8002d6a:	f001 f861 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002d6e:	4b73      	ldr	r3, [pc, #460]	@ (8002f3c <main+0x1de4>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	4b71      	ldr	r3, [pc, #452]	@ (8002f3c <main+0x1de4>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f022 0204 	bic.w	r2, r2, #4
 8002d7c:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f38 <main+0x1de0>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	4b6c      	ldr	r3, [pc, #432]	@ (8002f38 <main+0x1de0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002d8e:	201e      	movs	r0, #30
 8002d90:	f001 f84e 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002d94:	4b69      	ldr	r3, [pc, #420]	@ (8002f3c <main+0x1de4>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <main+0x1de4>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f042 0204 	orr.w	r2, r2, #4
 8002da2:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002da4:	4b64      	ldr	r3, [pc, #400]	@ (8002f38 <main+0x1de0>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	4b63      	ldr	r3, [pc, #396]	@ (8002f38 <main+0x1de0>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f042 0208 	orr.w	r2, r2, #8
 8002db2:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002db4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002db8:	f001 f83a 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8002f3c <main+0x1de4>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f3c <main+0x1de4>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f022 0204 	bic.w	r2, r2, #4
 8002dca:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8002f38 <main+0x1de0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b59      	ldr	r3, [pc, #356]	@ (8002f38 <main+0x1de0>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f022 0208 	bic.w	r2, r2, #8
 8002dda:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002ddc:	201e      	movs	r0, #30
 8002dde:	f001 f827 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002de2:	4b56      	ldr	r3, [pc, #344]	@ (8002f3c <main+0x1de4>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	4b54      	ldr	r3, [pc, #336]	@ (8002f3c <main+0x1de4>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f042 0204 	orr.w	r2, r2, #4
 8002df0:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002df2:	4b51      	ldr	r3, [pc, #324]	@ (8002f38 <main+0x1de0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f38 <main+0x1de0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f042 0208 	orr.w	r2, r2, #8
 8002e00:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002e02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e06:	f001 f813 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f3c <main+0x1de4>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <main+0x1de4>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f022 0204 	bic.w	r2, r2, #4
 8002e18:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002e1a:	4b47      	ldr	r3, [pc, #284]	@ (8002f38 <main+0x1de0>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	4b45      	ldr	r3, [pc, #276]	@ (8002f38 <main+0x1de0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f022 0208 	bic.w	r2, r2, #8
 8002e28:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002e2a:	201e      	movs	r0, #30
 8002e2c:	f001 f800 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002e30:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <main+0x1de4>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <main+0x1de4>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f042 0204 	orr.w	r2, r2, #4
 8002e3e:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002e40:	4b3d      	ldr	r3, [pc, #244]	@ (8002f38 <main+0x1de0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b3c      	ldr	r3, [pc, #240]	@ (8002f38 <main+0x1de0>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002e50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e54:	f000 ffec 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002e58:	4b38      	ldr	r3, [pc, #224]	@ (8002f3c <main+0x1de4>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <main+0x1de4>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f022 0204 	bic.w	r2, r2, #4
 8002e66:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002e68:	4b33      	ldr	r3, [pc, #204]	@ (8002f38 <main+0x1de0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b32      	ldr	r3, [pc, #200]	@ (8002f38 <main+0x1de0>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f022 0208 	bic.w	r2, r2, #8
 8002e76:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002e78:	201e      	movs	r0, #30
 8002e7a:	f000 ffd9 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <main+0x1de4>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <main+0x1de4>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <main+0x1de0>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	4b28      	ldr	r3, [pc, #160]	@ (8002f38 <main+0x1de0>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	615a      	str	r2, [r3, #20]
		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002e9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ea2:	f000 ffc5 	bl	8003e30 <HAL_Delay>
		Ignition2_OP.port->ODR &= ~(IGNITION2_OP);
 8002ea6:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <main+0x1de4>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	4b23      	ldr	r3, [pc, #140]	@ (8002f3c <main+0x1de4>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f022 0204 	bic.w	r2, r2, #4
 8002eb4:	615a      	str	r2, [r3, #20]
		Ignition2_ARM.port->ODR &= ~(IGNITION2_ARM);
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <main+0x1de0>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <main+0x1de0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	615a      	str	r2, [r3, #20]
		HAL_Delay(30); //provide a delay to ensure fire state has been activated for a long enough time
 8002ec6:	201e      	movs	r0, #30
 8002ec8:	f000 ffb2 	bl	8003e30 <HAL_Delay>

		//Disarm Ignition circuit
		Ignition2_ARM.port->ODR |= (IGNITION2_ARM);
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <main+0x1de0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <main+0x1de0>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	615a      	str	r2, [r3, #20]
		Ignition2_OP.port->ODR |= (IGNITION2_OP);
 8002edc:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <main+0x1de4>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <main+0x1de4>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f042 0204 	orr.w	r2, r2, #4
 8002eea:	615a      	str	r2, [r3, #20]

		HAL_Delay(500); //provide a delay to ensure fire state has been activated for a long enough time
 8002eec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ef0:	f000 ff9e 	bl	8003e30 <HAL_Delay>

		//Manually removes "ignition" state bit from last read LoRa packet info
		state &= ~(0x02 <<2); //this if more so for remote control 0bxxxx11xx become 0
 8002ef4:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <main+0x1de8>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f023 0308 	bic.w	r3, r3, #8
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <main+0x1de8>)
 8002f00:	701a      	strb	r2, [r3, #0]
		switch_case_state = 0;
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <main+0x1dec>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f08:	b662      	cpsie	i
}
 8002f0a:	bf00      	nop
		//turns of the ignite state once done!
		//state cannot be triggered more than once sequentially!
		__enable_irq();
		break;
 8002f0c:	e002      	b.n	8002f14 <main+0x1dbc>
			break; //enter PURGE state
 8002f0e:	bf00      	nop
 8002f10:	f7fe bcaa 	b.w	8001868 <main+0x710>
	switch(switch_case_state){
 8002f14:	f7fe bca8 	b.w	8001868 <main+0x710>
 8002f18:	20000368 	.word	0x20000368
 8002f1c:	200001d0 	.word	0x200001d0
 8002f20:	200001b8 	.word	0x200001b8
 8002f24:	20000350 	.word	0x20000350
 8002f28:	20000218 	.word	0x20000218
 8002f2c:	20000200 	.word	0x20000200
 8002f30:	20000188 	.word	0x20000188
 8002f34:	20000170 	.word	0x20000170
 8002f38:	200002c0 	.word	0x200002c0
 8002f3c:	200002d8 	.word	0x200002d8
 8002f40:	200000c9 	.word	0x200000c9
 8002f44:	200000c8 	.word	0x200000c8

08002f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
 **/
void SystemClock_Config(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b094      	sub	sp, #80	@ 0x50
 8002f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4e:	f107 0320 	add.w	r3, r7, #32
 8002f52:	2230      	movs	r2, #48	@ 0x30
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 ff44 	bl	8005de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	4b2b      	ldr	r3, [pc, #172]	@ (8003020 <SystemClock_Config+0xd8>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	4a2a      	ldr	r2, [pc, #168]	@ (8003020 <SystemClock_Config+0xd8>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7c:	4b28      	ldr	r3, [pc, #160]	@ (8003020 <SystemClock_Config+0xd8>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <SystemClock_Config+0xdc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a24      	ldr	r2, [pc, #144]	@ (8003024 <SystemClock_Config+0xdc>)
 8002f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <SystemClock_Config+0xdc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fac:	2310      	movs	r3, #16
 8002fae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002fbc:	23b4      	movs	r3, #180	@ 0xb4
 8002fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc8:	f107 0320 	add.w	r3, r7, #32
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fac5 	bl	800555c <HAL_RCC_OscConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fd8:	f000 fbcc 	bl	8003774 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002fdc:	f002 fa6e 	bl	80054bc <HAL_PWREx_EnableOverDrive>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002fe6:	f000 fbc5 	bl	8003774 <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fea:	230f      	movs	r3, #15
 8002fec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ff6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ffa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003000:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	2105      	movs	r1, #5
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fd1f 	bl	8005a4c <HAL_RCC_ClockConfig>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003014:	f000 fbae 	bl	8003774 <Error_Handler>
  }
}
 8003018:	bf00      	nop
 800301a:	3750      	adds	r7, #80	@ 0x50
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000

08003028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b08d      	sub	sp, #52	@ 0x34
 800302c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302e:	f107 031c 	add.w	r3, r7, #28
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	4b2c      	ldr	r3, [pc, #176]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a2b      	ldr	r2, [pc, #172]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4a24      	ldr	r2, [pc, #144]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	6313      	str	r3, [r2, #48]	@ 0x30
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a16      	ldr	r2, [pc, #88]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a0f      	ldr	r2, [pc, #60]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	4a08      	ldr	r2, [pc, #32]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <MX_GPIO_Init+0xcc>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]

}
 80030e6:	bf00      	nop
 80030e8:	3734      	adds	r7, #52	@ 0x34
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <MX_I2C2_Init>:


/* USER CODE BEGIN 4 */

static void MX_I2C2_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <MX_I2C2_Init+0x74>)
 80030fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003170 <MX_I2C2_Init+0x78>)
 8003100:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <MX_I2C2_Init+0x74>)
 8003104:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <MX_I2C2_Init+0x7c>)
 8003106:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003108:	4b18      	ldr	r3, [pc, #96]	@ (800316c <MX_I2C2_Init+0x74>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800310e:	4b17      	ldr	r3, [pc, #92]	@ (800316c <MX_I2C2_Init+0x74>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <MX_I2C2_Init+0x74>)
 8003116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800311a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <MX_I2C2_Init+0x74>)
 800311e:	2200      	movs	r2, #0
 8003120:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <MX_I2C2_Init+0x74>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <MX_I2C2_Init+0x74>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <MX_I2C2_Init+0x74>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003134:	480d      	ldr	r0, [pc, #52]	@ (800316c <MX_I2C2_Init+0x74>)
 8003136:	f001 f94b 	bl	80043d0 <HAL_I2C_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003140:	f000 fb18 	bl	8003774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003144:	2100      	movs	r1, #0
 8003146:	4809      	ldr	r0, [pc, #36]	@ (800316c <MX_I2C2_Init+0x74>)
 8003148:	f002 f93c 	bl	80053c4 <HAL_I2CEx_ConfigAnalogFilter>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003152:	f000 fb0f 	bl	8003774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003156:	2100      	movs	r1, #0
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <MX_I2C2_Init+0x74>)
 800315a:	f002 f96f 	bl	800543c <HAL_I2CEx_ConfigDigitalFilter>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003164:	f000 fb06 	bl	8003774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000074 	.word	0x20000074
 8003170:	40005800 	.word	0x40005800
 8003174:	000186a0 	.word	0x000186a0

08003178 <TIM1_UP_TIM10_IRQHandler>:
  /** Configure Digital filter
  */


void TIM1_UP_TIM10_IRQHandler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
	hardware_timer_count++;
 800317c:	4b32      	ldr	r3, [pc, #200]	@ (8003248 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b30      	ldr	r3, [pc, #192]	@ (8003248 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8003186:	701a      	strb	r2, [r3, #0]
	if(hardware_timer_count<5)
 8003188:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d806      	bhi.n	800319e <TIM1_UP_TIM10_IRQHandler+0x26>
	{
		   //Hardware Timer interrupt callback for LoRa RX
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8003190:	4b2e      	ldr	r3, [pc, #184]	@ (800324c <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	4a2d      	ldr	r2, [pc, #180]	@ (800324c <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6113      	str	r3, [r2, #16]

		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
		hardware_timer_count = 0;
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
	}
}
 800319c:	e04f      	b.n	800323e <TIM1_UP_TIM10_IRQHandler+0xc6>
		CH3_ARM.port->ODR &= ~(CH3_Arm);
 800319e:	4b2c      	ldr	r3, [pc, #176]	@ (8003250 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ac:	615a      	str	r2, [r3, #20]
		CH3_OP.port->ODR &= ~(CH3_Operate);
 80031ae:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031bc:	615a      	str	r2, [r3, #20]
		led_n2o.port->ODR &= ~(N2O_LED);
 80031be:	4b26      	ldr	r3, [pc, #152]	@ (8003258 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f022 0220 	bic.w	r2, r2, #32
 80031cc:	615a      	str	r2, [r3, #20]
		led_o2.port->ODR &= ~(O2_LED);
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <TIM1_UP_TIM10_IRQHandler+0xe4>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <TIM1_UP_TIM10_IRQHandler+0xe4>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031dc:	615a      	str	r2, [r3, #20]
		CH2_ARM.port->ODR &= ~(CH2_Arm);
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ec:	615a      	str	r2, [r3, #20]
		CH2_OP.port->ODR &= ~(CH2_Operate);
 80031ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <TIM1_UP_TIM10_IRQHandler+0xec>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <TIM1_UP_TIM10_IRQHandler+0xec>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fc:	615a      	str	r2, [r3, #20]
		CH1_ARM.port->ODR |= CH1_Arm;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <TIM1_UP_TIM10_IRQHandler+0xf0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800320c:	615a      	str	r2, [r3, #20]
		CH1_OP.port->ODR |= CH1_Operate;
 800320e:	4b17      	ldr	r3, [pc, #92]	@ (800326c <TIM1_UP_TIM10_IRQHandler+0xf4>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	4b15      	ldr	r3, [pc, #84]	@ (800326c <TIM1_UP_TIM10_IRQHandler+0xf4>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321c:	615a      	str	r2, [r3, #20]
		state &= ~0xFE; //0b11111110: all bits are bit-masked 0 except for system on
 800321e:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 800322a:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	4a05      	ldr	r2, [pc, #20]	@ (800324c <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6113      	str	r3, [r2, #16]
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	200000ce 	.word	0x200000ce
 800324c:	40010000 	.word	0x40010000
 8003250:	20000218 	.word	0x20000218
 8003254:	20000200 	.word	0x20000200
 8003258:	20000350 	.word	0x20000350
 800325c:	20000368 	.word	0x20000368
 8003260:	200001d0 	.word	0x200001d0
 8003264:	200001b8 	.word	0x200001b8
 8003268:	20000188 	.word	0x20000188
 800326c:	20000170 	.word	0x20000170
 8003270:	200000c9 	.word	0x200000c9

08003274 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	HAL_Delay(2); //200us delay to prevent debouncing
 8003278:	2002      	movs	r0, #2
 800327a:	f000 fdd9 	bl	8003e30 <HAL_Delay>
   	if(EXTI->PR & EXTI_PR_PR1) //if the rising edge has been detected by pin 2
 800327e:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01d      	beq.n	80032c6 <EXTI1_IRQHandler+0x52>
   	{
   		EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4a0f      	ldr	r2, [pc, #60]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 8003290:	f023 0302 	bic.w	r3, r3, #2
 8003294:	6153      	str	r3, [r2, #20]
   		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == LOCAL_CONTROL_SW)
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <EXTI1_IRQHandler+0x5c>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032a4:	d109      	bne.n	80032ba <EXTI1_IRQHandler+0x46>
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 80032ac:	f023 0302 	bic.w	r3, r3, #2
 80032b0:	6153      	str	r3, [r2, #20]
			dump_flag = 1; //tells program manual dump flag has been set!
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <EXTI1_IRQHandler+0x60>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
   		else
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
   		}
   	}
}
 80032b8:	e005      	b.n	80032c6 <EXTI1_IRQHandler+0x52>
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 80032ba:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4a03      	ldr	r2, [pc, #12]	@ (80032cc <EXTI1_IRQHandler+0x58>)
 80032c0:	f023 0302 	bic.w	r3, r3, #2
 80032c4:	6153      	str	r3, [r2, #20]
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013c00 	.word	0x40013c00
 80032d0:	20000428 	.word	0x20000428
 80032d4:	200000cf 	.word	0x200000cf

080032d8 <EXTI3_IRQHandler>:


//ambient temperature alert!
void EXTI3_IRQHandler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  	if(EXTI->PR & EXTI_PR_PR3) //if the rising edge has been detected by pin 2
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <EXTI3_IRQHandler+0x28>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <EXTI3_IRQHandler+0x1c>
  	{
  		EXTI->PR &= ~EXTI_PR_PR3; //resets the flag
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <EXTI3_IRQHandler+0x28>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <EXTI3_IRQHandler+0x28>)
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	6153      	str	r3, [r2, #20]
  		//do something here
  	}
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40013c00 	.word	0x40013c00

08003304 <EXTI9_5_IRQHandler>:



// LoRa DIO Interrupt
void EXTI9_5_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	   *  5) Proceed
	   */
	//  test_rx_interrupt++;
	 // uint8_t transmit_state = 0;
 	// SX1272_clearIRQ(&lora, SX1272_LORA_IRQ_RXDONE);
	EXTI->PR &= ~0x1F0; //resets the flag
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <EXTI9_5_IRQHandler+0x20>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <EXTI9_5_IRQHandler+0x20>)
 800330e:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8003312:	6153      	str	r3, [r2, #20]
	triggerRX= true;
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <EXTI9_5_IRQHandler+0x24>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 800331a:	2017      	movs	r0, #23
 800331c:	f7fd fece 	bl	80010bc <__NVIC_DisableIRQ>

}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013c00 	.word	0x40013c00
 8003328:	200000d2 	.word	0x200000d2

0800332c <RX_Receive>:

void RX_Receive(void)
{
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	b08a      	sub	sp, #40	@ 0x28
 8003330:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003332:	b672      	cpsid	i
}
 8003334:	bf00      	nop
	__disable_irq(); //uncomment after testing!!
	__NVIC_DisableIRQ(EXTI9_5_IRQn); //uncomment after testing!!
 8003336:	2017      	movs	r0, #23
 8003338:	f7fd fec0 	bl	80010bc <__NVIC_DisableIRQ>
	//__NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn); //Disable IQR for LoRa Hardware Timer

	HAL_Delay(100); //important!!
 800333c:	2064      	movs	r0, #100	@ 0x64
 800333e:	f000 fd77 	bl	8003e30 <HAL_Delay>


	bool RX_result = SX1272_readReceive(&lora, pointerdata, LORA_MSG_LENGTH);
 8003342:	2220      	movs	r2, #32
 8003344:	497d      	ldr	r1, [pc, #500]	@ (800353c <RX_Receive+0x210>)
 8003346:	487e      	ldr	r0, [pc, #504]	@ (8003540 <RX_Receive+0x214>)
 8003348:	f7fd fde3 	bl	8000f12 <SX1272_readReceive>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	triggerRX = false;
 8003352:	4b7c      	ldr	r3, [pc, #496]	@ (8003544 <RX_Receive+0x218>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
	GSE_Command.id= pointerdata[0];
 8003358:	4b78      	ldr	r3, [pc, #480]	@ (800353c <RX_Receive+0x210>)
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <RX_Receive+0x21c>)
 800335e:	701a      	strb	r2, [r3, #0]
	GSE_Command.data[0]= pointerdata[1];
 8003360:	4b76      	ldr	r3, [pc, #472]	@ (800353c <RX_Receive+0x210>)
 8003362:	785a      	ldrb	r2, [r3, #1]
 8003364:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <RX_Receive+0x21c>)
 8003366:	705a      	strb	r2, [r3, #1]
	GSE_Command.data[1]= pointerdata[2];
 8003368:	4b74      	ldr	r3, [pc, #464]	@ (800353c <RX_Receive+0x210>)
 800336a:	789a      	ldrb	r2, [r3, #2]
 800336c:	4b76      	ldr	r3, [pc, #472]	@ (8003548 <RX_Receive+0x21c>)
 800336e:	709a      	strb	r2, [r3, #2]


	if(GSE_Command.id != 0x02)
 8003370:	4b75      	ldr	r3, [pc, #468]	@ (8003548 <RX_Receive+0x21c>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d00a      	beq.n	800338e <RX_Receive+0x62>
	{
		lora_error = ERROR_INVALID_PACKET_ID;
 8003378:	4b74      	ldr	r3, [pc, #464]	@ (800354c <RX_Receive+0x220>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 800337e:	4b74      	ldr	r3, [pc, #464]	@ (8003550 <RX_Receive+0x224>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b72      	ldr	r3, [pc, #456]	@ (8003550 <RX_Receive+0x224>)
 8003388:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 800338a:	bf00      	nop
		__asm("NOP");
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
	}


}
 800338c:	e1d6      	b.n	800373c <RX_Receive+0x410>
	else if ((GSE_Command.data[0] & GSE_Command.data[1]) == 0x00)
 800338e:	4b6e      	ldr	r3, [pc, #440]	@ (8003548 <RX_Receive+0x21c>)
 8003390:	785a      	ldrb	r2, [r3, #1]
 8003392:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <RX_Receive+0x21c>)
 8003394:	789b      	ldrb	r3, [r3, #2]
 8003396:	4013      	ands	r3, r2
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 81c1 	bne.w	8003722 <RX_Receive+0x3f6>
		led_power.port->ODR |= PWR_LED; //Turn ON LED
 80033a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003554 <RX_Receive+0x228>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	4b6b      	ldr	r3, [pc, #428]	@ (8003554 <RX_Receive+0x228>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	615a      	str	r2, [r3, #20]
		lora_error_test++;
 80033b0:	4b69      	ldr	r3, [pc, #420]	@ (8003558 <RX_Receive+0x22c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b67      	ldr	r3, [pc, #412]	@ (8003558 <RX_Receive+0x22c>)
 80033ba:	701a      	strb	r2, [r3, #0]
		state = GSE_Command.data[0];
 80033bc:	4b62      	ldr	r3, [pc, #392]	@ (8003548 <RX_Receive+0x21c>)
 80033be:	785a      	ldrb	r2, [r3, #1]
 80033c0:	4b66      	ldr	r3, [pc, #408]	@ (800355c <RX_Receive+0x230>)
 80033c2:	701a      	strb	r2, [r3, #0]
		hardware_timer_count = 0;
 80033c4:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <RX_Receive+0x224>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
		uint8_t transmit_state = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		switch(TX_Packet_Flag)
 80033d0:	4b63      	ldr	r3, [pc, #396]	@ (8003560 <RX_Receive+0x234>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <RX_Receive+0xb4>
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f000 80d3 	beq.w	8003584 <RX_Receive+0x258>
 80033de:	e16f      	b.n	80036c0 <RX_Receive+0x394>
				packet = Dummy_Transmit();
 80033e0:	4c60      	ldr	r4, [pc, #384]	@ (8003564 <RX_Receive+0x238>)
 80033e2:	463b      	mov	r3, r7
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fc5b 	bl	8000ca0 <Dummy_Transmit>
 80033ea:	4625      	mov	r5, r4
 80033ec:	463c      	mov	r4, r7
 80033ee:	6820      	ldr	r0, [r4, #0]
 80033f0:	6861      	ldr	r1, [r4, #4]
 80033f2:	68a2      	ldr	r2, [r4, #8]
 80033f4:	68e3      	ldr	r3, [r4, #12]
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	6920      	ldr	r0, [r4, #16]
 80033fa:	6961      	ldr	r1, [r4, #20]
 80033fc:	69a2      	ldr	r2, [r4, #24]
 80033fe:	69e3      	ldr	r3, [r4, #28]
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x06;
 8003402:	4b58      	ldr	r3, [pc, #352]	@ (8003564 <RX_Receive+0x238>)
 8003404:	2206      	movs	r2, #6
 8003406:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 8003408:	4b4f      	ldr	r3, [pc, #316]	@ (8003548 <RX_Receive+0x21c>)
 800340a:	785a      	ldrb	r2, [r3, #1]
 800340c:	4b55      	ldr	r3, [pc, #340]	@ (8003564 <RX_Receive+0x238>)
 800340e:	705a      	strb	r2, [r3, #1]
				* floatPtr = (uint8_t *) &TRANSDUCER_1.read_value_bar;
 8003410:	4b55      	ldr	r3, [pc, #340]	@ (8003568 <RX_Receive+0x23c>)
 8003412:	b2da      	uxtb	r2, r3
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	701a      	strb	r2, [r3, #0]
				packet.data[1] = floatPtr[3];
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	78da      	ldrb	r2, [r3, #3]
 800341c:	4b51      	ldr	r3, [pc, #324]	@ (8003564 <RX_Receive+0x238>)
 800341e:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	789a      	ldrb	r2, [r3, #2]
 8003424:	4b4f      	ldr	r3, [pc, #316]	@ (8003564 <RX_Receive+0x238>)
 8003426:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	785a      	ldrb	r2, [r3, #1]
 800342c:	4b4d      	ldr	r3, [pc, #308]	@ (8003564 <RX_Receive+0x238>)
 800342e:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	4b4b      	ldr	r3, [pc, #300]	@ (8003564 <RX_Receive+0x238>)
 8003436:	715a      	strb	r2, [r3, #5]
				* floatPtr = (uint8_t *) &TRANSDUCER_2.read_value_bar;
 8003438:	4b4c      	ldr	r3, [pc, #304]	@ (800356c <RX_Receive+0x240>)
 800343a:	b2da      	uxtb	r2, r3
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	701a      	strb	r2, [r3, #0]
				packet.data[5] = floatPtr[3];
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	78da      	ldrb	r2, [r3, #3]
 8003444:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <RX_Receive+0x238>)
 8003446:	719a      	strb	r2, [r3, #6]
				packet.data[6] = floatPtr[2];
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	789a      	ldrb	r2, [r3, #2]
 800344c:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <RX_Receive+0x238>)
 800344e:	71da      	strb	r2, [r3, #7]
				packet.data[7] = floatPtr[1];
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	785a      	ldrb	r2, [r3, #1]
 8003454:	4b43      	ldr	r3, [pc, #268]	@ (8003564 <RX_Receive+0x238>)
 8003456:	721a      	strb	r2, [r3, #8]
				packet.data[8] = floatPtr[0];
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	4b41      	ldr	r3, [pc, #260]	@ (8003564 <RX_Receive+0x238>)
 800345e:	725a      	strb	r2, [r3, #9]
				* floatPtr = (uint8_t *) &TRANSDUCER_3.read_value_bar;
 8003460:	4b43      	ldr	r3, [pc, #268]	@ (8003570 <RX_Receive+0x244>)
 8003462:	b2da      	uxtb	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	701a      	strb	r2, [r3, #0]
				packet.data[9] = floatPtr[3];
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	78da      	ldrb	r2, [r3, #3]
 800346c:	4b3d      	ldr	r3, [pc, #244]	@ (8003564 <RX_Receive+0x238>)
 800346e:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	789a      	ldrb	r2, [r3, #2]
 8003474:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <RX_Receive+0x238>)
 8003476:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	785a      	ldrb	r2, [r3, #1]
 800347c:	4b39      	ldr	r3, [pc, #228]	@ (8003564 <RX_Receive+0x238>)
 800347e:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <RX_Receive+0x238>)
 8003486:	735a      	strb	r2, [r3, #13]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_1.temp;
 8003488:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <RX_Receive+0x248>)
 800348a:	b2da      	uxtb	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	701a      	strb	r2, [r3, #0]
				packet.data[13] = floatPtr[3];
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	78da      	ldrb	r2, [r3, #3]
 8003494:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <RX_Receive+0x238>)
 8003496:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	789a      	ldrb	r2, [r3, #2]
 800349c:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <RX_Receive+0x238>)
 800349e:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	785a      	ldrb	r2, [r3, #1]
 80034a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003564 <RX_Receive+0x238>)
 80034a6:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <RX_Receive+0x238>)
 80034ae:	745a      	strb	r2, [r3, #17]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_2.temp;
 80034b0:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <RX_Receive+0x24c>)
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	701a      	strb	r2, [r3, #0]
				packet.data[17] = floatPtr[3];
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	78da      	ldrb	r2, [r3, #3]
 80034bc:	4b29      	ldr	r3, [pc, #164]	@ (8003564 <RX_Receive+0x238>)
 80034be:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	789a      	ldrb	r2, [r3, #2]
 80034c4:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <RX_Receive+0x238>)
 80034c6:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	785a      	ldrb	r2, [r3, #1]
 80034cc:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <RX_Receive+0x238>)
 80034ce:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <RX_Receive+0x238>)
 80034d6:	755a      	strb	r2, [r3, #21]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_3.temp;
 80034d8:	4b28      	ldr	r3, [pc, #160]	@ (800357c <RX_Receive+0x250>)
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	701a      	strb	r2, [r3, #0]
				packet.data[21] = floatPtr[3];
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	78da      	ldrb	r2, [r3, #3]
 80034e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003564 <RX_Receive+0x238>)
 80034e6:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	789a      	ldrb	r2, [r3, #2]
 80034ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <RX_Receive+0x238>)
 80034ee:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	785a      	ldrb	r2, [r3, #1]
 80034f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <RX_Receive+0x238>)
 80034f6:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <RX_Receive+0x238>)
 80034fe:	765a      	strb	r2, [r3, #25]
				* floatPtr = (uint8_t *) &THERMOCOUPLE_4.temp;
 8003500:	4b1f      	ldr	r3, [pc, #124]	@ (8003580 <RX_Receive+0x254>)
 8003502:	b2da      	uxtb	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	701a      	strb	r2, [r3, #0]
				packet.data[25] = floatPtr[3];
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	78da      	ldrb	r2, [r3, #3]
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <RX_Receive+0x238>)
 800350e:	769a      	strb	r2, [r3, #26]
				packet.data[26] = floatPtr[2];
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	789a      	ldrb	r2, [r3, #2]
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <RX_Receive+0x238>)
 8003516:	76da      	strb	r2, [r3, #27]
				packet.data[27] = floatPtr[1];
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	785a      	ldrb	r2, [r3, #1]
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <RX_Receive+0x238>)
 800351e:	771a      	strb	r2, [r3, #28]
				packet.data[28] = floatPtr[0];
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <RX_Receive+0x238>)
 8003526:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 8003528:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <RX_Receive+0x238>)
 800352a:	2200      	movs	r2, #0
 800352c:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <RX_Receive+0x238>)
 8003530:	2200      	movs	r2, #0
 8003532:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 1;
 8003534:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <RX_Receive+0x234>)
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
				break;
 800353a:	e0c4      	b.n	80036c6 <RX_Receive+0x39a>
 800353c:	200000d4 	.word	0x200000d4
 8003540:	200000f8 	.word	0x200000f8
 8003544:	200000d2 	.word	0x200000d2
 8003548:	20000138 	.word	0x20000138
 800354c:	200000d1 	.word	0x200000d1
 8003550:	200000ce 	.word	0x200000ce
 8003554:	200002f0 	.word	0x200002f0
 8003558:	200000f4 	.word	0x200000f4
 800355c:	200000c9 	.word	0x200000c9
 8003560:	200000d0 	.word	0x200000d0
 8003564:	20000118 	.word	0x20000118
 8003568:	20000520 	.word	0x20000520
 800356c:	2000052c 	.word	0x2000052c
 8003570:	20000538 	.word	0x20000538
 8003574:	20000018 	.word	0x20000018
 8003578:	20000020 	.word	0x20000020
 800357c:	20000028 	.word	0x20000028
 8003580:	20000030 	.word	0x20000030
				packet = Dummy_Transmit();
 8003584:	4c6f      	ldr	r4, [pc, #444]	@ (8003744 <RX_Receive+0x418>)
 8003586:	463b      	mov	r3, r7
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd fb89 	bl	8000ca0 <Dummy_Transmit>
 800358e:	4625      	mov	r5, r4
 8003590:	463c      	mov	r4, r7
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	6861      	ldr	r1, [r4, #4]
 8003596:	68a2      	ldr	r2, [r4, #8]
 8003598:	68e3      	ldr	r3, [r4, #12]
 800359a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359c:	6920      	ldr	r0, [r4, #16]
 800359e:	6961      	ldr	r1, [r4, #20]
 80035a0:	69a2      	ldr	r2, [r4, #24]
 80035a2:	69e3      	ldr	r3, [r4, #28]
 80035a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				packet.id = 0x07;
 80035a6:	4b67      	ldr	r3, [pc, #412]	@ (8003744 <RX_Receive+0x418>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	701a      	strb	r2, [r3, #0]
				packet.data[0] = GSE_Command.data[0];
 80035ac:	4b66      	ldr	r3, [pc, #408]	@ (8003748 <RX_Receive+0x41c>)
 80035ae:	785a      	ldrb	r2, [r3, #1]
 80035b0:	4b64      	ldr	r3, [pc, #400]	@ (8003744 <RX_Receive+0x418>)
 80035b2:	705a      	strb	r2, [r3, #1]
				* floatPtr = (uint8_t *) &SMD_TEMP_SENSE.temp;
 80035b4:	4b65      	ldr	r3, [pc, #404]	@ (800374c <RX_Receive+0x420>)
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	701a      	strb	r2, [r3, #0]
				packet.data[1] = floatPtr[3];
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	78da      	ldrb	r2, [r3, #3]
 80035c0:	4b60      	ldr	r3, [pc, #384]	@ (8003744 <RX_Receive+0x418>)
 80035c2:	709a      	strb	r2, [r3, #2]
				packet.data[2] = floatPtr[2];
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	789a      	ldrb	r2, [r3, #2]
 80035c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003744 <RX_Receive+0x418>)
 80035ca:	70da      	strb	r2, [r3, #3]
				packet.data[3] = floatPtr[1];
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	785a      	ldrb	r2, [r3, #1]
 80035d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003744 <RX_Receive+0x418>)
 80035d2:	711a      	strb	r2, [r3, #4]
				packet.data[4] = floatPtr[0];
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003744 <RX_Receive+0x418>)
 80035da:	715a      	strb	r2, [r3, #5]
				packet.data[5] = 0x00;
 80035dc:	4b59      	ldr	r3, [pc, #356]	@ (8003744 <RX_Receive+0x418>)
 80035de:	2200      	movs	r2, #0
 80035e0:	719a      	strb	r2, [r3, #6]
				packet.data[6] = 0x00;
 80035e2:	4b58      	ldr	r3, [pc, #352]	@ (8003744 <RX_Receive+0x418>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	71da      	strb	r2, [r3, #7]
				packet.data[7] = 0x00;
 80035e8:	4b56      	ldr	r3, [pc, #344]	@ (8003744 <RX_Receive+0x418>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	721a      	strb	r2, [r3, #8]
				packet.data[8] = 0x00;
 80035ee:	4b55      	ldr	r3, [pc, #340]	@ (8003744 <RX_Receive+0x418>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	725a      	strb	r2, [r3, #9]
				* floatPtr = (uint8_t *) &LOADCELL_1.read_value_weight;
 80035f4:	4b56      	ldr	r3, [pc, #344]	@ (8003750 <RX_Receive+0x424>)
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	701a      	strb	r2, [r3, #0]
				packet.data[9] = floatPtr[3];
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	78da      	ldrb	r2, [r3, #3]
 8003600:	4b50      	ldr	r3, [pc, #320]	@ (8003744 <RX_Receive+0x418>)
 8003602:	729a      	strb	r2, [r3, #10]
				packet.data[10] = floatPtr[2];
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	789a      	ldrb	r2, [r3, #2]
 8003608:	4b4e      	ldr	r3, [pc, #312]	@ (8003744 <RX_Receive+0x418>)
 800360a:	72da      	strb	r2, [r3, #11]
				packet.data[11] = floatPtr[1];
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	785a      	ldrb	r2, [r3, #1]
 8003610:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <RX_Receive+0x418>)
 8003612:	731a      	strb	r2, [r3, #12]
				packet.data[12] = floatPtr[0];
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	4b4a      	ldr	r3, [pc, #296]	@ (8003744 <RX_Receive+0x418>)
 800361a:	735a      	strb	r2, [r3, #13]
				* floatPtr = (uint8_t *) &LOADCELL_2.read_value_weight;
 800361c:	4b4d      	ldr	r3, [pc, #308]	@ (8003754 <RX_Receive+0x428>)
 800361e:	b2da      	uxtb	r2, r3
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	701a      	strb	r2, [r3, #0]
				packet.data[13] = floatPtr[3];
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	78da      	ldrb	r2, [r3, #3]
 8003628:	4b46      	ldr	r3, [pc, #280]	@ (8003744 <RX_Receive+0x418>)
 800362a:	739a      	strb	r2, [r3, #14]
				packet.data[14] = floatPtr[2];
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	789a      	ldrb	r2, [r3, #2]
 8003630:	4b44      	ldr	r3, [pc, #272]	@ (8003744 <RX_Receive+0x418>)
 8003632:	73da      	strb	r2, [r3, #15]
				packet.data[15] = floatPtr[1];
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	785a      	ldrb	r2, [r3, #1]
 8003638:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <RX_Receive+0x418>)
 800363a:	741a      	strb	r2, [r3, #16]
				packet.data[16] = floatPtr[0];
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	4b40      	ldr	r3, [pc, #256]	@ (8003744 <RX_Receive+0x418>)
 8003642:	745a      	strb	r2, [r3, #17]
				* floatPtr = (uint8_t *) &LOADCELL_3.read_value_weight;
 8003644:	4b44      	ldr	r3, [pc, #272]	@ (8003758 <RX_Receive+0x42c>)
 8003646:	b2da      	uxtb	r2, r3
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	701a      	strb	r2, [r3, #0]
				packet.data[17] = floatPtr[3];
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	78da      	ldrb	r2, [r3, #3]
 8003650:	4b3c      	ldr	r3, [pc, #240]	@ (8003744 <RX_Receive+0x418>)
 8003652:	749a      	strb	r2, [r3, #18]
				packet.data[18] = floatPtr[2];
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	789a      	ldrb	r2, [r3, #2]
 8003658:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <RX_Receive+0x418>)
 800365a:	74da      	strb	r2, [r3, #19]
				packet.data[19] = floatPtr[1];
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	785a      	ldrb	r2, [r3, #1]
 8003660:	4b38      	ldr	r3, [pc, #224]	@ (8003744 <RX_Receive+0x418>)
 8003662:	751a      	strb	r2, [r3, #20]
				packet.data[20] = floatPtr[0];
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	781a      	ldrb	r2, [r3, #0]
 8003668:	4b36      	ldr	r3, [pc, #216]	@ (8003744 <RX_Receive+0x418>)
 800366a:	755a      	strb	r2, [r3, #21]
				* floatPtr = (uint8_t *) &LOADCELL_4.read_value_weight;
 800366c:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <RX_Receive+0x430>)
 800366e:	b2da      	uxtb	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	701a      	strb	r2, [r3, #0]
				packet.data[21] = floatPtr[3];
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	78da      	ldrb	r2, [r3, #3]
 8003678:	4b32      	ldr	r3, [pc, #200]	@ (8003744 <RX_Receive+0x418>)
 800367a:	759a      	strb	r2, [r3, #22]
				packet.data[22] = floatPtr[2];
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	789a      	ldrb	r2, [r3, #2]
 8003680:	4b30      	ldr	r3, [pc, #192]	@ (8003744 <RX_Receive+0x418>)
 8003682:	75da      	strb	r2, [r3, #23]
				packet.data[23] = floatPtr[1];
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	785a      	ldrb	r2, [r3, #1]
 8003688:	4b2e      	ldr	r3, [pc, #184]	@ (8003744 <RX_Receive+0x418>)
 800368a:	761a      	strb	r2, [r3, #24]
				packet.data[24] = floatPtr[0];
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <RX_Receive+0x418>)
 8003692:	765a      	strb	r2, [r3, #25]
				packet.data[25] = 0x00;
 8003694:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <RX_Receive+0x418>)
 8003696:	2200      	movs	r2, #0
 8003698:	769a      	strb	r2, [r3, #26]
				packet.data[26] = 0x00;
 800369a:	4b2a      	ldr	r3, [pc, #168]	@ (8003744 <RX_Receive+0x418>)
 800369c:	2200      	movs	r2, #0
 800369e:	76da      	strb	r2, [r3, #27]
				packet.data[27] = 0x00;
 80036a0:	4b28      	ldr	r3, [pc, #160]	@ (8003744 <RX_Receive+0x418>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]
				packet.data[28] = 0x00;
 80036a6:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <RX_Receive+0x418>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	775a      	strb	r2, [r3, #29]
				packet.data[29] = 0x00;
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <RX_Receive+0x418>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	779a      	strb	r2, [r3, #30]
				packet.data[30] = 0x00;
 80036b2:	4b24      	ldr	r3, [pc, #144]	@ (8003744 <RX_Receive+0x418>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	77da      	strb	r2, [r3, #31]
			  	TX_Packet_Flag = 0;
 80036b8:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <RX_Receive+0x434>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
				break;
 80036be:	e002      	b.n	80036c6 <RX_Receive+0x39a>
				lora_error = ERROR_SYSTEM_STATE_FAILED;
 80036c0:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <RX_Receive+0x438>)
 80036c2:	2205      	movs	r2, #5
 80036c4:	701a      	strb	r2, [r3, #0]
		RF_SW.port->ODR &= ~(GPIO_ODR_OD10);
 80036c6:	4b28      	ldr	r3, [pc, #160]	@ (8003768 <RX_Receive+0x43c>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	4b26      	ldr	r3, [pc, #152]	@ (8003768 <RX_Receive+0x43c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d4:	615a      	str	r2, [r3, #20]
		SX1272_transmit(&lora, (uint8_t*) &packet);
 80036d6:	491b      	ldr	r1, [pc, #108]	@ (8003744 <RX_Receive+0x418>)
 80036d8:	4824      	ldr	r0, [pc, #144]	@ (800376c <RX_Receive+0x440>)
 80036da:	f7fd fbbb 	bl	8000e54 <SX1272_transmit>
	  		transmit_state = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 80036de:	2112      	movs	r1, #18
 80036e0:	4822      	ldr	r0, [pc, #136]	@ (800376c <RX_Receive+0x440>)
 80036e2:	f7fd fc97 	bl	8001014 <SX1272_readRegister>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	  	}while((transmit_state & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 80036ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f2      	beq.n	80036de <RX_Receive+0x3b2>
	  	RF_SW.port->ODR |= (GPIO_ODR_OD10);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <RX_Receive+0x43c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <RX_Receive+0x43c>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003706:	615a      	str	r2, [r3, #20]
	  	SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8003708:	2208      	movs	r2, #8
 800370a:	2112      	movs	r1, #18
 800370c:	4817      	ldr	r0, [pc, #92]	@ (800376c <RX_Receive+0x440>)
 800370e:	f7fd fc4d 	bl	8000fac <SX1272_writeRegister>
	  	_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 8003712:	2105      	movs	r1, #5
 8003714:	4815      	ldr	r0, [pc, #84]	@ (800376c <RX_Receive+0x440>)
 8003716:	f7fd fb29 	bl	8000d6c <_SX1272_setMode>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800371a:	2017      	movs	r0, #23
 800371c:	f7fd fcb0 	bl	8001080 <__NVIC_EnableIRQ>
}
 8003720:	e00c      	b.n	800373c <RX_Receive+0x410>
		lora_error = ERROR_INVALID_PACKET_DATA;
 8003722:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <RX_Receive+0x438>)
 8003724:	2202      	movs	r2, #2
 8003726:	701a      	strb	r2, [r3, #0]
		hardware_timer_count++;
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <RX_Receive+0x444>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <RX_Receive+0x444>)
 8003732:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8003734:	bf00      	nop
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003736:	2017      	movs	r0, #23
 8003738:	f7fd fca2 	bl	8001080 <__NVIC_EnableIRQ>
}
 800373c:	bf00      	nop
 800373e:	3728      	adds	r7, #40	@ 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bdb0      	pop	{r4, r5, r7, pc}
 8003744:	20000118 	.word	0x20000118
 8003748:	20000138 	.word	0x20000138
 800374c:	20000010 	.word	0x20000010
 8003750:	20000550 	.word	0x20000550
 8003754:	2000055c 	.word	0x2000055c
 8003758:	20000568 	.word	0x20000568
 800375c:	20000574 	.word	0x20000574
 8003760:	200000d0 	.word	0x200000d0
 8003764:	200000d1 	.word	0x200000d1
 8003768:	200004e8 	.word	0x200004e8
 800376c:	200000f8 	.word	0x200000f8
 8003770:	200000ce 	.word	0x200000ce

08003774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003778:	b672      	cpsid	i
}
 800377a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {__asm("NOP");}
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <Error_Handler+0x8>

08003780 <get_temp>:





i2c_comms_result get_temp(TEMP_SENSE *temp_sense){
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b090      	sub	sp, #64	@ 0x40
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]

	i2c_comms_result result;

	//If its not a thermocouple, its the SMD temp sense
	if(temp_sense -> thermocouple_type == 0x00){
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	78db      	ldrb	r3, [r3, #3]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d154      	bne.n	800383c <get_temp+0xbc>

		uint8_t buf[4];
		buf[0] = 0x00;
 8003792:	2300      	movs	r3, #0
 8003794:	743b      	strb	r3, [r7, #16]
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, temp_sense -> ADDR, buf[0], 1, 100);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	7c3b      	ldrb	r3, [r7, #16]
 800379e:	461a      	mov	r2, r3
 80037a0:	2364      	movs	r3, #100	@ 0x64
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2301      	movs	r3, #1
 80037a6:	485d      	ldr	r0, [pc, #372]	@ (800391c <get_temp+0x19c>)
 80037a8:	f000 ff56 	bl	8004658 <HAL_I2C_Master_Transmit>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (ret != HAL_OK){
 80037b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <get_temp+0x40>
			  result.comms_ok = false;
 80037ba:	2300      	movs	r3, #0
 80037bc:	753b      	strb	r3, [r7, #20]
 80037be:	e09e      	b.n	80038fe <get_temp+0x17e>
		}
		else {
			  ret = HAL_I2C_Master_Receive(&hi2c2, temp_sense -> ADDR, result.return_value, 2, 100);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	1c9a      	adds	r2, r3, #2
 80037cc:	2364      	movs	r3, #100	@ 0x64
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2302      	movs	r3, #2
 80037d2:	4852      	ldr	r0, [pc, #328]	@ (800391c <get_temp+0x19c>)
 80037d4:	f001 f83e 	bl	8004854 <HAL_I2C_Master_Receive>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			  if (ret != HAL_OK){
 80037de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <get_temp+0x6c>
				  result.comms_ok = false;
 80037e6:	2300      	movs	r3, #0
 80037e8:	753b      	strb	r3, [r7, #20]
 80037ea:	e088      	b.n	80038fe <get_temp+0x17e>
			  }
			  else{

				  uint16_t val = ((int16_t)result.return_value[0]<<4) | (result.return_value[1] >> 4);
 80037ec:	7dbb      	ldrb	r3, [r7, #22]
 80037ee:	b21b      	sxth	r3, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	b21a      	sxth	r2, r3
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b21b      	sxth	r3, r3
 8003800:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				  float temp = val/16;
 8003802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	b29b      	uxth	r3, r3
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003810:	edc7 7a03 	vstr	s15, [r7, #12]
				  uint8_t * tempPointer = (uint8_t *) &temp;
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	62bb      	str	r3, [r7, #40]	@ 0x28
				  result.return_value[0] = tempPointer[0];
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	75bb      	strb	r3, [r7, #22]
				  result.return_value[1] = tempPointer[1];
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	75fb      	strb	r3, [r7, #23]
				  result.return_value[2] = tempPointer[2];
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	789b      	ldrb	r3, [r3, #2]
 800382a:	763b      	strb	r3, [r7, #24]
				  result.return_value[3] = tempPointer[3];
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	78db      	ldrb	r3, [r3, #3]
 8003830:	767b      	strb	r3, [r7, #25]
				  result.return_length = 0x04;
 8003832:	2304      	movs	r3, #4
 8003834:	757b      	strb	r3, [r7, #21]

				  result.comms_ok = true;
 8003836:	2301      	movs	r3, #1
 8003838:	753b      	strb	r3, [r7, #20]
 800383a:	e060      	b.n	80038fe <get_temp+0x17e>
	}

	//Its got a thermocouple type, therefore, lets get the thermocouple hot junc temp
	else{
		uint8_t ret;
		ret = HAL_I2C_Master_Transmit(&hi2c2, (temp_sense -> ADDR | 0x00), 0x00, 1, 100); //Write to thermocouple IC, to move pointer to hot junc reg
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	4619      	mov	r1, r3
 8003842:	2364      	movs	r3, #100	@ 0x64
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2301      	movs	r3, #1
 8003848:	2200      	movs	r2, #0
 800384a:	4834      	ldr	r0, [pc, #208]	@ (800391c <get_temp+0x19c>)
 800384c:	f000 ff04 	bl	8004658 <HAL_I2C_Master_Transmit>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (ret != HAL_OK){
 8003856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <get_temp+0xe4>
			result.comms_ok = false;
 800385e:	2300      	movs	r3, #0
 8003860:	753b      	strb	r3, [r7, #20]
 8003862:	e04c      	b.n	80038fe <get_temp+0x17e>
		}
		else {
			ret = HAL_I2C_Master_Receive(&hi2c2, (temp_sense -> ADDR | 0x01), result.return_value, 2, 100);	//Read 2 bytes from the hot junc reg into return val
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	2364      	movs	r3, #100	@ 0x64
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2302      	movs	r3, #2
 800387c:	4827      	ldr	r0, [pc, #156]	@ (800391c <get_temp+0x19c>)
 800387e:	f000 ffe9 	bl	8004854 <HAL_I2C_Master_Receive>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (ret != HAL_OK){
 8003888:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <get_temp+0x116>
				result.comms_ok = false;
 8003890:	2300      	movs	r3, #0
 8003892:	753b      	strb	r3, [r7, #20]
 8003894:	e033      	b.n	80038fe <get_temp+0x17e>
			}
			else{

				uint16_t val = ((int16_t)result.return_value[0] * 16) | (result.return_value[1]);
 8003896:	7dbb      	ldrb	r3, [r7, #22]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	b29b      	uxth	r3, r3
 800389c:	b21a      	sxth	r2, r3
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b21b      	sxth	r3, r3
 80038a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
				float temp = val/16;
 80038a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b6:	edc7 7a02 	vstr	s15, [r7, #8]
				if ((result.return_value[0] & 0x80) == 0x80){ //If the temp is < 0deg
 80038ba:	7dbb      	ldrb	r3, [r7, #22]
 80038bc:	b25b      	sxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da08      	bge.n	80038d4 <get_temp+0x154>
					temp = temp - 4096;
 80038c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038c6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003920 <get_temp+0x1a0>
 80038ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038ce:	edc7 7a02 	vstr	s15, [r7, #8]
 80038d2:	e001      	b.n	80038d8 <get_temp+0x158>
				}
				else{
					temp = temp; //If temp is >= 0deg, dont need to do anything
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60bb      	str	r3, [r7, #8]
				}

				uint8_t * tempPointer = (uint8_t *) &temp;
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
				result.return_value[0] = tempPointer[0];
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	75bb      	strb	r3, [r7, #22]
				result.return_value[1] = tempPointer[1];
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	75fb      	strb	r3, [r7, #23]
				result.return_value[2] = tempPointer[2];
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	789b      	ldrb	r3, [r3, #2]
 80038ee:	763b      	strb	r3, [r7, #24]
				result.return_value[3] = tempPointer[3];
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	767b      	strb	r3, [r7, #25]
				result.return_length = 0x04;
 80038f6:	2304      	movs	r3, #4
 80038f8:	757b      	strb	r3, [r7, #21]

				result.comms_ok = true;
 80038fa:	2301      	movs	r3, #1
 80038fc:	753b      	strb	r3, [r7, #20]
			}
		}
	}


	return result;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	461d      	mov	r5, r3
 8003902:	f107 0414 	add.w	r4, r7, #20
 8003906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003908:	6028      	str	r0, [r5, #0]
 800390a:	6069      	str	r1, [r5, #4]
 800390c:	60aa      	str	r2, [r5, #8]
 800390e:	60eb      	str	r3, [r5, #12]
 8003910:	8823      	ldrh	r3, [r4, #0]
 8003912:	822b      	strh	r3, [r5, #16]

};
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	3738      	adds	r7, #56	@ 0x38
 8003918:	46bd      	mov	sp, r7
 800391a:	bdb0      	pop	{r4, r5, r7, pc}
 800391c:	20000074 	.word	0x20000074
 8003920:	45800000 	.word	0x45800000

08003924 <SPI_init>:
 *                   configuration.
 *
 * @return spi       Initialised SPI_t struct.
 **
 * =============================================================================== */
SPI_t SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b090      	sub	sp, #64	@ 0x40
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  // Early return error struct if peripheral is NULL
  if (interface == NULL)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <SPI_init+0x26>
    return (SPI_t){.interface = NULL};
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	461a      	mov	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	6053      	str	r3, [r2, #4]
 8003940:	6093      	str	r3, [r2, #8]
 8003942:	60d3      	str	r3, [r2, #12]
 8003944:	6113      	str	r3, [r2, #16]
 8003946:	6153      	str	r3, [r2, #20]
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
  spi.transmit     = SPI_transmit;
  spi.updateConfig = SPI_updateConfig;

  return spi;
}
 8003948:	e034      	b.n	80039b4 <SPI_init+0x90>
  SPI_t spi = {.interface = interface};
 800394a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	611a      	str	r2, [r3, #16]
 800395a:	615a      	str	r2, [r3, #20]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_updateConfig(&spi, config);
 8003960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f8df 	bl	8003b2a <SPI_updateConfig>
  spi.send         = (spi.config.DFF == SPI_DFF8) ? SPI_send8 : SPI_send16;
 800396c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <SPI_init+0x5a>
 800397a:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <SPI_init+0x98>)
 800397c:	e000      	b.n	8003980 <SPI_init+0x5c>
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <SPI_init+0x9c>)
 8003980:	633b      	str	r3, [r7, #48]	@ 0x30
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
 8003982:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <SPI_init+0x70>
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <SPI_init+0xa0>)
 8003992:	e000      	b.n	8003996 <SPI_init+0x72>
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <SPI_init+0xa4>)
 8003996:	637b      	str	r3, [r7, #52]	@ 0x34
  spi.transmit     = SPI_transmit;
 8003998:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <SPI_init+0xa8>)
 800399a:	63bb      	str	r3, [r7, #56]	@ 0x38
  spi.updateConfig = SPI_updateConfig;
 800399c:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <SPI_init+0xac>)
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return spi;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	461d      	mov	r5, r3
 80039a4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80039a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039b0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	3740      	adds	r7, #64	@ 0x40
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bdb0      	pop	{r4, r5, r7, pc}
 80039bc:	08003a63 	.word	0x08003a63
 80039c0:	08003a95 	.word	0x08003a95
 80039c4:	08003ac5 	.word	0x08003ac5
 80039c8:	08003af9 	.word	0x08003af9
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	08003b2b 	.word	0x08003b2b

080039d4 <_SPI_init>:
 *                    configuration. @see SPI_Config
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
static void _SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  // Wait for any ongoing transactions to finish
  while (interface->SR & SPI_SR_BSY);
 80039de:	bf00      	nop
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f9      	bne.n	80039e0 <_SPI_init+0xc>

  // Disable peripheral and update config
  config->SPE    = false;               // Make sure SPE is disabled in config
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	7813      	ldrb	r3, [r2, #0]
 80039f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f4:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with configured values
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	601a      	str	r2, [r3, #0]

  // Re-enable peripheral
  config->SPE    = true;                // Set SPE back to true
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	7813      	ldrb	r3, [r2, #0]
 8003a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a08:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with SPE enabled
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <SPI_transmit>:
 * @param  data 		Data payload to be sent to slave device.
 *
 * @retval response Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI_t *spi, uint16_t data) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response;
  spi->send(spi, data);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	4611      	mov	r1, r2
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
  spi->receive(spi, &response);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f107 020e 	add.w	r2, r7, #14
 8003a40:	4611      	mov	r1, r2
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 8003a46:	bf00      	nop
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f8      	bne.n	8003a48 <SPI_transmit+0x28>
  return response;
 8003a56:	89fb      	ldrh	r3, [r7, #14]
 8003a58:	b29b      	uxth	r3, r3
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <SPI_send8>:
 * @param  data The data to send.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI_t *spi, uint16_t data) {
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8003a6e:	bf00      	nop
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f8      	beq.n	8003a70 <SPI_send8+0xe>
  spi->interface->DR = (uint8_t)data;
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <SPI_send16>:

static void SPI_send16(SPI_t *spi, uint16_t data) {
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8003aa0:	bf00      	nop
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f8      	beq.n	8003aa2 <SPI_send16+0xe>
  spi->interface->DR = data;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	60da      	str	r2, [r3, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <SPI_receive8>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI_t *spi, volatile uint16_t *data) {
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8003ace:	bf00      	nop
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f8      	beq.n	8003ad0 <SPI_receive8+0xc>
  *data = (uint8_t)spi->interface->DR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	801a      	strh	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <SPI_receive16>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive16(SPI_t *spi, volatile uint16_t *data) {
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8003b02:	bf00      	nop
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f8      	beq.n	8003b04 <SPI_receive16+0xc>
  *data = spi->interface->DR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	801a      	strh	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <SPI_updateConfig>:
 * @param   spi Pointer to SPI_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void SPI_updateConfig(SPI_t *spi, SPI_Config *config) {
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  // Initialise config with default values if passed NULL.
  if (config == NULL) {
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <SPI_updateConfig+0x4c>
    config = &SPI_CONFIG_DEFAULT;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	81bb      	strh	r3, [r7, #12]
 8003b3e:	7b3b      	ldrb	r3, [r7, #12]
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	733b      	strb	r3, [r7, #12]
 8003b46:	7b3b      	ldrb	r3, [r7, #12]
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	733b      	strb	r3, [r7, #12]
 8003b4e:	7b3b      	ldrb	r3, [r7, #12]
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	733b      	strb	r3, [r7, #12]
 8003b56:	7b3b      	ldrb	r3, [r7, #12]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f362 03c5 	bfi	r3, r2, #3, #3
 8003b5e:	733b      	strb	r3, [r7, #12]
 8003b60:	7b7b      	ldrb	r3, [r7, #13]
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	737b      	strb	r3, [r7, #13]
 8003b68:	7b7b      	ldrb	r3, [r7, #13]
 8003b6a:	f043 0302 	orr.w	r3, r3, #2
 8003b6e:	737b      	strb	r3, [r7, #13]
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	603b      	str	r3, [r7, #0]
  }

  // Update peripheral with new config
  spi->config = *config;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	801a      	strh	r2, [r3, #0]

  // Initialise SPI registers and enable peripheral
  _SPI_init(spi->interface, config);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff24 	bl	80039d4 <_SPI_init>
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <HAL_MspInit+0x4c>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8003be0 <HAL_MspInit+0x4c>)
 8003ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_MspInit+0x4c>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_MspInit+0x4c>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <HAL_MspInit+0x4c>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_MspInit+0x4c>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800

08003be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <HAL_I2C_MspInit+0x84>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d12b      	bne.n	8003c5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <HAL_I2C_MspInit+0x88>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4a17      	ldr	r2, [pc, #92]	@ (8003c6c <HAL_I2C_MspInit+0x88>)
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <HAL_I2C_MspInit+0x88>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c22:	2303      	movs	r3, #3
 8003c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c26:	2312      	movs	r3, #18
 8003c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003c32:	2304      	movs	r3, #4
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <HAL_I2C_MspInit+0x8c>)
 8003c3e:	f000 fa01 	bl	8004044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_I2C_MspInit+0x88>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_I2C_MspInit+0x88>)
 8003c4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_I2C_MspInit+0x88>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003c5e:	bf00      	nop
 8003c60:	3728      	adds	r7, #40	@ 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40005800 	.word	0x40005800
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40021400 	.word	0x40021400

08003c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <NMI_Handler+0x4>

08003c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <HardFault_Handler+0x4>

08003c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <MemManage_Handler+0x4>

08003c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <BusFault_Handler+0x4>

08003c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <UsageFault_Handler+0x4>

08003c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cca:	f000 f891 	bl	8003df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <SystemInit+0x20>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <SystemInit+0x20>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003cfc:	f7ff ffea 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d00:	480c      	ldr	r0, [pc, #48]	@ (8003d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d02:	490d      	ldr	r1, [pc, #52]	@ (8003d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d04:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d08:	e002      	b.n	8003d10 <LoopCopyDataInit>

08003d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0e:	3304      	adds	r3, #4

08003d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d14:	d3f9      	bcc.n	8003d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d16:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d18:	4c0a      	ldr	r4, [pc, #40]	@ (8003d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d1c:	e001      	b.n	8003d22 <LoopFillZerobss>

08003d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d20:	3204      	adds	r2, #4

08003d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d24:	d3fb      	bcc.n	8003d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d26:	f002 f865 	bl	8005df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2a:	f7fd fa15 	bl	8001158 <main>
  bx  lr    
 8003d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d38:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8003d3c:	08005ea8 	.word	0x08005ea8
  ldr r2, =_sbss
 8003d40:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8003d44:	2000057c 	.word	0x2000057c

08003d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d48:	e7fe      	b.n	8003d48 <ADC_IRQHandler>
	...

08003d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d50:	4b0e      	ldr	r3, [pc, #56]	@ (8003d8c <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <HAL_Init+0x40>)
 8003d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_Init+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <HAL_Init+0x40>)
 8003d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d68:	4b08      	ldr	r3, [pc, #32]	@ (8003d8c <HAL_Init+0x40>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a07      	ldr	r2, [pc, #28]	@ (8003d8c <HAL_Init+0x40>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d74:	2003      	movs	r0, #3
 8003d76:	f000 f931 	bl	8003fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d7a:	200f      	movs	r0, #15
 8003d7c:	f000 f808 	bl	8003d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d80:	f7ff ff08 	bl	8003b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00

08003d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d98:	4b12      	ldr	r3, [pc, #72]	@ (8003de4 <HAL_InitTick+0x54>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b12      	ldr	r3, [pc, #72]	@ (8003de8 <HAL_InitTick+0x58>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f93b 	bl	800402a <HAL_SYSTICK_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00e      	b.n	8003ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d80a      	bhi.n	8003dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	f000 f911 	bl	8003ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd0:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <HAL_InitTick+0x5c>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000034 	.word	0x20000034
 8003de8:	2000003c 	.word	0x2000003c
 8003dec:	20000038 	.word	0x20000038

08003df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_IncTick+0x20>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_IncTick+0x24>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	4a04      	ldr	r2, [pc, #16]	@ (8003e14 <HAL_IncTick+0x24>)
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	2000003c 	.word	0x2000003c
 8003e14:	20000578 	.word	0x20000578

08003e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <HAL_GetTick+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000578 	.word	0x20000578

08003e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7ff ffee 	bl	8003e18 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d005      	beq.n	8003e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_Delay+0x44>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e56:	bf00      	nop
 8003e58:	f7ff ffde 	bl	8003e18 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d8f7      	bhi.n	8003e58 <HAL_Delay+0x28>
  {
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000003c 	.word	0x2000003c

08003e78 <__NVIC_SetPriorityGrouping>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	@ (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_GetPriorityGrouping>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	@ (8003ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 0307 	and.w	r3, r3, #7
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_SetPriority>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	db0a      	blt.n	8003f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	490c      	ldr	r1, [pc, #48]	@ (8003f28 <__NVIC_SetPriority+0x4c>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	0112      	lsls	r2, r2, #4
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	440b      	add	r3, r1
 8003f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f04:	e00a      	b.n	8003f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4908      	ldr	r1, [pc, #32]	@ (8003f2c <__NVIC_SetPriority+0x50>)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	3b04      	subs	r3, #4
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	440b      	add	r3, r1
 8003f1a:	761a      	strb	r2, [r3, #24]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	e000e100 	.word	0xe000e100
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	@ 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f1c3 0307 	rsb	r3, r3, #7
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	bf28      	it	cs
 8003f4e:	2304      	movcs	r3, #4
 8003f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d902      	bls.n	8003f60 <NVIC_EncodePriority+0x30>
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3b03      	subs	r3, #3
 8003f5e:	e000      	b.n	8003f62 <NVIC_EncodePriority+0x32>
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	401a      	ands	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f78:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	43d9      	mvns	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f88:	4313      	orrs	r3, r2
         );
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	@ 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa8:	d301      	bcc.n	8003fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003faa:	2301      	movs	r3, #1
 8003fac:	e00f      	b.n	8003fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fae:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd8 <SysTick_Config+0x40>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fb6:	210f      	movs	r1, #15
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	f7ff ff8e 	bl	8003edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <SysTick_Config+0x40>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fc6:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <SysTick_Config+0x40>)
 8003fc8:	2207      	movs	r2, #7
 8003fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	e000e010 	.word	0xe000e010

08003fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ff47 	bl	8003e78 <__NVIC_SetPriorityGrouping>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004004:	f7ff ff5c 	bl	8003ec0 <__NVIC_GetPriorityGrouping>
 8004008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	6978      	ldr	r0, [r7, #20]
 8004010:	f7ff ff8e 	bl	8003f30 <NVIC_EncodePriority>
 8004014:	4602      	mov	r2, r0
 8004016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff5d 	bl	8003edc <__NVIC_SetPriority>
}
 8004022:	bf00      	nop
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff ffb0 	bl	8003f98 <SysTick_Config>
 8004038:	4603      	mov	r3, r0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e177      	b.n	8004350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	f040 8166 	bne.w	800434a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d005      	beq.n	8004096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004092:	2b02      	cmp	r3, #2
 8004094:	d130      	bne.n	80040f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2203      	movs	r2, #3
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040cc:	2201      	movs	r2, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 0201 	and.w	r2, r3, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d017      	beq.n	8004134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d123      	bne.n	8004188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	08da      	lsrs	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3208      	adds	r2, #8
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	220f      	movs	r2, #15
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	08da      	lsrs	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3208      	adds	r2, #8
 8004182:	69b9      	ldr	r1, [r7, #24]
 8004184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0203 	and.w	r2, r3, #3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80c0 	beq.w	800434a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b66      	ldr	r3, [pc, #408]	@ (8004368 <HAL_GPIO_Init+0x324>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	4a65      	ldr	r2, [pc, #404]	@ (8004368 <HAL_GPIO_Init+0x324>)
 80041d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041da:	4b63      	ldr	r3, [pc, #396]	@ (8004368 <HAL_GPIO_Init+0x324>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e6:	4a61      	ldr	r2, [pc, #388]	@ (800436c <HAL_GPIO_Init+0x328>)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	3302      	adds	r3, #2
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <HAL_GPIO_Init+0x32c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d037      	beq.n	8004282 <HAL_GPIO_Init+0x23e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a57      	ldr	r2, [pc, #348]	@ (8004374 <HAL_GPIO_Init+0x330>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d031      	beq.n	800427e <HAL_GPIO_Init+0x23a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a56      	ldr	r2, [pc, #344]	@ (8004378 <HAL_GPIO_Init+0x334>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02b      	beq.n	800427a <HAL_GPIO_Init+0x236>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a55      	ldr	r2, [pc, #340]	@ (800437c <HAL_GPIO_Init+0x338>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d025      	beq.n	8004276 <HAL_GPIO_Init+0x232>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a54      	ldr	r2, [pc, #336]	@ (8004380 <HAL_GPIO_Init+0x33c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <HAL_GPIO_Init+0x22e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a53      	ldr	r2, [pc, #332]	@ (8004384 <HAL_GPIO_Init+0x340>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d019      	beq.n	800426e <HAL_GPIO_Init+0x22a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a52      	ldr	r2, [pc, #328]	@ (8004388 <HAL_GPIO_Init+0x344>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_GPIO_Init+0x226>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a51      	ldr	r2, [pc, #324]	@ (800438c <HAL_GPIO_Init+0x348>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00d      	beq.n	8004266 <HAL_GPIO_Init+0x222>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a50      	ldr	r2, [pc, #320]	@ (8004390 <HAL_GPIO_Init+0x34c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <HAL_GPIO_Init+0x21e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a4f      	ldr	r2, [pc, #316]	@ (8004394 <HAL_GPIO_Init+0x350>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_GPIO_Init+0x21a>
 800425a:	2309      	movs	r3, #9
 800425c:	e012      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800425e:	230a      	movs	r3, #10
 8004260:	e010      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004262:	2308      	movs	r3, #8
 8004264:	e00e      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004266:	2307      	movs	r3, #7
 8004268:	e00c      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800426a:	2306      	movs	r3, #6
 800426c:	e00a      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800426e:	2305      	movs	r3, #5
 8004270:	e008      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004272:	2304      	movs	r3, #4
 8004274:	e006      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004276:	2303      	movs	r3, #3
 8004278:	e004      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800427a:	2302      	movs	r3, #2
 800427c:	e002      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004282:	2300      	movs	r3, #0
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f002 0203 	and.w	r2, r2, #3
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	4093      	lsls	r3, r2
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004294:	4935      	ldr	r1, [pc, #212]	@ (800436c <HAL_GPIO_Init+0x328>)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	3302      	adds	r3, #2
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c6:	4a34      	ldr	r2, [pc, #208]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042cc:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042f0:	4a29      	ldr	r2, [pc, #164]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f6:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800431a:	4a1f      	ldr	r2, [pc, #124]	@ (8004398 <HAL_GPIO_Init+0x354>)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <HAL_GPIO_Init+0x354>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <HAL_GPIO_Init+0x354>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b0f      	cmp	r3, #15
 8004354:	f67f ae84 	bls.w	8004060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	3724      	adds	r7, #36	@ 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800
 800436c:	40013800 	.word	0x40013800
 8004370:	40020000 	.word	0x40020000
 8004374:	40020400 	.word	0x40020400
 8004378:	40020800 	.word	0x40020800
 800437c:	40020c00 	.word	0x40020c00
 8004380:	40021000 	.word	0x40021000
 8004384:	40021400 	.word	0x40021400
 8004388:	40021800 	.word	0x40021800
 800438c:	40021c00 	.word	0x40021c00
 8004390:	40022000 	.word	0x40022000
 8004394:	40022400 	.word	0x40022400
 8004398:	40013c00 	.word	0x40013c00

0800439c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
 80043a8:	4613      	mov	r3, r2
 80043aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043ac:	787b      	ldrb	r3, [r7, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043b8:	e003      	b.n	80043c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ba:	887b      	ldrh	r3, [r7, #2]
 80043bc:	041a      	lsls	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	619a      	str	r2, [r3, #24]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e12b      	b.n	800463a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fbf4 	bl	8003be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	@ 0x24
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004434:	f001 fcc2 	bl	8005dbc <HAL_RCC_GetPCLK1Freq>
 8004438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4a81      	ldr	r2, [pc, #516]	@ (8004644 <HAL_I2C_Init+0x274>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d807      	bhi.n	8004454 <HAL_I2C_Init+0x84>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a80      	ldr	r2, [pc, #512]	@ (8004648 <HAL_I2C_Init+0x278>)
 8004448:	4293      	cmp	r3, r2
 800444a:	bf94      	ite	ls
 800444c:	2301      	movls	r3, #1
 800444e:	2300      	movhi	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e006      	b.n	8004462 <HAL_I2C_Init+0x92>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a7d      	ldr	r2, [pc, #500]	@ (800464c <HAL_I2C_Init+0x27c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	bf94      	ite	ls
 800445c:	2301      	movls	r3, #1
 800445e:	2300      	movhi	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0e7      	b.n	800463a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a78      	ldr	r2, [pc, #480]	@ (8004650 <HAL_I2C_Init+0x280>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0c9b      	lsrs	r3, r3, #18
 8004474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a6a      	ldr	r2, [pc, #424]	@ (8004644 <HAL_I2C_Init+0x274>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d802      	bhi.n	80044a4 <HAL_I2C_Init+0xd4>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3301      	adds	r3, #1
 80044a2:	e009      	b.n	80044b8 <HAL_I2C_Init+0xe8>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	4a69      	ldr	r2, [pc, #420]	@ (8004654 <HAL_I2C_Init+0x284>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	099b      	lsrs	r3, r3, #6
 80044b6:	3301      	adds	r3, #1
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80044ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	495c      	ldr	r1, [pc, #368]	@ (8004644 <HAL_I2C_Init+0x274>)
 80044d4:	428b      	cmp	r3, r1
 80044d6:	d819      	bhi.n	800450c <HAL_I2C_Init+0x13c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1e59      	subs	r1, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044ec:	400b      	ands	r3, r1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_I2C_Init+0x138>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1e59      	subs	r1, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004500:	3301      	adds	r3, #1
 8004502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004506:	e051      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 8004508:	2304      	movs	r3, #4
 800450a:	e04f      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <HAL_I2C_Init+0x168>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1e58      	subs	r0, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	440b      	add	r3, r1
 8004522:	fbb0 f3f3 	udiv	r3, r0, r3
 8004526:	3301      	adds	r3, #1
 8004528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e012      	b.n	800455e <HAL_I2C_Init+0x18e>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1e58      	subs	r0, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	0099      	lsls	r1, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	fbb0 f3f3 	udiv	r3, r0, r3
 800454e:	3301      	adds	r3, #1
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Init+0x196>
 8004562:	2301      	movs	r3, #1
 8004564:	e022      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10e      	bne.n	800458c <HAL_I2C_Init+0x1bc>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e58      	subs	r0, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	440b      	add	r3, r1
 800457c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004580:	3301      	adds	r3, #1
 8004582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800458a:	e00f      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1e58      	subs	r0, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	0099      	lsls	r1, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	6809      	ldr	r1, [r1, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80045da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6911      	ldr	r1, [r2, #16]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68d2      	ldr	r2, [r2, #12]
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	000186a0 	.word	0x000186a0
 8004648:	001e847f 	.word	0x001e847f
 800464c:	003d08ff 	.word	0x003d08ff
 8004650:	431bde83 	.word	0x431bde83
 8004654:	10624dd3 	.word	0x10624dd3

08004658 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	461a      	mov	r2, r3
 8004664:	460b      	mov	r3, r1
 8004666:	817b      	strh	r3, [r7, #10]
 8004668:	4613      	mov	r3, r2
 800466a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800466c:	f7ff fbd4 	bl	8003e18 <HAL_GetTick>
 8004670:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b20      	cmp	r3, #32
 800467c:	f040 80e0 	bne.w	8004840 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	2319      	movs	r3, #25
 8004686:	2201      	movs	r2, #1
 8004688:	4970      	ldr	r1, [pc, #448]	@ (800484c <HAL_I2C_Master_Transmit+0x1f4>)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fc64 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
 8004698:	e0d3      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_I2C_Master_Transmit+0x50>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e0cc      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ea>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d007      	beq.n	80046ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2221      	movs	r2, #33	@ 0x21
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2210      	movs	r2, #16
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	893a      	ldrh	r2, [r7, #8]
 80046fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a50      	ldr	r2, [pc, #320]	@ (8004850 <HAL_I2C_Master_Transmit+0x1f8>)
 800470e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004710:	8979      	ldrh	r1, [r7, #10]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 face 	bl	8004cb8 <I2C_MasterRequestWrite>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e08d      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800473c:	e066      	b.n	800480c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	6a39      	ldr	r1, [r7, #32]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fd22 	bl	800518c <I2C_WaitOnTXEFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	2b04      	cmp	r3, #4
 8004754:	d107      	bne.n	8004766 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06b      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d11b      	bne.n	80047e0 <HAL_I2C_Master_Transmit+0x188>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6a39      	ldr	r1, [r7, #32]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fd19 	bl	800521c <I2C_WaitOnBTFFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d107      	bne.n	8004808 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004806:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e01a      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d194      	bne.n	800473e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	00100002 	.word	0x00100002
 8004850:	ffff0000 	.word	0xffff0000

08004854 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	@ 0x30
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	461a      	mov	r2, r3
 8004860:	460b      	mov	r3, r1
 8004862:	817b      	strh	r3, [r7, #10]
 8004864:	4613      	mov	r3, r2
 8004866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004868:	f7ff fad6 	bl	8003e18 <HAL_GetTick>
 800486c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	f040 8217 	bne.w	8004caa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2319      	movs	r3, #25
 8004882:	2201      	movs	r2, #1
 8004884:	497c      	ldr	r1, [pc, #496]	@ (8004a78 <HAL_I2C_Master_Receive+0x224>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fb66 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
 8004894:	e20a      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_I2C_Master_Receive+0x50>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e203      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d007      	beq.n	80048ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2222      	movs	r2, #34	@ 0x22
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2210      	movs	r2, #16
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	893a      	ldrh	r2, [r7, #8]
 80048fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a5c      	ldr	r2, [pc, #368]	@ (8004a7c <HAL_I2C_Master_Receive+0x228>)
 800490a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800490c:	8979      	ldrh	r1, [r7, #10]
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa52 	bl	8004dbc <I2C_MasterRequestRead>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e1c4      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d113      	bne.n	8004952 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e198      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004956:	2b01      	cmp	r3, #1
 8004958:	d11b      	bne.n	8004992 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e178      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004996:	2b02      	cmp	r3, #2
 8004998:	d11b      	bne.n	80049d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	e158      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049f8:	e144      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	f200 80f1 	bhi.w	8004be6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d123      	bne.n	8004a54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fc4b 	bl	80052ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e145      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a52:	e117      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d14e      	bne.n	8004afa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	2200      	movs	r2, #0
 8004a64:	4906      	ldr	r1, [pc, #24]	@ (8004a80 <HAL_I2C_Master_Receive+0x22c>)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fa76 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e11a      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
 8004a76:	bf00      	nop
 8004a78:	00100002 	.word	0x00100002
 8004a7c:	ffff0000 	.word	0xffff0000
 8004a80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004af8:	e0c4      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	2200      	movs	r2, #0
 8004b02:	496c      	ldr	r1, [pc, #432]	@ (8004cb4 <HAL_I2C_Master_Receive+0x460>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fa27 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0cb      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4955      	ldr	r1, [pc, #340]	@ (8004cb4 <HAL_I2C_Master_Receive+0x460>)
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f9f9 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e09d      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004be4:	e04e      	b.n	8004c84 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fb5e 	bl	80052ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e058      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d124      	bne.n	8004c84 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d107      	bne.n	8004c52 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f aeb6 	bne.w	80049fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3728      	adds	r7, #40	@ 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	00010004 	.word	0x00010004

08004cb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d006      	beq.n	8004ce2 <I2C_MasterRequestWrite+0x2a>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d003      	beq.n	8004ce2 <I2C_MasterRequestWrite+0x2a>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ce0:	d108      	bne.n	8004cf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e00b      	b.n	8004d0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	2b12      	cmp	r3, #18
 8004cfa:	d107      	bne.n	8004d0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f91d 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d32:	d103      	bne.n	8004d3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e035      	b.n	8004dac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d48:	d108      	bne.n	8004d5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d58:	611a      	str	r2, [r3, #16]
 8004d5a:	e01b      	b.n	8004d94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d5c:	897b      	ldrh	r3, [r7, #10]
 8004d5e:	11db      	asrs	r3, r3, #7
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 0306 	and.w	r3, r3, #6
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f063 030f 	orn	r3, r3, #15
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	490e      	ldr	r1, [pc, #56]	@ (8004db4 <I2C_MasterRequestWrite+0xfc>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f966 	bl	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e010      	b.n	8004dac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4907      	ldr	r1, [pc, #28]	@ (8004db8 <I2C_MasterRequestWrite+0x100>)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f956 	bl	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	00010008 	.word	0x00010008
 8004db8:	00010002 	.word	0x00010002

08004dbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004de0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d006      	beq.n	8004df6 <I2C_MasterRequestRead+0x3a>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d003      	beq.n	8004df6 <I2C_MasterRequestRead+0x3a>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df4:	d108      	bne.n	8004e08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e00b      	b.n	8004e20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	2b11      	cmp	r3, #17
 8004e0e:	d107      	bne.n	8004e20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f893 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e46:	d103      	bne.n	8004e50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e079      	b.n	8004f48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e5c:	d108      	bne.n	8004e70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	e05f      	b.n	8004f30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e70:	897b      	ldrh	r3, [r7, #10]
 8004e72:	11db      	asrs	r3, r3, #7
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f063 030f 	orn	r3, r3, #15
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4930      	ldr	r1, [pc, #192]	@ (8004f50 <I2C_MasterRequestRead+0x194>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f8dc 	bl	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e054      	b.n	8004f48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4929      	ldr	r1, [pc, #164]	@ (8004f54 <I2C_MasterRequestRead+0x198>)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f8cc 	bl	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e044      	b.n	8004f48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f831 	bl	8004f58 <I2C_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f0a:	d103      	bne.n	8004f14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e017      	b.n	8004f48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	11db      	asrs	r3, r3, #7
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f063 030e 	orn	r3, r3, #14
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4907      	ldr	r1, [pc, #28]	@ (8004f54 <I2C_MasterRequestRead+0x198>)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f888 	bl	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	00010008 	.word	0x00010008
 8004f54:	00010002 	.word	0x00010002

08004f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f68:	e048      	b.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d044      	beq.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f72:	f7fe ff51 	bl	8003e18 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d302      	bcc.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d139      	bne.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10d      	bne.n	8004fae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	43da      	mvns	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	e00c      	b.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d116      	bne.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e023      	b.n	8005044 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10d      	bne.n	8005022 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	43da      	mvns	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	e00c      	b.n	800503c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	43da      	mvns	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	429a      	cmp	r2, r3
 8005040:	d093      	beq.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800505a:	e071      	b.n	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506a:	d123      	bne.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800507a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a0:	f043 0204 	orr.w	r2, r3, #4
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e067      	b.n	8005184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d041      	beq.n	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050bc:	f7fe feac 	bl	8003e18 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d302      	bcc.n	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d136      	bne.n	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10c      	bne.n	80050f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf14      	ite	ne
 80050ee:	2301      	movne	r3, #1
 80050f0:	2300      	moveq	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	e00b      	b.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	43da      	mvns	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	f043 0220 	orr.w	r2, r3, #32
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e021      	b.n	8005184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10c      	bne.n	8005164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	43da      	mvns	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e00b      	b.n	800517c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	43da      	mvns	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f47f af6d 	bne.w	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005198:	e034      	b.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f8e3 	bl	8005366 <I2C_IsAcknowledgeFailed>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e034      	b.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d028      	beq.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fe fe31 	bl	8003e18 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11d      	bne.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d2:	2b80      	cmp	r3, #128	@ 0x80
 80051d4:	d016      	beq.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e007      	b.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520e:	2b80      	cmp	r3, #128	@ 0x80
 8005210:	d1c3      	bne.n	800519a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005228:	e034      	b.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f89b 	bl	8005366 <I2C_IsAcknowledgeFailed>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e034      	b.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d028      	beq.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fe fde9 	bl	8003e18 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11d      	bne.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b04      	cmp	r3, #4
 8005264:	d016      	beq.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e007      	b.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d1c3      	bne.n	800522a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b8:	e049      	b.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d119      	bne.n	80052fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0210 	mvn.w	r2, #16
 80052d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e030      	b.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fe fd8c 	bl	8003e18 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11d      	bne.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d016      	beq.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f043 0220 	orr.w	r2, r3, #32
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e007      	b.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b40      	cmp	r3, #64	@ 0x40
 800535a:	d1ae      	bne.n	80052ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537c:	d11b      	bne.n	80053b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005386:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d129      	bne.n	800542e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2224      	movs	r2, #36	@ 0x24
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0210 	bic.w	r2, r2, #16
 8005400:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b20      	cmp	r3, #32
 8005454:	d12a      	bne.n	80054ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2224      	movs	r2, #36	@ 0x24
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	f023 030f 	bic.w	r3, r3, #15
 800547c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	b29a      	uxth	r2, r3
 8005482:	89fb      	ldrh	r3, [r7, #14]
 8005484:	4313      	orrs	r3, r2
 8005486:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	89fa      	ldrh	r2, [r7, #14]
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e000      	b.n	80054ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4b20      	ldr	r3, [pc, #128]	@ (800554c <HAL_PWREx_EnableOverDrive+0x90>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	4a1f      	ldr	r2, [pc, #124]	@ (800554c <HAL_PWREx_EnableOverDrive+0x90>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054d6:	4b1d      	ldr	r3, [pc, #116]	@ (800554c <HAL_PWREx_EnableOverDrive+0x90>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x94>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054e8:	f7fe fc96 	bl	8003e18 <HAL_GetTick>
 80054ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054ee:	e009      	b.n	8005504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054f0:	f7fe fc92 	bl	8003e18 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054fe:	d901      	bls.n	8005504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e01f      	b.n	8005544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005504:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <HAL_PWREx_EnableOverDrive+0x98>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005510:	d1ee      	bne.n	80054f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005512:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005518:	f7fe fc7e 	bl	8003e18 <HAL_GetTick>
 800551c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800551e:	e009      	b.n	8005534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005520:	f7fe fc7a 	bl	8003e18 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800552e:	d901      	bls.n	8005534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e007      	b.n	8005544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005534:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <HAL_PWREx_EnableOverDrive+0x98>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005540:	d1ee      	bne.n	8005520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800
 8005550:	420e0040 	.word	0x420e0040
 8005554:	40007000 	.word	0x40007000
 8005558:	420e0044 	.word	0x420e0044

0800555c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e267      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d075      	beq.n	8005666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800557a:	4b88      	ldr	r3, [pc, #544]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b04      	cmp	r3, #4
 8005584:	d00c      	beq.n	80055a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005586:	4b85      	ldr	r3, [pc, #532]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800558e:	2b08      	cmp	r3, #8
 8005590:	d112      	bne.n	80055b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005592:	4b82      	ldr	r3, [pc, #520]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800559e:	d10b      	bne.n	80055b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a0:	4b7e      	ldr	r3, [pc, #504]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d05b      	beq.n	8005664 <HAL_RCC_OscConfig+0x108>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d157      	bne.n	8005664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e242      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c0:	d106      	bne.n	80055d0 <HAL_RCC_OscConfig+0x74>
 80055c2:	4b76      	ldr	r3, [pc, #472]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a75      	ldr	r2, [pc, #468]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e01d      	b.n	800560c <HAL_RCC_OscConfig+0xb0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x98>
 80055da:	4b70      	ldr	r3, [pc, #448]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a6f      	ldr	r2, [pc, #444]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	4b6d      	ldr	r3, [pc, #436]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6c      	ldr	r2, [pc, #432]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e00b      	b.n	800560c <HAL_RCC_OscConfig+0xb0>
 80055f4:	4b69      	ldr	r3, [pc, #420]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a68      	ldr	r2, [pc, #416]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b66      	ldr	r3, [pc, #408]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a65      	ldr	r2, [pc, #404]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800560a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d013      	beq.n	800563c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fe fc00 	bl	8003e18 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800561c:	f7fe fbfc 	bl	8003e18 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	@ 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e207      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562e:	4b5b      	ldr	r3, [pc, #364]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0xc0>
 800563a:	e014      	b.n	8005666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fe fbec 	bl	8003e18 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005644:	f7fe fbe8 	bl	8003e18 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	@ 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e1f3      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005656:	4b51      	ldr	r3, [pc, #324]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0xe8>
 8005662:	e000      	b.n	8005666 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d063      	beq.n	800573a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005672:	4b4a      	ldr	r3, [pc, #296]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800567e:	4b47      	ldr	r3, [pc, #284]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005686:	2b08      	cmp	r3, #8
 8005688:	d11c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800568a:	4b44      	ldr	r3, [pc, #272]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	4b41      	ldr	r3, [pc, #260]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_RCC_OscConfig+0x152>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e1c7      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ae:	4b3b      	ldr	r3, [pc, #236]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4937      	ldr	r1, [pc, #220]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c2:	e03a      	b.n	800573a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d020      	beq.n	800570e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056cc:	4b34      	ldr	r3, [pc, #208]	@ (80057a0 <HAL_RCC_OscConfig+0x244>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d2:	f7fe fba1 	bl	8003e18 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056da:	f7fe fb9d 	bl	8003e18 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e1a8      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ec:	4b2b      	ldr	r3, [pc, #172]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f8:	4b28      	ldr	r3, [pc, #160]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4925      	ldr	r1, [pc, #148]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005708:	4313      	orrs	r3, r2
 800570a:	600b      	str	r3, [r1, #0]
 800570c:	e015      	b.n	800573a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800570e:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <HAL_RCC_OscConfig+0x244>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fe fb80 	bl	8003e18 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571c:	f7fe fb7c 	bl	8003e18 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e187      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572e:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d036      	beq.n	80057b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800574e:	4b15      	ldr	r3, [pc, #84]	@ (80057a4 <HAL_RCC_OscConfig+0x248>)
 8005750:	2201      	movs	r2, #1
 8005752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005754:	f7fe fb60 	bl	8003e18 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575c:	f7fe fb5c 	bl	8003e18 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e167      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576e:	4b0b      	ldr	r3, [pc, #44]	@ (800579c <HAL_RCC_OscConfig+0x240>)
 8005770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0x200>
 800577a:	e01b      	b.n	80057b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800577c:	4b09      	ldr	r3, [pc, #36]	@ (80057a4 <HAL_RCC_OscConfig+0x248>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005782:	f7fe fb49 	bl	8003e18 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005788:	e00e      	b.n	80057a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578a:	f7fe fb45 	bl	8003e18 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d907      	bls.n	80057a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e150      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
 800579c:	40023800 	.word	0x40023800
 80057a0:	42470000 	.word	0x42470000
 80057a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a8:	4b88      	ldr	r3, [pc, #544]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80057aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ea      	bne.n	800578a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8097 	beq.w	80058f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b81      	ldr	r3, [pc, #516]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	4b7d      	ldr	r3, [pc, #500]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	4a7c      	ldr	r2, [pc, #496]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057e2:	4b7a      	ldr	r3, [pc, #488]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	4b77      	ldr	r3, [pc, #476]	@ (80059d0 <HAL_RCC_OscConfig+0x474>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d118      	bne.n	8005830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057fe:	4b74      	ldr	r3, [pc, #464]	@ (80059d0 <HAL_RCC_OscConfig+0x474>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a73      	ldr	r2, [pc, #460]	@ (80059d0 <HAL_RCC_OscConfig+0x474>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800580a:	f7fe fb05 	bl	8003e18 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005812:	f7fe fb01 	bl	8003e18 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e10c      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005824:	4b6a      	ldr	r3, [pc, #424]	@ (80059d0 <HAL_RCC_OscConfig+0x474>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d106      	bne.n	8005846 <HAL_RCC_OscConfig+0x2ea>
 8005838:	4b64      	ldr	r3, [pc, #400]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583c:	4a63      	ldr	r2, [pc, #396]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	6713      	str	r3, [r2, #112]	@ 0x70
 8005844:	e01c      	b.n	8005880 <HAL_RCC_OscConfig+0x324>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b05      	cmp	r3, #5
 800584c:	d10c      	bne.n	8005868 <HAL_RCC_OscConfig+0x30c>
 800584e:	4b5f      	ldr	r3, [pc, #380]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	4a5e      	ldr	r2, [pc, #376]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005854:	f043 0304 	orr.w	r3, r3, #4
 8005858:	6713      	str	r3, [r2, #112]	@ 0x70
 800585a:	4b5c      	ldr	r3, [pc, #368]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585e:	4a5b      	ldr	r2, [pc, #364]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6713      	str	r3, [r2, #112]	@ 0x70
 8005866:	e00b      	b.n	8005880 <HAL_RCC_OscConfig+0x324>
 8005868:	4b58      	ldr	r3, [pc, #352]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	4a57      	ldr	r2, [pc, #348]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	6713      	str	r3, [r2, #112]	@ 0x70
 8005874:	4b55      	ldr	r3, [pc, #340]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	4a54      	ldr	r2, [pc, #336]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 800587a:	f023 0304 	bic.w	r3, r3, #4
 800587e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d015      	beq.n	80058b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005888:	f7fe fac6 	bl	8003e18 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588e:	e00a      	b.n	80058a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fe fac2 	bl	8003e18 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e0cb      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a6:	4b49      	ldr	r3, [pc, #292]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ee      	beq.n	8005890 <HAL_RCC_OscConfig+0x334>
 80058b2:	e014      	b.n	80058de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b4:	f7fe fab0 	bl	8003e18 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058bc:	f7fe faac 	bl	8003e18 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e0b5      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d2:	4b3e      	ldr	r3, [pc, #248]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1ee      	bne.n	80058bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d105      	bne.n	80058f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e4:	4b39      	ldr	r3, [pc, #228]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	4a38      	ldr	r2, [pc, #224]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80058ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80a1 	beq.w	8005a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058fa:	4b34      	ldr	r3, [pc, #208]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b08      	cmp	r3, #8
 8005904:	d05c      	beq.n	80059c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d141      	bne.n	8005992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590e:	4b31      	ldr	r3, [pc, #196]	@ (80059d4 <HAL_RCC_OscConfig+0x478>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005914:	f7fe fa80 	bl	8003e18 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591c:	f7fe fa7c 	bl	8003e18 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e087      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592e:	4b27      	ldr	r3, [pc, #156]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	3b01      	subs	r3, #1
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	491b      	ldr	r1, [pc, #108]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005964:	4b1b      	ldr	r3, [pc, #108]	@ (80059d4 <HAL_RCC_OscConfig+0x478>)
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596a:	f7fe fa55 	bl	8003e18 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005972:	f7fe fa51 	bl	8003e18 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e05c      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005984:	4b11      	ldr	r3, [pc, #68]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x416>
 8005990:	e054      	b.n	8005a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005992:	4b10      	ldr	r3, [pc, #64]	@ (80059d4 <HAL_RCC_OscConfig+0x478>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7fe fa3e 	bl	8003e18 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a0:	f7fe fa3a 	bl	8003e18 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e045      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_RCC_OscConfig+0x470>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x444>
 80059be:	e03d      	b.n	8005a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e038      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
 80059cc:	40023800 	.word	0x40023800
 80059d0:	40007000 	.word	0x40007000
 80059d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <HAL_RCC_OscConfig+0x4ec>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d028      	beq.n	8005a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d121      	bne.n	8005a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d11a      	bne.n	8005a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d111      	bne.n	8005a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	3b01      	subs	r3, #1
 8005a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d107      	bne.n	8005a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800

08005a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0cc      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a60:	4b68      	ldr	r3, [pc, #416]	@ (8005c04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d90c      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b65      	ldr	r3, [pc, #404]	@ (8005c04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b63      	ldr	r3, [pc, #396]	@ (8005c04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0b8      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d020      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa0:	4b59      	ldr	r3, [pc, #356]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4a58      	ldr	r2, [pc, #352]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab8:	4b53      	ldr	r3, [pc, #332]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4a52      	ldr	r2, [pc, #328]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac4:	4b50      	ldr	r3, [pc, #320]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	494d      	ldr	r1, [pc, #308]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d044      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	4b47      	ldr	r3, [pc, #284]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d119      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e07f      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d003      	beq.n	8005b0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d107      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e06f      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e067      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b2a:	4b37      	ldr	r3, [pc, #220]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 0203 	bic.w	r2, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4934      	ldr	r1, [pc, #208]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b3c:	f7fe f96c 	bl	8003e18 <HAL_GetTick>
 8005b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b42:	e00a      	b.n	8005b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b44:	f7fe f968 	bl	8003e18 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e04f      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 020c 	and.w	r2, r3, #12
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d1eb      	bne.n	8005b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b25      	ldr	r3, [pc, #148]	@ (8005c04 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d20c      	bcs.n	8005b94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b22      	ldr	r3, [pc, #136]	@ (8005c04 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	4b20      	ldr	r3, [pc, #128]	@ (8005c04 <HAL_RCC_ClockConfig+0x1b8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e032      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba0:	4b19      	ldr	r3, [pc, #100]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4916      	ldr	r1, [pc, #88]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bbe:	4b12      	ldr	r3, [pc, #72]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	490e      	ldr	r1, [pc, #56]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bd2:	f000 f821 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	490a      	ldr	r1, [pc, #40]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005be4:	5ccb      	ldrb	r3, [r1, r3]
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe f8cc 	bl	8003d90 <HAL_InitTick>

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40023c00 	.word	0x40023c00
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	08005e80 	.word	0x08005e80
 8005c10:	20000034 	.word	0x20000034
 8005c14:	20000038 	.word	0x20000038

08005c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c1c:	b090      	sub	sp, #64	@ 0x40
 8005c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c30:	4b59      	ldr	r3, [pc, #356]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 030c 	and.w	r3, r3, #12
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d00d      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x40>
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	f200 80a1 	bhi.w	8005d84 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x34>
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d003      	beq.n	8005c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c4a:	e09b      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b53      	ldr	r3, [pc, #332]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c50:	e09b      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c52:	4b53      	ldr	r3, [pc, #332]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c56:	e098      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c58:	4b4f      	ldr	r3, [pc, #316]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c60:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c62:	4b4d      	ldr	r3, [pc, #308]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d028      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	099b      	lsrs	r3, r3, #6
 8005c74:	2200      	movs	r2, #0
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c80:	2100      	movs	r1, #0
 8005c82:	4b47      	ldr	r3, [pc, #284]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c84:	fb03 f201 	mul.w	r2, r3, r1
 8005c88:	2300      	movs	r3, #0
 8005c8a:	fb00 f303 	mul.w	r3, r0, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	4a43      	ldr	r2, [pc, #268]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c92:	fba0 1202 	umull	r1, r2, r0, r2
 8005c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c98:	460a      	mov	r2, r1
 8005c9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9e:	4413      	add	r3, r2
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	61fa      	str	r2, [r7, #28]
 8005caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005cb2:	f7fa fca9 	bl	8000608 <__aeabi_uldivmod>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4613      	mov	r3, r2
 8005cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cbe:	e053      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc0:	4b35      	ldr	r3, [pc, #212]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	099b      	lsrs	r3, r3, #6
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	617a      	str	r2, [r7, #20]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005cd2:	f04f 0b00 	mov.w	fp, #0
 8005cd6:	4652      	mov	r2, sl
 8005cd8:	465b      	mov	r3, fp
 8005cda:	f04f 0000 	mov.w	r0, #0
 8005cde:	f04f 0100 	mov.w	r1, #0
 8005ce2:	0159      	lsls	r1, r3, #5
 8005ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ce8:	0150      	lsls	r0, r2, #5
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	ebb2 080a 	subs.w	r8, r2, sl
 8005cf2:	eb63 090b 	sbc.w	r9, r3, fp
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d0a:	ebb2 0408 	subs.w	r4, r2, r8
 8005d0e:	eb63 0509 	sbc.w	r5, r3, r9
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	00eb      	lsls	r3, r5, #3
 8005d1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d20:	00e2      	lsls	r2, r4, #3
 8005d22:	4614      	mov	r4, r2
 8005d24:	461d      	mov	r5, r3
 8005d26:	eb14 030a 	adds.w	r3, r4, sl
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	eb45 030b 	adc.w	r3, r5, fp
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d3e:	4629      	mov	r1, r5
 8005d40:	028b      	lsls	r3, r1, #10
 8005d42:	4621      	mov	r1, r4
 8005d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d48:	4621      	mov	r1, r4
 8005d4a:	028a      	lsls	r2, r1, #10
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d52:	2200      	movs	r2, #0
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	60fa      	str	r2, [r7, #12]
 8005d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d5c:	f7fa fc54 	bl	8000608 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d68:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005d78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d82:	e002      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d84:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005d86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3740      	adds	r7, #64	@ 0x40
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	00f42400 	.word	0x00f42400
 8005da0:	017d7840 	.word	0x017d7840

08005da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005da8:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005daa:	681b      	ldr	r3, [r3, #0]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000034 	.word	0x20000034

08005dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dc0:	f7ff fff0 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	0a9b      	lsrs	r3, r3, #10
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	4903      	ldr	r1, [pc, #12]	@ (8005de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	08005e90 	.word	0x08005e90

08005de4 <memset>:
 8005de4:	4402      	add	r2, r0
 8005de6:	4603      	mov	r3, r0
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d100      	bne.n	8005dee <memset+0xa>
 8005dec:	4770      	bx	lr
 8005dee:	f803 1b01 	strb.w	r1, [r3], #1
 8005df2:	e7f9      	b.n	8005de8 <memset+0x4>

08005df4 <__libc_init_array>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4d0d      	ldr	r5, [pc, #52]	@ (8005e2c <__libc_init_array+0x38>)
 8005df8:	4c0d      	ldr	r4, [pc, #52]	@ (8005e30 <__libc_init_array+0x3c>)
 8005dfa:	1b64      	subs	r4, r4, r5
 8005dfc:	10a4      	asrs	r4, r4, #2
 8005dfe:	2600      	movs	r6, #0
 8005e00:	42a6      	cmp	r6, r4
 8005e02:	d109      	bne.n	8005e18 <__libc_init_array+0x24>
 8005e04:	4d0b      	ldr	r5, [pc, #44]	@ (8005e34 <__libc_init_array+0x40>)
 8005e06:	4c0c      	ldr	r4, [pc, #48]	@ (8005e38 <__libc_init_array+0x44>)
 8005e08:	f000 f818 	bl	8005e3c <_init>
 8005e0c:	1b64      	subs	r4, r4, r5
 8005e0e:	10a4      	asrs	r4, r4, #2
 8005e10:	2600      	movs	r6, #0
 8005e12:	42a6      	cmp	r6, r4
 8005e14:	d105      	bne.n	8005e22 <__libc_init_array+0x2e>
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1c:	4798      	blx	r3
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7ee      	b.n	8005e00 <__libc_init_array+0xc>
 8005e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e26:	4798      	blx	r3
 8005e28:	3601      	adds	r6, #1
 8005e2a:	e7f2      	b.n	8005e12 <__libc_init_array+0x1e>
 8005e2c:	08005ea0 	.word	0x08005ea0
 8005e30:	08005ea0 	.word	0x08005ea0
 8005e34:	08005ea0 	.word	0x08005ea0
 8005e38:	08005ea4 	.word	0x08005ea4

08005e3c <_init>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr

08005e48 <_fini>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr
